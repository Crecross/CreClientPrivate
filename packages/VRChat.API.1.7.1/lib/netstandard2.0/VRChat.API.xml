<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRChat.API</name>
    </assembly>
    <members>
        <member name="T:VRChat.API.Api.IAuthenticationApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.CheckUserExists(System.String,System.String,System.String,System.String)">
            <summary>
            Check User Exists
            </summary>
            <remarks>
            Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="email">Filter by email. (optional)</param>
            <param name="displayName">Filter by displayName. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="excludeUserId">Exclude by UserID. (optional)</param>
            <returns>UserExists</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.CheckUserExistsWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Check User Exists
            </summary>
            <remarks>
            Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="email">Filter by email. (optional)</param>
            <param name="displayName">Filter by displayName. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="excludeUserId">Exclude by UserID. (optional)</param>
            <returns>ApiResponse of UserExists</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.DeleteUser(System.String)">
            <summary>
            Delete User
            </summary>
            <remarks>
            Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.DeleteUserWithHttpInfo(System.String)">
            <summary>
            Delete User
            </summary>
            <remarks>
            Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.GetCurrentUser">
            <summary>
            Login and/or Get Current User Info
            </summary>
            <remarks>
            This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.GetCurrentUserWithHttpInfo">
            <summary>
            Login and/or Get Current User Info
            </summary>
            <remarks>
            This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.Logout">
            <summary>
            Logout
            </summary>
            <remarks>
            Invalidates the login session.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.LogoutWithHttpInfo">
            <summary>
            Logout
            </summary>
            <remarks>
            Invalidates the login session.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.Verify2FA(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Verify 2FA code
            </summary>
            <remarks>
            Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <returns>Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.Verify2FAWithHttpInfo(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Verify 2FA code
            </summary>
            <remarks>
            Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <returns>ApiResponse of Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.VerifyAuthToken">
            <summary>
            Verify Auth Token
            </summary>
            <remarks>
            Verify whether the currently provided Auth Token is valid.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>VerifyAuthTokenResult</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.VerifyAuthTokenWithHttpInfo">
            <summary>
            Verify Auth Token
            </summary>
            <remarks>
            Verify whether the currently provided Auth Token is valid.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of VerifyAuthTokenResult</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.VerifyRecoveryCode(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Verify 2FA code with Recovery code
            </summary>
            <remarks>
            Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <returns>Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiSync.VerifyRecoveryCodeWithHttpInfo(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Verify 2FA code with Recovery code
            </summary>
            <remarks>
            Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <returns>ApiResponse of Verify2FAResult</returns>
        </member>
        <member name="T:VRChat.API.Api.IAuthenticationApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.CheckUserExistsAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check User Exists
            </summary>
            <remarks>
            Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="email">Filter by email. (optional)</param>
            <param name="displayName">Filter by displayName. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="excludeUserId">Exclude by UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UserExists</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.CheckUserExistsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check User Exists
            </summary>
            <remarks>
            Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="email">Filter by email. (optional)</param>
            <param name="displayName">Filter by displayName. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="excludeUserId">Exclude by UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UserExists)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.DeleteUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete User
            </summary>
            <remarks>
            Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.DeleteUserWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete User
            </summary>
            <remarks>
            Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.GetCurrentUserAsync(System.Threading.CancellationToken)">
            <summary>
            Login and/or Get Current User Info
            </summary>
            <remarks>
            This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.GetCurrentUserWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Login and/or Get Current User Info
            </summary>
            <remarks>
            This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.LogoutAsync(System.Threading.CancellationToken)">
            <summary>
            Logout
            </summary>
            <remarks>
            Invalidates the login session.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.LogoutWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Logout
            </summary>
            <remarks>
            Invalidates the login session.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.Verify2FAAsync(VRChat.API.Model.TwoFactorAuthCode,System.Threading.CancellationToken)">
            <summary>
            Verify 2FA code
            </summary>
            <remarks>
            Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.Verify2FAWithHttpInfoAsync(VRChat.API.Model.TwoFactorAuthCode,System.Threading.CancellationToken)">
            <summary>
            Verify 2FA code
            </summary>
            <remarks>
            Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Verify2FAResult)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.VerifyAuthTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Verify Auth Token
            </summary>
            <remarks>
            Verify whether the currently provided Auth Token is valid.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of VerifyAuthTokenResult</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.VerifyAuthTokenWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Verify Auth Token
            </summary>
            <remarks>
            Verify whether the currently provided Auth Token is valid.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (VerifyAuthTokenResult)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.VerifyRecoveryCodeAsync(VRChat.API.Model.TwoFactorAuthCode,System.Threading.CancellationToken)">
            <summary>
            Verify 2FA code with Recovery code
            </summary>
            <remarks>
            Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.IAuthenticationApiAsync.VerifyRecoveryCodeWithHttpInfoAsync(VRChat.API.Model.TwoFactorAuthCode,System.Threading.CancellationToken)">
            <summary>
            Verify 2FA code with Recovery code
            </summary>
            <remarks>
            Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Verify2FAResult)</returns>
        </member>
        <member name="T:VRChat.API.Api.IAuthenticationApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.AuthenticationApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.AuthenticationApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.AuthenticationApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.AuthenticationApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.AuthenticationApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.AuthenticationApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.AuthenticationApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.AuthenticationApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.AuthenticationApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.CheckUserExists(System.String,System.String,System.String,System.String)">
            <summary>
            Check User Exists Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="email">Filter by email. (optional)</param>
            <param name="displayName">Filter by displayName. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="excludeUserId">Exclude by UserID. (optional)</param>
            <returns>UserExists</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.CheckUserExistsWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Check User Exists Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="email">Filter by email. (optional)</param>
            <param name="displayName">Filter by displayName. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="excludeUserId">Exclude by UserID. (optional)</param>
            <returns>ApiResponse of UserExists</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.CheckUserExistsAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check User Exists Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="email">Filter by email. (optional)</param>
            <param name="displayName">Filter by displayName. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="excludeUserId">Exclude by UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UserExists</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.CheckUserExistsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check User Exists Checks if a user by a given &#x60;username&#x60;, &#x60;displayName&#x60; or &#x60;email&#x60; exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the &#x60;excludeUserId&#x60; is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** &#x60;username&#x60;, &#x60;displayName&#x60; **or** &#x60;email&#x60; query parameter. Although they can be combined - in addition with &#x60;excludeUserId&#x60; (generally to exclude yourself) - to further fine-tune the search.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="email">Filter by email. (optional)</param>
            <param name="displayName">Filter by displayName. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="excludeUserId">Exclude by UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UserExists)</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.DeleteUser(System.String)">
            <summary>
            Delete User Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.DeleteUserWithHttpInfo(System.String)">
            <summary>
            Delete User Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.DeleteUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete User Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.DeleteUserWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete User Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.GetCurrentUser">
            <summary>
            Login and/or Get Current User Info This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.GetCurrentUserWithHttpInfo">
            <summary>
            Login and/or Get Current User Info This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.GetCurrentUserAsync(System.Threading.CancellationToken)">
            <summary>
            Login and/or Get Current User Info This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.GetCurrentUserWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Login and/or Get Current User Info This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid &#x60;auth&#x60; cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the &#x60;Authorization&#x60; header and set the &#x60;auth&#x60; cookie. The &#x60;auth&#x60; cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the &#x60;auth&#x60; cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.Logout">
            <summary>
            Logout Invalidates the login session.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.LogoutWithHttpInfo">
            <summary>
            Logout Invalidates the login session.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.LogoutAsync(System.Threading.CancellationToken)">
            <summary>
            Logout Invalidates the login session.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.LogoutWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Logout Invalidates the login session.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.Verify2FA(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Verify 2FA code Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <returns>Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.Verify2FAWithHttpInfo(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Verify 2FA code Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <returns>ApiResponse of Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.Verify2FAAsync(VRChat.API.Model.TwoFactorAuthCode,System.Threading.CancellationToken)">
            <summary>
            Verify 2FA code Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.Verify2FAWithHttpInfoAsync(VRChat.API.Model.TwoFactorAuthCode,System.Threading.CancellationToken)">
            <summary>
            Verify 2FA code Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Verify2FAResult)</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.VerifyAuthToken">
            <summary>
            Verify Auth Token Verify whether the currently provided Auth Token is valid.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>VerifyAuthTokenResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.VerifyAuthTokenWithHttpInfo">
            <summary>
            Verify Auth Token Verify whether the currently provided Auth Token is valid.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of VerifyAuthTokenResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.VerifyAuthTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Verify Auth Token Verify whether the currently provided Auth Token is valid.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of VerifyAuthTokenResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.VerifyAuthTokenWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Verify Auth Token Verify whether the currently provided Auth Token is valid.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (VerifyAuthTokenResult)</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.VerifyRecoveryCode(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Verify 2FA code with Recovery code Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <returns>Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.VerifyRecoveryCodeWithHttpInfo(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Verify 2FA code with Recovery code Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <returns>ApiResponse of Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.VerifyRecoveryCodeAsync(VRChat.API.Model.TwoFactorAuthCode,System.Threading.CancellationToken)">
            <summary>
            Verify 2FA code with Recovery code Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Verify2FAResult</returns>
        </member>
        <member name="M:VRChat.API.Api.AuthenticationApi.VerifyRecoveryCodeWithHttpInfoAsync(VRChat.API.Model.TwoFactorAuthCode,System.Threading.CancellationToken)">
            <summary>
            Verify 2FA code with Recovery code Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="twoFactorAuthCode"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Verify2FAResult)</returns>
        </member>
        <member name="T:VRChat.API.Api.IAvatarsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.CreateAvatar(VRChat.API.Model.CreateAvatarRequest)">
            <summary>
            Create Avatar
            </summary>
            <remarks>
            Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createAvatarRequest"> (optional)</param>
            <returns>Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.CreateAvatarWithHttpInfo(VRChat.API.Model.CreateAvatarRequest)">
            <summary>
            Create Avatar
            </summary>
            <remarks>
            Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createAvatarRequest"> (optional)</param>
            <returns>ApiResponse of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.DeleteAvatar(System.String)">
            <summary>
            Delete Avatar
            </summary>
            <remarks>
            Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.DeleteAvatarWithHttpInfo(System.String)">
            <summary>
            Delete Avatar
            </summary>
            <remarks>
            Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>ApiResponse of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.GetAvatar(System.String)">
            <summary>
            Get Avatar
            </summary>
            <remarks>
            Get information about a specific Avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.GetAvatarWithHttpInfo(System.String)">
            <summary>
            Get Avatar
            </summary>
            <remarks>
            Get information about a specific Avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>ApiResponse of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.GetFavoritedAvatars(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Favorited Avatars
            </summary>
            <remarks>
            Search and list favorited avatars by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.GetFavoritedAvatarsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Favorited Avatars
            </summary>
            <remarks>
            Search and list favorited avatars by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>ApiResponse of List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.SearchAvatars(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search Avatars
            </summary>
            <remarks>
            Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own avatars. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.SearchAvatarsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search Avatars
            </summary>
            <remarks>
            Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own avatars. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>ApiResponse of List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.SelectAvatar(System.String)">
            <summary>
            Select Avatar
            </summary>
            <remarks>
            Switches into that avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.SelectAvatarWithHttpInfo(System.String)">
            <summary>
            Select Avatar
            </summary>
            <remarks>
            Switches into that avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.SelectFallbackAvatar(System.String)">
            <summary>
            Select Fallback Avatar
            </summary>
            <remarks>
            Switches into that avatar as your fallback avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.SelectFallbackAvatarWithHttpInfo(System.String)">
            <summary>
            Select Fallback Avatar
            </summary>
            <remarks>
            Switches into that avatar as your fallback avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.UpdateAvatar(System.String,VRChat.API.Model.UpdateAvatarRequest)">
            <summary>
            Update Avatar
            </summary>
            <remarks>
            Update information about a specific avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="updateAvatarRequest"> (optional)</param>
            <returns>Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiSync.UpdateAvatarWithHttpInfo(System.String,VRChat.API.Model.UpdateAvatarRequest)">
            <summary>
            Update Avatar
            </summary>
            <remarks>
            Update information about a specific avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="updateAvatarRequest"> (optional)</param>
            <returns>ApiResponse of Avatar</returns>
        </member>
        <member name="T:VRChat.API.Api.IAvatarsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.CreateAvatarAsync(VRChat.API.Model.CreateAvatarRequest,System.Threading.CancellationToken)">
            <summary>
            Create Avatar
            </summary>
            <remarks>
            Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createAvatarRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.CreateAvatarWithHttpInfoAsync(VRChat.API.Model.CreateAvatarRequest,System.Threading.CancellationToken)">
            <summary>
            Create Avatar
            </summary>
            <remarks>
            Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createAvatarRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Avatar)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.DeleteAvatarAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Avatar
            </summary>
            <remarks>
            Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.DeleteAvatarWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Avatar
            </summary>
            <remarks>
            Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Avatar)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.GetAvatarAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Avatar
            </summary>
            <remarks>
            Get information about a specific Avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.GetAvatarWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Avatar
            </summary>
            <remarks>
            Get information about a specific Avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Avatar)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.GetFavoritedAvatarsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorited Avatars
            </summary>
            <remarks>
            Search and list favorited avatars by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.GetFavoritedAvatarsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorited Avatars
            </summary>
            <remarks>
            Search and list favorited avatars by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Avatar&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.SearchAvatarsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search Avatars
            </summary>
            <remarks>
            Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own avatars. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.SearchAvatarsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search Avatars
            </summary>
            <remarks>
            Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own avatars. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Avatar&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.SelectAvatarAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Select Avatar
            </summary>
            <remarks>
            Switches into that avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.SelectAvatarWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Select Avatar
            </summary>
            <remarks>
            Switches into that avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.SelectFallbackAvatarAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Select Fallback Avatar
            </summary>
            <remarks>
            Switches into that avatar as your fallback avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.SelectFallbackAvatarWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Select Fallback Avatar
            </summary>
            <remarks>
            Switches into that avatar as your fallback avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.UpdateAvatarAsync(System.String,VRChat.API.Model.UpdateAvatarRequest,System.Threading.CancellationToken)">
            <summary>
            Update Avatar
            </summary>
            <remarks>
            Update information about a specific avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="updateAvatarRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.IAvatarsApiAsync.UpdateAvatarWithHttpInfoAsync(System.String,VRChat.API.Model.UpdateAvatarRequest,System.Threading.CancellationToken)">
            <summary>
            Update Avatar
            </summary>
            <remarks>
            Update information about a specific avatar.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="updateAvatarRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Avatar)</returns>
        </member>
        <member name="T:VRChat.API.Api.IAvatarsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.AvatarsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.AvatarsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.AvatarsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.AvatarsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.AvatarsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.AvatarsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.AvatarsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.AvatarsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.AvatarsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.CreateAvatar(VRChat.API.Model.CreateAvatarRequest)">
            <summary>
            Create Avatar Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createAvatarRequest"> (optional)</param>
            <returns>Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.CreateAvatarWithHttpInfo(VRChat.API.Model.CreateAvatarRequest)">
            <summary>
            Create Avatar Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createAvatarRequest"> (optional)</param>
            <returns>ApiResponse of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.CreateAvatarAsync(VRChat.API.Model.CreateAvatarRequest,System.Threading.CancellationToken)">
            <summary>
            Create Avatar Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createAvatarRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.CreateAvatarWithHttpInfoAsync(VRChat.API.Model.CreateAvatarRequest,System.Threading.CancellationToken)">
            <summary>
            Create Avatar Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createAvatarRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Avatar)</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.DeleteAvatar(System.String)">
            <summary>
            Delete Avatar Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.DeleteAvatarWithHttpInfo(System.String)">
            <summary>
            Delete Avatar Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>ApiResponse of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.DeleteAvatarAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Avatar Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.DeleteAvatarWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Avatar Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Avatar)</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetAvatar(System.String)">
            <summary>
            Get Avatar Get information about a specific Avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetAvatarWithHttpInfo(System.String)">
            <summary>
            Get Avatar Get information about a specific Avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>ApiResponse of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetAvatarAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Avatar Get information about a specific Avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetAvatarWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Avatar Get information about a specific Avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Avatar)</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetFavoritedAvatars(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Favorited Avatars Search and list favorited avatars by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetFavoritedAvatarsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Favorited Avatars Search and list favorited avatars by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>ApiResponse of List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetFavoritedAvatarsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorited Avatars Search and list favorited avatars by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.GetFavoritedAvatarsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorited Avatars Search and list favorited avatars by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Avatar&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SearchAvatars(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search Avatars Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own avatars. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SearchAvatarsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search Avatars Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own avatars. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>ApiResponse of List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SearchAvatarsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search Avatars Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own avatars. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Avatar&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SearchAvatarsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search Avatars Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own avatars. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Avatar&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SelectAvatar(System.String)">
            <summary>
            Select Avatar Switches into that avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SelectAvatarWithHttpInfo(System.String)">
            <summary>
            Select Avatar Switches into that avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SelectAvatarAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Select Avatar Switches into that avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SelectAvatarWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Select Avatar Switches into that avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SelectFallbackAvatar(System.String)">
            <summary>
            Select Fallback Avatar Switches into that avatar as your fallback avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SelectFallbackAvatarWithHttpInfo(System.String)">
            <summary>
            Select Fallback Avatar Switches into that avatar as your fallback avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SelectFallbackAvatarAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Select Fallback Avatar Switches into that avatar as your fallback avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.SelectFallbackAvatarWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Select Fallback Avatar Switches into that avatar as your fallback avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.UpdateAvatar(System.String,VRChat.API.Model.UpdateAvatarRequest)">
            <summary>
            Update Avatar Update information about a specific avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="updateAvatarRequest"> (optional)</param>
            <returns>Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.UpdateAvatarWithHttpInfo(System.String,VRChat.API.Model.UpdateAvatarRequest)">
            <summary>
            Update Avatar Update information about a specific avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="updateAvatarRequest"> (optional)</param>
            <returns>ApiResponse of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.UpdateAvatarAsync(System.String,VRChat.API.Model.UpdateAvatarRequest,System.Threading.CancellationToken)">
            <summary>
            Update Avatar Update information about a specific avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="updateAvatarRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Avatar</returns>
        </member>
        <member name="M:VRChat.API.Api.AvatarsApi.UpdateAvatarWithHttpInfoAsync(System.String,VRChat.API.Model.UpdateAvatarRequest,System.Threading.CancellationToken)">
            <summary>
            Update Avatar Update information about a specific avatar.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="avatarId"></param>
            <param name="updateAvatarRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Avatar)</returns>
        </member>
        <member name="T:VRChat.API.Api.IEconomyApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetCurrentSubscriptions">
            <summary>
            Get Current Subscriptions
            </summary>
            <remarks>
            Get a list of all current user subscriptions.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;UserSubscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetCurrentSubscriptionsWithHttpInfo">
            <summary>
            Get Current Subscriptions
            </summary>
            <remarks>
            Get a list of all current user subscriptions.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;UserSubscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetLicenseGroup(System.String)">
            <summary>
            Get License Group
            </summary>
            <remarks>
            Get a single License Group by given ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="licenseGroupId"></param>
            <returns>LicenseGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetLicenseGroupWithHttpInfo(System.String)">
            <summary>
            Get License Group
            </summary>
            <remarks>
            Get a single License Group by given ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="licenseGroupId"></param>
            <returns>ApiResponse of LicenseGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetSteamTransaction(System.String)">
            <summary>
            Get Steam Transaction
            </summary>
            <remarks>
            Get a single Steam transactions by ID. This returns the exact same information as &#x60;getSteamTransactions&#x60;, so no point in using this endpoint.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId"></param>
            <returns>Transaction</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetSteamTransactionWithHttpInfo(System.String)">
            <summary>
            Get Steam Transaction
            </summary>
            <remarks>
            Get a single Steam transactions by ID. This returns the exact same information as &#x60;getSteamTransactions&#x60;, so no point in using this endpoint.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId"></param>
            <returns>ApiResponse of Transaction</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetSteamTransactions">
            <summary>
            List Steam Transactions
            </summary>
            <remarks>
            Get all own Steam transactions.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;Transaction&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetSteamTransactionsWithHttpInfo">
            <summary>
            List Steam Transactions
            </summary>
            <remarks>
            Get all own Steam transactions.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;Transaction&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetSubscriptions">
            <summary>
            List Subscriptions
            </summary>
            <remarks>
            List all existing Subscriptions. For example, \&quot;vrchatplus-monthly\&quot; and \&quot;vrchatplus-yearly\&quot;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;Subscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiSync.GetSubscriptionsWithHttpInfo">
            <summary>
            List Subscriptions
            </summary>
            <remarks>
            List all existing Subscriptions. For example, \&quot;vrchatplus-monthly\&quot; and \&quot;vrchatplus-yearly\&quot;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;Subscription&gt;</returns>
        </member>
        <member name="T:VRChat.API.Api.IEconomyApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetCurrentSubscriptionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Current Subscriptions
            </summary>
            <remarks>
            Get a list of all current user subscriptions.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;UserSubscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetCurrentSubscriptionsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get Current Subscriptions
            </summary>
            <remarks>
            Get a list of all current user subscriptions.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;UserSubscription&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetLicenseGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get License Group
            </summary>
            <remarks>
            Get a single License Group by given ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="licenseGroupId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of LicenseGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetLicenseGroupWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get License Group
            </summary>
            <remarks>
            Get a single License Group by given ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="licenseGroupId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (LicenseGroup)</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetSteamTransactionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Steam Transaction
            </summary>
            <remarks>
            Get a single Steam transactions by ID. This returns the exact same information as &#x60;getSteamTransactions&#x60;, so no point in using this endpoint.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Transaction</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetSteamTransactionWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Steam Transaction
            </summary>
            <remarks>
            Get a single Steam transactions by ID. This returns the exact same information as &#x60;getSteamTransactions&#x60;, so no point in using this endpoint.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Transaction)</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetSteamTransactionsAsync(System.Threading.CancellationToken)">
            <summary>
            List Steam Transactions
            </summary>
            <remarks>
            Get all own Steam transactions.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Transaction&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetSteamTransactionsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            List Steam Transactions
            </summary>
            <remarks>
            Get all own Steam transactions.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Transaction&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetSubscriptionsAsync(System.Threading.CancellationToken)">
            <summary>
            List Subscriptions
            </summary>
            <remarks>
            List all existing Subscriptions. For example, \&quot;vrchatplus-monthly\&quot; and \&quot;vrchatplus-yearly\&quot;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Subscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IEconomyApiAsync.GetSubscriptionsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            List Subscriptions
            </summary>
            <remarks>
            List all existing Subscriptions. For example, \&quot;vrchatplus-monthly\&quot; and \&quot;vrchatplus-yearly\&quot;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Subscription&gt;)</returns>
        </member>
        <member name="T:VRChat.API.Api.IEconomyApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.EconomyApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.EconomyApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.EconomyApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.EconomyApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.EconomyApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.EconomyApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.EconomyApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.EconomyApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.EconomyApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetCurrentSubscriptions">
            <summary>
            Get Current Subscriptions Get a list of all current user subscriptions.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;UserSubscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetCurrentSubscriptionsWithHttpInfo">
            <summary>
            Get Current Subscriptions Get a list of all current user subscriptions.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;UserSubscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetCurrentSubscriptionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Current Subscriptions Get a list of all current user subscriptions.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;UserSubscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetCurrentSubscriptionsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get Current Subscriptions Get a list of all current user subscriptions.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;UserSubscription&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetLicenseGroup(System.String)">
            <summary>
            Get License Group Get a single License Group by given ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="licenseGroupId"></param>
            <returns>LicenseGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetLicenseGroupWithHttpInfo(System.String)">
            <summary>
            Get License Group Get a single License Group by given ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="licenseGroupId"></param>
            <returns>ApiResponse of LicenseGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetLicenseGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get License Group Get a single License Group by given ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="licenseGroupId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of LicenseGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetLicenseGroupWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get License Group Get a single License Group by given ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="licenseGroupId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (LicenseGroup)</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSteamTransaction(System.String)">
            <summary>
            Get Steam Transaction Get a single Steam transactions by ID. This returns the exact same information as &#x60;getSteamTransactions&#x60;, so no point in using this endpoint.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId"></param>
            <returns>Transaction</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSteamTransactionWithHttpInfo(System.String)">
            <summary>
            Get Steam Transaction Get a single Steam transactions by ID. This returns the exact same information as &#x60;getSteamTransactions&#x60;, so no point in using this endpoint.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId"></param>
            <returns>ApiResponse of Transaction</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSteamTransactionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Steam Transaction Get a single Steam transactions by ID. This returns the exact same information as &#x60;getSteamTransactions&#x60;, so no point in using this endpoint.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Transaction</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSteamTransactionWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Steam Transaction Get a single Steam transactions by ID. This returns the exact same information as &#x60;getSteamTransactions&#x60;, so no point in using this endpoint.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Transaction)</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSteamTransactions">
            <summary>
            List Steam Transactions Get all own Steam transactions.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;Transaction&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSteamTransactionsWithHttpInfo">
            <summary>
            List Steam Transactions Get all own Steam transactions.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;Transaction&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSteamTransactionsAsync(System.Threading.CancellationToken)">
            <summary>
            List Steam Transactions Get all own Steam transactions.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Transaction&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSteamTransactionsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            List Steam Transactions Get all own Steam transactions.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Transaction&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSubscriptions">
            <summary>
            List Subscriptions List all existing Subscriptions. For example, \&quot;vrchatplus-monthly\&quot; and \&quot;vrchatplus-yearly\&quot;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;Subscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSubscriptionsWithHttpInfo">
            <summary>
            List Subscriptions List all existing Subscriptions. For example, \&quot;vrchatplus-monthly\&quot; and \&quot;vrchatplus-yearly\&quot;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;Subscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSubscriptionsAsync(System.Threading.CancellationToken)">
            <summary>
            List Subscriptions List all existing Subscriptions. For example, \&quot;vrchatplus-monthly\&quot; and \&quot;vrchatplus-yearly\&quot;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Subscription&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.EconomyApi.GetSubscriptionsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            List Subscriptions List all existing Subscriptions. For example, \&quot;vrchatplus-monthly\&quot; and \&quot;vrchatplus-yearly\&quot;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Subscription&gt;)</returns>
        </member>
        <member name="T:VRChat.API.Api.IFavoritesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.AddFavorite(VRChat.API.Model.AddFavoriteRequest)">
            <summary>
            Add Favorite
            </summary>
            <remarks>
            Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="addFavoriteRequest"> (optional)</param>
            <returns>Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.AddFavoriteWithHttpInfo(VRChat.API.Model.AddFavoriteRequest)">
            <summary>
            Add Favorite
            </summary>
            <remarks>
            Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="addFavoriteRequest"> (optional)</param>
            <returns>ApiResponse of Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.ClearFavoriteGroup(System.String,System.String,System.String)">
            <summary>
            Clear Favorite Group
            </summary>
            <remarks>
            Clear ALL contents of a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.ClearFavoriteGroupWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Clear Favorite Group
            </summary>
            <remarks>
            Clear ALL contents of a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.GetFavorite(System.String)">
            <summary>
            Show Favorite
            </summary>
            <remarks>
            Return information about a specific Favorite.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <returns>Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.GetFavoriteWithHttpInfo(System.String)">
            <summary>
            Show Favorite
            </summary>
            <remarks>
            Return information about a specific Favorite.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <returns>ApiResponse of Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.GetFavoriteGroup(System.String,System.String,System.String)">
            <summary>
            Show Favorite Group
            </summary>
            <remarks>
            Fetch information about a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <returns>FavoriteGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.GetFavoriteGroupWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Show Favorite Group
            </summary>
            <remarks>
            Fetch information about a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <returns>ApiResponse of FavoriteGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.GetFavoriteGroups(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            List Favorite Groups
            </summary>
            <remarks>
            Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
            <returns>List&lt;FavoriteGroup&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.GetFavoriteGroupsWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            List Favorite Groups
            </summary>
            <remarks>
            Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
            <returns>ApiResponse of List&lt;FavoriteGroup&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.GetFavorites(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            List Favorites
            </summary>
            <remarks>
            Returns a list of favorites.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <returns>List&lt;Favorite&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.GetFavoritesWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            List Favorites
            </summary>
            <remarks>
            Returns a list of favorites.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <returns>ApiResponse of List&lt;Favorite&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.RemoveFavorite(System.String)">
            <summary>
            Remove Favorite
            </summary>
            <remarks>
            Remove a favorite from your favorites list.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.RemoveFavoriteWithHttpInfo(System.String)">
            <summary>
            Remove Favorite
            </summary>
            <remarks>
            Remove a favorite from your favorites list.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.UpdateFavoriteGroup(System.String,System.String,System.String,VRChat.API.Model.UpdateFavoriteGroupRequest)">
            <summary>
            Update Favorite Group
            </summary>
            <remarks>
            Update information about a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="updateFavoriteGroupRequest"> (optional)</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiSync.UpdateFavoriteGroupWithHttpInfo(System.String,System.String,System.String,VRChat.API.Model.UpdateFavoriteGroupRequest)">
            <summary>
            Update Favorite Group
            </summary>
            <remarks>
            Update information about a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="updateFavoriteGroupRequest"> (optional)</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="T:VRChat.API.Api.IFavoritesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.AddFavoriteAsync(VRChat.API.Model.AddFavoriteRequest,System.Threading.CancellationToken)">
            <summary>
            Add Favorite
            </summary>
            <remarks>
            Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="addFavoriteRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.AddFavoriteWithHttpInfoAsync(VRChat.API.Model.AddFavoriteRequest,System.Threading.CancellationToken)">
            <summary>
            Add Favorite
            </summary>
            <remarks>
            Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="addFavoriteRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Favorite)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.ClearFavoriteGroupAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Clear Favorite Group
            </summary>
            <remarks>
            Clear ALL contents of a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.ClearFavoriteGroupWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Clear Favorite Group
            </summary>
            <remarks>
            Clear ALL contents of a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.GetFavoriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show Favorite
            </summary>
            <remarks>
            Return information about a specific Favorite.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.GetFavoriteWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show Favorite
            </summary>
            <remarks>
            Return information about a specific Favorite.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Favorite)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.GetFavoriteGroupAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show Favorite Group
            </summary>
            <remarks>
            Fetch information about a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of FavoriteGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.GetFavoriteGroupWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show Favorite Group
            </summary>
            <remarks>
            Fetch information about a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (FavoriteGroup)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.GetFavoriteGroupsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorite Groups
            </summary>
            <remarks>
            Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;FavoriteGroup&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.GetFavoriteGroupsWithHttpInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorite Groups
            </summary>
            <remarks>
            Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;FavoriteGroup&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.GetFavoritesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorites
            </summary>
            <remarks>
            Returns a list of favorites.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Favorite&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.GetFavoritesWithHttpInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorites
            </summary>
            <remarks>
            Returns a list of favorites.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Favorite&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.RemoveFavoriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Remove Favorite
            </summary>
            <remarks>
            Remove a favorite from your favorites list.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.RemoveFavoriteWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Remove Favorite
            </summary>
            <remarks>
            Remove a favorite from your favorites list.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.UpdateFavoriteGroupAsync(System.String,System.String,System.String,VRChat.API.Model.UpdateFavoriteGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Update Favorite Group
            </summary>
            <remarks>
            Update information about a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="updateFavoriteGroupRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.IFavoritesApiAsync.UpdateFavoriteGroupWithHttpInfoAsync(System.String,System.String,System.String,VRChat.API.Model.UpdateFavoriteGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Update Favorite Group
            </summary>
            <remarks>
            Update information about a specific favorite group.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="updateFavoriteGroupRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="T:VRChat.API.Api.IFavoritesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.FavoritesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FavoritesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FavoritesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FavoritesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FavoritesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.FavoritesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.FavoritesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.FavoritesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.FavoritesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.AddFavorite(VRChat.API.Model.AddFavoriteRequest)">
            <summary>
            Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="addFavoriteRequest"> (optional)</param>
            <returns>Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.AddFavoriteWithHttpInfo(VRChat.API.Model.AddFavoriteRequest)">
            <summary>
            Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="addFavoriteRequest"> (optional)</param>
            <returns>ApiResponse of Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.AddFavoriteAsync(VRChat.API.Model.AddFavoriteRequest,System.Threading.CancellationToken)">
            <summary>
            Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="addFavoriteRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.AddFavoriteWithHttpInfoAsync(VRChat.API.Model.AddFavoriteRequest,System.Threading.CancellationToken)">
            <summary>
            Add Favorite Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="addFavoriteRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Favorite)</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.ClearFavoriteGroup(System.String,System.String,System.String)">
            <summary>
            Clear Favorite Group Clear ALL contents of a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.ClearFavoriteGroupWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Clear Favorite Group Clear ALL contents of a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.ClearFavoriteGroupAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Clear Favorite Group Clear ALL contents of a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.ClearFavoriteGroupWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Clear Favorite Group Clear ALL contents of a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavorite(System.String)">
            <summary>
            Show Favorite Return information about a specific Favorite.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <returns>Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteWithHttpInfo(System.String)">
            <summary>
            Show Favorite Return information about a specific Favorite.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <returns>ApiResponse of Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show Favorite Return information about a specific Favorite.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Favorite</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show Favorite Return information about a specific Favorite.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Favorite)</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteGroup(System.String,System.String,System.String)">
            <summary>
            Show Favorite Group Fetch information about a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <returns>FavoriteGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteGroupWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Show Favorite Group Fetch information about a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <returns>ApiResponse of FavoriteGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteGroupAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show Favorite Group Fetch information about a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of FavoriteGroup</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteGroupWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show Favorite Group Fetch information about a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (FavoriteGroup)</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteGroups(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
            <returns>List&lt;FavoriteGroup&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteGroupsWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
            <returns>ApiResponse of List&lt;FavoriteGroup&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteGroupsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;FavoriteGroup&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoriteGroupsWithHttpInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorite Groups Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="ownerId">The owner of whoms favorite groups to return. Must be a UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;FavoriteGroup&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavorites(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            List Favorites Returns a list of favorites.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <returns>List&lt;Favorite&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoritesWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            List Favorites Returns a list of favorites.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <returns>ApiResponse of List&lt;Favorite&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoritesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorites Returns a list of favorites.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Favorite&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.GetFavoritesWithHttpInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorites Returns a list of favorites.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="type">The type of favorites to return, FavoriteType. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Favorite&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.RemoveFavorite(System.String)">
            <summary>
            Remove Favorite Remove a favorite from your favorites list.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.RemoveFavoriteWithHttpInfo(System.String)">
            <summary>
            Remove Favorite Remove a favorite from your favorites list.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.RemoveFavoriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Remove Favorite Remove a favorite from your favorites list.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.RemoveFavoriteWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Remove Favorite Remove a favorite from your favorites list.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.UpdateFavoriteGroup(System.String,System.String,System.String,VRChat.API.Model.UpdateFavoriteGroupRequest)">
            <summary>
            Update Favorite Group Update information about a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="updateFavoriteGroupRequest"> (optional)</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.UpdateFavoriteGroupWithHttpInfo(System.String,System.String,System.String,VRChat.API.Model.UpdateFavoriteGroupRequest)">
            <summary>
            Update Favorite Group Update information about a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="updateFavoriteGroupRequest"> (optional)</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.UpdateFavoriteGroupAsync(System.String,System.String,System.String,VRChat.API.Model.UpdateFavoriteGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Update Favorite Group Update information about a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="updateFavoriteGroupRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.FavoritesApi.UpdateFavoriteGroupWithHttpInfoAsync(System.String,System.String,System.String,VRChat.API.Model.UpdateFavoriteGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Update Favorite Group Update information about a specific favorite group.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="favoriteGroupType">The type of group to fetch, must be a valid FavoriteType.</param>
            <param name="favoriteGroupName"></param>
            <param name="userId"></param>
            <param name="updateFavoriteGroupRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="T:VRChat.API.Api.IFilesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.CreateFile(VRChat.API.Model.CreateFileRequest)">
            <summary>
            Create File
            </summary>
            <remarks>
            Creates a new File object
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createFileRequest"> (optional)</param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.CreateFileWithHttpInfo(VRChat.API.Model.CreateFileRequest)">
            <summary>
            Create File
            </summary>
            <remarks>
            Creates a new File object
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createFileRequest"> (optional)</param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.CreateFileVersion(System.String,VRChat.API.Model.CreateFileVersionRequest)">
            <summary>
            Create File Version
            </summary>
            <remarks>
            Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="createFileVersionRequest"> (optional)</param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.CreateFileVersionWithHttpInfo(System.String,VRChat.API.Model.CreateFileVersionRequest)">
            <summary>
            Create File Version
            </summary>
            <remarks>
            Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="createFileVersionRequest"> (optional)</param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.DeleteFile(System.String)">
            <summary>
            Delete File
            </summary>
            <remarks>
            Deletes a File object.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.DeleteFileWithHttpInfo(System.String)">
            <summary>
            Delete File
            </summary>
            <remarks>
            Deletes a File object.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.DeleteFileVersion(System.String,System.Int32)">
            <summary>
            Delete File Version
            </summary>
            <remarks>
            Delete a specific version of a file. You can only delete the latest version.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.DeleteFileVersionWithHttpInfo(System.String,System.Int32)">
            <summary>
            Delete File Version
            </summary>
            <remarks>
            Delete a specific version of a file. You can only delete the latest version.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.DownloadFileVersion(System.String,System.Int32)">
            <summary>
            Download File Version
            </summary>
            <remarks>
            Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.DownloadFileVersionWithHttpInfo(System.String,System.Int32)">
            <summary>
            Download File Version
            </summary>
            <remarks>
            Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.FinishFileDataUpload(System.String,System.Int32,System.String,VRChat.API.Model.FinishFileDataUploadRequest)">
            <summary>
            Finish FileData Upload
            </summary>
            <remarks>
            Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.FinishFileDataUploadWithHttpInfo(System.String,System.Int32,System.String,VRChat.API.Model.FinishFileDataUploadRequest)">
            <summary>
            Finish FileData Upload
            </summary>
            <remarks>
            Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.GetFile(System.String)">
            <summary>
            Show File
            </summary>
            <remarks>
            Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.GetFileWithHttpInfo(System.String)">
            <summary>
            Show File
            </summary>
            <remarks>
            Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.GetFileDataUploadStatus(System.String,System.Int32,System.String)">
            <summary>
            Check FileData Upload Status
            </summary>
            <remarks>
            Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <returns>FileVersionUploadStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.GetFileDataUploadStatusWithHttpInfo(System.String,System.Int32,System.String)">
            <summary>
            Check FileData Upload Status
            </summary>
            <remarks>
            Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <returns>ApiResponse of FileVersionUploadStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.GetFiles(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            List Files
            </summary>
            <remarks>
            Returns a list of files
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
            <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>List&lt;File&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.GetFilesWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            List Files
            </summary>
            <remarks>
            Returns a list of files
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
            <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>ApiResponse of List&lt;File&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.StartFileDataUpload(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Start FileData Upload
            </summary>
            <remarks>
            Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="partNumber"> (optional)</param>
            <returns>FileUploadURL</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiSync.StartFileDataUploadWithHttpInfo(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Start FileData Upload
            </summary>
            <remarks>
            Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="partNumber"> (optional)</param>
            <returns>ApiResponse of FileUploadURL</returns>
        </member>
        <member name="T:VRChat.API.Api.IFilesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.CreateFileAsync(VRChat.API.Model.CreateFileRequest,System.Threading.CancellationToken)">
            <summary>
            Create File
            </summary>
            <remarks>
            Creates a new File object
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createFileRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.CreateFileWithHttpInfoAsync(VRChat.API.Model.CreateFileRequest,System.Threading.CancellationToken)">
            <summary>
            Create File
            </summary>
            <remarks>
            Creates a new File object
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createFileRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.CreateFileVersionAsync(System.String,VRChat.API.Model.CreateFileVersionRequest,System.Threading.CancellationToken)">
            <summary>
            Create File Version
            </summary>
            <remarks>
            Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="createFileVersionRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.CreateFileVersionWithHttpInfoAsync(System.String,VRChat.API.Model.CreateFileVersionRequest,System.Threading.CancellationToken)">
            <summary>
            Create File Version
            </summary>
            <remarks>
            Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="createFileVersionRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.DeleteFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete File
            </summary>
            <remarks>
            Deletes a File object.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.DeleteFileWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete File
            </summary>
            <remarks>
            Deletes a File object.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.DeleteFileVersionAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete File Version
            </summary>
            <remarks>
            Delete a specific version of a file. You can only delete the latest version.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.DeleteFileVersionWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete File Version
            </summary>
            <remarks>
            Delete a specific version of a file. You can only delete the latest version.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.DownloadFileVersionAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Download File Version
            </summary>
            <remarks>
            Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.DownloadFileVersionWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Download File Version
            </summary>
            <remarks>
            Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.FinishFileDataUploadAsync(System.String,System.Int32,System.String,VRChat.API.Model.FinishFileDataUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Finish FileData Upload
            </summary>
            <remarks>
            Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.FinishFileDataUploadWithHttpInfoAsync(System.String,System.Int32,System.String,VRChat.API.Model.FinishFileDataUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Finish FileData Upload
            </summary>
            <remarks>
            Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.GetFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show File
            </summary>
            <remarks>
            Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.GetFileWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show File
            </summary>
            <remarks>
            Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.GetFileDataUploadStatusAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Check FileData Upload Status
            </summary>
            <remarks>
            Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of FileVersionUploadStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.GetFileDataUploadStatusWithHttpInfoAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Check FileData Upload Status
            </summary>
            <remarks>
            Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (FileVersionUploadStatus)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.GetFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List Files
            </summary>
            <remarks>
            Returns a list of files
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
            <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;File&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.GetFilesWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List Files
            </summary>
            <remarks>
            Returns a list of files
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
            <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.StartFileDataUploadAsync(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Start FileData Upload
            </summary>
            <remarks>
            Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="partNumber"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of FileUploadURL</returns>
        </member>
        <member name="M:VRChat.API.Api.IFilesApiAsync.StartFileDataUploadWithHttpInfoAsync(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Start FileData Upload
            </summary>
            <remarks>
            Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="partNumber"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (FileUploadURL)</returns>
        </member>
        <member name="T:VRChat.API.Api.IFilesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.FilesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FilesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FilesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FilesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FilesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.FilesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.FilesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.FilesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.FilesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.CreateFile(VRChat.API.Model.CreateFileRequest)">
            <summary>
            Create File Creates a new File object
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createFileRequest"> (optional)</param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.CreateFileWithHttpInfo(VRChat.API.Model.CreateFileRequest)">
            <summary>
            Create File Creates a new File object
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createFileRequest"> (optional)</param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.CreateFileAsync(VRChat.API.Model.CreateFileRequest,System.Threading.CancellationToken)">
            <summary>
            Create File Creates a new File object
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createFileRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.CreateFileWithHttpInfoAsync(VRChat.API.Model.CreateFileRequest,System.Threading.CancellationToken)">
            <summary>
            Create File Creates a new File object
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createFileRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.CreateFileVersion(System.String,VRChat.API.Model.CreateFileVersionRequest)">
            <summary>
            Create File Version Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="createFileVersionRequest"> (optional)</param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.CreateFileVersionWithHttpInfo(System.String,VRChat.API.Model.CreateFileVersionRequest)">
            <summary>
            Create File Version Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="createFileVersionRequest"> (optional)</param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.CreateFileVersionAsync(System.String,VRChat.API.Model.CreateFileVersionRequest,System.Threading.CancellationToken)">
            <summary>
            Create File Version Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="createFileVersionRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.CreateFileVersionWithHttpInfoAsync(System.String,VRChat.API.Model.CreateFileVersionRequest,System.Threading.CancellationToken)">
            <summary>
            Create File Version Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="createFileVersionRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DeleteFile(System.String)">
            <summary>
            Delete File Deletes a File object.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DeleteFileWithHttpInfo(System.String)">
            <summary>
            Delete File Deletes a File object.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DeleteFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete File Deletes a File object.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DeleteFileWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete File Deletes a File object.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DeleteFileVersion(System.String,System.Int32)">
            <summary>
            Delete File Version Delete a specific version of a file. You can only delete the latest version.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DeleteFileVersionWithHttpInfo(System.String,System.Int32)">
            <summary>
            Delete File Version Delete a specific version of a file. You can only delete the latest version.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DeleteFileVersionAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete File Version Delete a specific version of a file. You can only delete the latest version.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DeleteFileVersionWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete File Version Delete a specific version of a file. You can only delete the latest version.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DownloadFileVersion(System.String,System.Int32)">
            <summary>
            Download File Version Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DownloadFileVersionWithHttpInfo(System.String,System.Int32)">
            <summary>
            Download File Version Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DownloadFileVersionAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Download File Version Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.DownloadFileVersionWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Download File Version Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.FinishFileDataUpload(System.String,System.Int32,System.String,VRChat.API.Model.FinishFileDataUploadRequest)">
            <summary>
            Finish FileData Upload Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.FinishFileDataUploadWithHttpInfo(System.String,System.Int32,System.String,VRChat.API.Model.FinishFileDataUploadRequest)">
            <summary>
            Finish FileData Upload Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.FinishFileDataUploadAsync(System.String,System.Int32,System.String,VRChat.API.Model.FinishFileDataUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Finish FileData Upload Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.FinishFileDataUploadWithHttpInfoAsync(System.String,System.Int32,System.String,VRChat.API.Model.FinishFileDataUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Finish FileData Upload Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="finishFileDataUploadRequest">Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFile(System.String)">
            <summary>
            Show File Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <returns>File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFileWithHttpInfo(System.String)">
            <summary>
            Show File Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <returns>ApiResponse of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show File Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of File</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFileWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show File Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (File)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFileDataUploadStatus(System.String,System.Int32,System.String)">
            <summary>
            Check FileData Upload Status Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <returns>FileVersionUploadStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFileDataUploadStatusWithHttpInfo(System.String,System.Int32,System.String)">
            <summary>
            Check FileData Upload Status Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <returns>ApiResponse of FileVersionUploadStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFileDataUploadStatusAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Check FileData Upload Status Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of FileVersionUploadStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFileDataUploadStatusWithHttpInfoAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Check FileData Upload Status Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (FileVersionUploadStatus)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFiles(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            List Files Returns a list of files
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
            <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>List&lt;File&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFilesWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            List Files Returns a list of files
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
            <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>ApiResponse of List&lt;File&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List Files Returns a list of files
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
            <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;File&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.GetFilesWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List Files Returns a list of files
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="tag">Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)</param>
            <param name="userId">UserID, will always generate a 500 permission error. (optional) (deprecated)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.StartFileDataUpload(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Start FileData Upload Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="partNumber"> (optional)</param>
            <returns>FileUploadURL</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.StartFileDataUploadWithHttpInfo(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Start FileData Upload Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="partNumber"> (optional)</param>
            <returns>ApiResponse of FileUploadURL</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.StartFileDataUploadAsync(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Start FileData Upload Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="partNumber"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of FileUploadURL</returns>
        </member>
        <member name="M:VRChat.API.Api.FilesApi.StartFileDataUploadWithHttpInfoAsync(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Start FileData Upload Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="fileId"></param>
            <param name="versionId"></param>
            <param name="fileType"></param>
            <param name="partNumber"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (FileUploadURL)</returns>
        </member>
        <member name="T:VRChat.API.Api.IFriendsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.DeleteFriendRequest(System.String)">
            <summary>
            Delete Friend Request
            </summary>
            <remarks>
            Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.DeleteFriendRequestWithHttpInfo(System.String)">
            <summary>
            Delete Friend Request
            </summary>
            <remarks>
            Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.Friend(System.String)">
            <summary>
            Send Friend Request
            </summary>
            <remarks>
            Send a friend request to another user.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.FriendWithHttpInfo(System.String)">
            <summary>
            Send Friend Request
            </summary>
            <remarks>
            Send a friend request to another user.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.GetFriendStatus(System.String)">
            <summary>
            Check Friend Status
            </summary>
            <remarks>
            Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>FriendStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.GetFriendStatusWithHttpInfo(System.String)">
            <summary>
            Check Friend Status
            </summary>
            <remarks>
            Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of FriendStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.GetFriends(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            List Friends
            </summary>
            <remarks>
            List information about friends.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
            <returns>List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.GetFriendsWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            List Friends
            </summary>
            <remarks>
            List information about friends.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
            <returns>ApiResponse of List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.Unfriend(System.String)">
            <summary>
            Unfriend
            </summary>
            <remarks>
            Unfriend a user by ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiSync.UnfriendWithHttpInfo(System.String)">
            <summary>
            Unfriend
            </summary>
            <remarks>
            Unfriend a user by ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="T:VRChat.API.Api.IFriendsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.DeleteFriendRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Friend Request
            </summary>
            <remarks>
            Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.DeleteFriendRequestWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Friend Request
            </summary>
            <remarks>
            Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.FriendAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send Friend Request
            </summary>
            <remarks>
            Send a friend request to another user.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.FriendWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send Friend Request
            </summary>
            <remarks>
            Send a friend request to another user.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.GetFriendStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check Friend Status
            </summary>
            <remarks>
            Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of FriendStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.GetFriendStatusWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check Friend Status
            </summary>
            <remarks>
            Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (FriendStatus)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.GetFriendsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            List Friends
            </summary>
            <remarks>
            List information about friends.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.GetFriendsWithHttpInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            List Friends
            </summary>
            <remarks>
            List information about friends.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedUser&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.UnfriendAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unfriend
            </summary>
            <remarks>
            Unfriend a user by ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IFriendsApiAsync.UnfriendWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unfriend
            </summary>
            <remarks>
            Unfriend a user by ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="T:VRChat.API.Api.IFriendsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.FriendsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FriendsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FriendsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FriendsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.FriendsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.FriendsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.FriendsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.FriendsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.FriendsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.DeleteFriendRequest(System.String)">
            <summary>
            Delete Friend Request Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.DeleteFriendRequestWithHttpInfo(System.String)">
            <summary>
            Delete Friend Request Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.DeleteFriendRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Friend Request Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.DeleteFriendRequestWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Friend Request Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the &#x60;deleteNotification&#x60; endpoint instead.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.Friend(System.String)">
            <summary>
            Send Friend Request Send a friend request to another user.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.FriendWithHttpInfo(System.String)">
            <summary>
            Send Friend Request Send a friend request to another user.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.FriendAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send Friend Request Send a friend request to another user.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.FriendWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send Friend Request Send a friend request to another user.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetFriendStatus(System.String)">
            <summary>
            Check Friend Status Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>FriendStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetFriendStatusWithHttpInfo(System.String)">
            <summary>
            Check Friend Status Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of FriendStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetFriendStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check Friend Status Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of FriendStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetFriendStatusWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check Friend Status Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming &#x60;Notification&#x60; of type &#x60;friendRequest&#x60;, and then accepting that notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (FriendStatus)</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetFriends(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            List Friends List information about friends.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
            <returns>List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetFriendsWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            List Friends List information about friends.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
            <returns>ApiResponse of List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetFriendsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            List Friends List information about friends.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.GetFriendsWithHttpInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            List Friends List information about friends.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offline">Returns *only* offline users if true, returns only online and active users if false (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedUser&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.Unfriend(System.String)">
            <summary>
            Unfriend Unfriend a user by ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.UnfriendWithHttpInfo(System.String)">
            <summary>
            Unfriend Unfriend a user by ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.UnfriendAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unfriend Unfriend a user by ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.FriendsApi.UnfriendWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unfriend Unfriend a user by ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="T:VRChat.API.Api.IInstancesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiSync.GetInstance(System.String,System.String)">
            <summary>
            Get Instance
            </summary>
            <remarks>
            Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiSync.GetInstanceWithHttpInfo(System.String,System.String)">
            <summary>
            Get Instance
            </summary>
            <remarks>
            Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>ApiResponse of Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiSync.GetShortName(System.String,System.String)">
            <summary>
            Get Instance Short Name
            </summary>
            <remarks>
            Returns an instance short name.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>string</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiSync.GetShortNameWithHttpInfo(System.String,System.String)">
            <summary>
            Get Instance Short Name
            </summary>
            <remarks>
            Returns an instance short name.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>ApiResponse of string</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiSync.SendSelfInvite(System.String,System.String)">
            <summary>
            Send Self Invite
            </summary>
            <remarks>
            Sends an invite to the instance to yourself.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiSync.SendSelfInviteWithHttpInfo(System.String,System.String)">
            <summary>
            Send Self Invite
            </summary>
            <remarks>
            Sends an invite to the instance to yourself.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="T:VRChat.API.Api.IInstancesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiAsync.GetInstanceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Instance
            </summary>
            <remarks>
            Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiAsync.GetInstanceWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Instance
            </summary>
            <remarks>
            Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Instance)</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiAsync.GetShortNameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Instance Short Name
            </summary>
            <remarks>
            Returns an instance short name.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of string</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiAsync.GetShortNameWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Instance Short Name
            </summary>
            <remarks>
            Returns an instance short name.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (string)</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiAsync.SendSelfInviteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Send Self Invite
            </summary>
            <remarks>
            Sends an invite to the instance to yourself.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IInstancesApiAsync.SendSelfInviteWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Send Self Invite
            </summary>
            <remarks>
            Sends an invite to the instance to yourself.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="T:VRChat.API.Api.IInstancesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.InstancesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.InstancesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.InstancesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.InstancesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.InstancesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.InstancesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.InstancesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.InstancesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.InstancesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetInstance(System.String,System.String)">
            <summary>
            Get Instance Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetInstanceWithHttpInfo(System.String,System.String)">
            <summary>
            Get Instance Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>ApiResponse of Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetInstanceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Instance Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetInstanceWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Instance Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \&quot;null\&quot;!
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Instance)</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetShortName(System.String,System.String)">
            <summary>
            Get Instance Short Name Returns an instance short name.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>string</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetShortNameWithHttpInfo(System.String,System.String)">
            <summary>
            Get Instance Short Name Returns an instance short name.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>ApiResponse of string</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetShortNameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Instance Short Name Returns an instance short name.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of string</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.GetShortNameWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Instance Short Name Returns an instance short name.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (string)</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.SendSelfInvite(System.String,System.String)">
            <summary>
            Send Self Invite Sends an invite to the instance to yourself.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.SendSelfInviteWithHttpInfo(System.String,System.String)">
            <summary>
            Send Self Invite Sends an invite to the instance to yourself.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.SendSelfInviteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Send Self Invite Sends an invite to the instance to yourself.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.InstancesApi.SendSelfInviteWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Send Self Invite Sends an invite to the instance to yourself.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="T:VRChat.API.Api.IInviteApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.GetInviteMessage(System.String,System.String,System.Int32)">
            <summary>
            Get Invite Message
            </summary>
            <remarks>
            Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <returns>InviteMessage</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.GetInviteMessageWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Get Invite Message
            </summary>
            <remarks>
            Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <returns>ApiResponse of InviteMessage</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.GetInviteMessages(System.String,System.String)">
            <summary>
            List Invite Messages
            </summary>
            <remarks>
            Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <returns>List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.GetInviteMessagesWithHttpInfo(System.String,System.String)">
            <summary>
            List Invite Messages
            </summary>
            <remarks>
            Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.InviteUser(System.String,VRChat.API.Model.InviteRequest)">
            <summary>
            Invite User
            </summary>
            <remarks>
            Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user. (optional)</param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.InviteUserWithHttpInfo(System.String,VRChat.API.Model.InviteRequest)">
            <summary>
            Invite User
            </summary>
            <remarks>
            Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user. (optional)</param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.RequestInvite(System.String,VRChat.API.Model.RequestInviteRequest)">
            <summary>
            Request Invite
            </summary>
            <remarks>
            Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.RequestInviteWithHttpInfo(System.String,VRChat.API.Model.RequestInviteRequest)">
            <summary>
            Request Invite
            </summary>
            <remarks>
            Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.ResetInviteMessage(System.String,System.String,System.Int32)">
            <summary>
            Reset Invite Message
            </summary>
            <remarks>
            Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <returns>List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.ResetInviteMessageWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Reset Invite Message
            </summary>
            <remarks>
            Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.RespondInvite(System.String,VRChat.API.Model.InviteResponse)">
            <summary>
            Respond Invite
            </summary>
            <remarks>
            Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="inviteResponse">Slot number of the Response Message to use when responding to a user. (optional)</param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.RespondInviteWithHttpInfo(System.String,VRChat.API.Model.InviteResponse)">
            <summary>
            Respond Invite
            </summary>
            <remarks>
            Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="inviteResponse">Slot number of the Response Message to use when responding to a user. (optional)</param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.UpdateInviteMessage(System.String,System.String,System.Int32,VRChat.API.Model.UpdateInviteMessageRequest)">
            <summary>
            Update Invite Message
            </summary>
            <remarks>
            Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
            <returns>List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiSync.UpdateInviteMessageWithHttpInfo(System.String,System.String,System.Int32,VRChat.API.Model.UpdateInviteMessageRequest)">
            <summary>
            Update Invite Message
            </summary>
            <remarks>
            Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
            <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="T:VRChat.API.Api.IInviteApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.GetInviteMessageAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Invite Message
            </summary>
            <remarks>
            Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of InviteMessage</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.GetInviteMessageWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Invite Message
            </summary>
            <remarks>
            Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (InviteMessage)</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.GetInviteMessagesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Invite Messages
            </summary>
            <remarks>
            Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.GetInviteMessagesWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Invite Messages
            </summary>
            <remarks>
            Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.InviteUserAsync(System.String,VRChat.API.Model.InviteRequest,System.Threading.CancellationToken)">
            <summary>
            Invite User
            </summary>
            <remarks>
            Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.InviteUserWithHttpInfoAsync(System.String,VRChat.API.Model.InviteRequest,System.Threading.CancellationToken)">
            <summary>
            Invite User
            </summary>
            <remarks>
            Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.RequestInviteAsync(System.String,VRChat.API.Model.RequestInviteRequest,System.Threading.CancellationToken)">
            <summary>
            Request Invite
            </summary>
            <remarks>
            Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.RequestInviteWithHttpInfoAsync(System.String,VRChat.API.Model.RequestInviteRequest,System.Threading.CancellationToken)">
            <summary>
            Request Invite
            </summary>
            <remarks>
            Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.ResetInviteMessageAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reset Invite Message
            </summary>
            <remarks>
            Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.ResetInviteMessageWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reset Invite Message
            </summary>
            <remarks>
            Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.RespondInviteAsync(System.String,VRChat.API.Model.InviteResponse,System.Threading.CancellationToken)">
            <summary>
            Respond Invite
            </summary>
            <remarks>
            Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="inviteResponse">Slot number of the Response Message to use when responding to a user. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.RespondInviteWithHttpInfoAsync(System.String,VRChat.API.Model.InviteResponse,System.Threading.CancellationToken)">
            <summary>
            Respond Invite
            </summary>
            <remarks>
            Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="inviteResponse">Slot number of the Response Message to use when responding to a user. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.UpdateInviteMessageAsync(System.String,System.String,System.Int32,VRChat.API.Model.UpdateInviteMessageRequest,System.Threading.CancellationToken)">
            <summary>
            Update Invite Message
            </summary>
            <remarks>
            Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IInviteApiAsync.UpdateInviteMessageWithHttpInfoAsync(System.String,System.String,System.Int32,VRChat.API.Model.UpdateInviteMessageRequest,System.Threading.CancellationToken)">
            <summary>
            Update Invite Message
            </summary>
            <remarks>
            Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        </member>
        <member name="T:VRChat.API.Api.IInviteApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.InviteApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.InviteApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.InviteApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.InviteApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.InviteApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.InviteApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.InviteApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.InviteApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.InviteApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetInviteMessage(System.String,System.String,System.Int32)">
            <summary>
            Get Invite Message Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <returns>InviteMessage</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetInviteMessageWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Get Invite Message Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <returns>ApiResponse of InviteMessage</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetInviteMessageAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Invite Message Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of InviteMessage</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetInviteMessageWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Invite Message Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (InviteMessage)</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetInviteMessages(System.String,System.String)">
            <summary>
            List Invite Messages Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <returns>List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetInviteMessagesWithHttpInfo(System.String,System.String)">
            <summary>
            List Invite Messages Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetInviteMessagesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Invite Messages Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.GetInviteMessagesWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Invite Messages Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.InviteUser(System.String,VRChat.API.Model.InviteRequest)">
            <summary>
            Invite User Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user. (optional)</param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.InviteUserWithHttpInfo(System.String,VRChat.API.Model.InviteRequest)">
            <summary>
            Invite User Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user. (optional)</param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.InviteUserAsync(System.String,VRChat.API.Model.InviteRequest,System.Threading.CancellationToken)">
            <summary>
            Invite User Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.InviteUserWithHttpInfoAsync(System.String,VRChat.API.Model.InviteRequest,System.Threading.CancellationToken)">
            <summary>
            Invite User Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="inviteRequest">Slot number of the Invite Message to use when inviting a user. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.RequestInvite(System.String,VRChat.API.Model.RequestInviteRequest)">
            <summary>
            Request Invite Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.RequestInviteWithHttpInfo(System.String,VRChat.API.Model.RequestInviteRequest)">
            <summary>
            Request Invite Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.RequestInviteAsync(System.String,VRChat.API.Model.RequestInviteRequest,System.Threading.CancellationToken)">
            <summary>
            Request Invite Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.RequestInviteWithHttpInfoAsync(System.String,VRChat.API.Model.RequestInviteRequest,System.Threading.CancellationToken)">
            <summary>
            Request Invite Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="requestInviteRequest">Slot number of the Request Message to use when request an invite. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.ResetInviteMessage(System.String,System.String,System.Int32)">
            <summary>
            Reset Invite Message Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <returns>List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.ResetInviteMessageWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Reset Invite Message Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.ResetInviteMessageAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reset Invite Message Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.ResetInviteMessageWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reset Invite Message Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.RespondInvite(System.String,VRChat.API.Model.InviteResponse)">
            <summary>
            Respond Invite Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="inviteResponse">Slot number of the Response Message to use when responding to a user. (optional)</param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.RespondInviteWithHttpInfo(System.String,VRChat.API.Model.InviteResponse)">
            <summary>
            Respond Invite Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="inviteResponse">Slot number of the Response Message to use when responding to a user. (optional)</param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.RespondInviteAsync(System.String,VRChat.API.Model.InviteResponse,System.Threading.CancellationToken)">
            <summary>
            Respond Invite Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="inviteResponse">Slot number of the Response Message to use when responding to a user. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.RespondInviteWithHttpInfoAsync(System.String,VRChat.API.Model.InviteResponse,System.Threading.CancellationToken)">
            <summary>
            Respond Invite Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="inviteResponse">Slot number of the Response Message to use when responding to a user. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.UpdateInviteMessage(System.String,System.String,System.Int32,VRChat.API.Model.UpdateInviteMessageRequest)">
            <summary>
            Update Invite Message Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
            <returns>List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.UpdateInviteMessageWithHttpInfo(System.String,System.String,System.Int32,VRChat.API.Model.UpdateInviteMessageRequest)">
            <summary>
            Update Invite Message Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
            <returns>ApiResponse of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.UpdateInviteMessageAsync(System.String,System.String,System.Int32,VRChat.API.Model.UpdateInviteMessageRequest,System.Threading.CancellationToken)">
            <summary>
            Update Invite Message Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;InviteMessage&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.InviteApi.UpdateInviteMessageWithHttpInfoAsync(System.String,System.String,System.Int32,VRChat.API.Model.UpdateInviteMessageRequest,System.Threading.CancellationToken)">
            <summary>
            Update Invite Message Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \&quot;Too Fast Error\&quot;.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="messageType"></param>
            <param name="slot"></param>
            <param name="updateInviteMessageRequest">Message of what to set the invite message to. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;InviteMessage&gt;)</returns>
        </member>
        <member name="T:VRChat.API.Api.INotificationsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.AcceptFriendRequest(System.String)">
            <summary>
            Accept Friend Request
            </summary>
            <remarks>
            Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.AcceptFriendRequestWithHttpInfo(System.String)">
            <summary>
            Accept Friend Request
            </summary>
            <remarks>
            Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.ClearNotifications">
            <summary>
            Clear All Notifications
            </summary>
            <remarks>
            Clear **all** notifications.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.ClearNotificationsWithHttpInfo">
            <summary>
            Clear All Notifications
            </summary>
            <remarks>
            Clear **all** notifications.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.DeleteNotification(System.String)">
            <summary>
            Delete Notification
            </summary>
            <remarks>
            Delete a notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.DeleteNotificationWithHttpInfo(System.String)">
            <summary>
            Delete Notification
            </summary>
            <remarks>
            Delete a notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.GetNotifications(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            List Notifications
            </summary>
            <remarks>
            Retrieve all of the current user&#39;s notifications.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). (optional)</param>
            <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
            <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
            <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>List&lt;Notification&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.GetNotificationsWithHttpInfo(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            List Notifications
            </summary>
            <remarks>
            Retrieve all of the current user&#39;s notifications.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). (optional)</param>
            <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
            <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
            <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>ApiResponse of List&lt;Notification&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.MarkNotificationAsRead(System.String)">
            <summary>
            Mark Notification As Read
            </summary>
            <remarks>
            Mark a notification as seen.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiSync.MarkNotificationAsReadWithHttpInfo(System.String)">
            <summary>
            Mark Notification As Read
            </summary>
            <remarks>
            Mark a notification as seen.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="T:VRChat.API.Api.INotificationsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.AcceptFriendRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Accept Friend Request
            </summary>
            <remarks>
            Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.AcceptFriendRequestWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Accept Friend Request
            </summary>
            <remarks>
            Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.ClearNotificationsAsync(System.Threading.CancellationToken)">
            <summary>
            Clear All Notifications
            </summary>
            <remarks>
            Clear **all** notifications.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.ClearNotificationsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Clear All Notifications
            </summary>
            <remarks>
            Clear **all** notifications.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.DeleteNotificationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Notification
            </summary>
            <remarks>
            Delete a notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.DeleteNotificationWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Notification
            </summary>
            <remarks>
            Delete a notification.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.GetNotificationsAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List Notifications
            </summary>
            <remarks>
            Retrieve all of the current user&#39;s notifications.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). (optional)</param>
            <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
            <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
            <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Notification&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.GetNotificationsWithHttpInfoAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List Notifications
            </summary>
            <remarks>
            Retrieve all of the current user&#39;s notifications.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). (optional)</param>
            <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
            <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
            <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Notification&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.MarkNotificationAsReadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Mark Notification As Read
            </summary>
            <remarks>
            Mark a notification as seen.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.INotificationsApiAsync.MarkNotificationAsReadWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Mark Notification As Read
            </summary>
            <remarks>
            Mark a notification as seen.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="T:VRChat.API.Api.INotificationsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.NotificationsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.NotificationsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.NotificationsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.NotificationsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.NotificationsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.NotificationsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.NotificationsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.NotificationsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.NotificationsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.AcceptFriendRequest(System.String)">
            <summary>
            Accept Friend Request Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.AcceptFriendRequestWithHttpInfo(System.String)">
            <summary>
            Accept Friend Request Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.AcceptFriendRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Accept Friend Request Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.AcceptFriendRequestWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Accept Friend Request Accept a friend request by notification &#x60;frq_&#x60; ID. Friend requests can be found using the NotificationsAPI &#x60;getNotifications&#x60; by filtering of type &#x60;friendRequest&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.ClearNotifications">
            <summary>
            Clear All Notifications Clear **all** notifications.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.ClearNotificationsWithHttpInfo">
            <summary>
            Clear All Notifications Clear **all** notifications.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.ClearNotificationsAsync(System.Threading.CancellationToken)">
            <summary>
            Clear All Notifications Clear **all** notifications.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.ClearNotificationsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Clear All Notifications Clear **all** notifications.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.DeleteNotification(System.String)">
            <summary>
            Delete Notification Delete a notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.DeleteNotificationWithHttpInfo(System.String)">
            <summary>
            Delete Notification Delete a notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.DeleteNotificationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Notification Delete a notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.DeleteNotificationWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Notification Delete a notification.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.GetNotifications(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            List Notifications Retrieve all of the current user&#39;s notifications.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). (optional)</param>
            <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
            <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
            <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>List&lt;Notification&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.GetNotificationsWithHttpInfo(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            List Notifications Retrieve all of the current user&#39;s notifications.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). (optional)</param>
            <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
            <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
            <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>ApiResponse of List&lt;Notification&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.GetNotificationsAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List Notifications Retrieve all of the current user&#39;s notifications.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). (optional)</param>
            <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
            <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
            <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Notification&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.GetNotificationsWithHttpInfoAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List Notifications Retrieve all of the current user&#39;s notifications.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Only send notifications of this type (can use &#x60;all&#x60; for all). (optional)</param>
            <param name="sent">Return notifications sent by the user. Must be false or omitted. (optional) (deprecated)</param>
            <param name="hidden">Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;. (optional)</param>
            <param name="after">Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Notification&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.MarkNotificationAsRead(System.String)">
            <summary>
            Mark Notification As Read Mark a notification as seen.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.MarkNotificationAsReadWithHttpInfo(System.String)">
            <summary>
            Mark Notification As Read Mark a notification as seen.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <returns>ApiResponse of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.MarkNotificationAsReadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Mark Notification As Read Mark a notification as seen.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Notification</returns>
        </member>
        <member name="M:VRChat.API.Api.NotificationsApi.MarkNotificationAsReadWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Mark Notification As Read Mark a notification as seen.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="notificationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Notification)</returns>
        </member>
        <member name="T:VRChat.API.Api.IPermissionsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IPermissionsApiSync.GetAssignedPermissions">
            <summary>
            Get Assigned Permissions
            </summary>
            <remarks>
            Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;Permission&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IPermissionsApiSync.GetAssignedPermissionsWithHttpInfo">
            <summary>
            Get Assigned Permissions
            </summary>
            <remarks>
            Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;Permission&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IPermissionsApiSync.GetPermission(System.String)">
            <summary>
            Get Permission
            </summary>
            <remarks>
            Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as &#x60;/auth/permissions&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="permissionId"></param>
            <returns>Permission</returns>
        </member>
        <member name="M:VRChat.API.Api.IPermissionsApiSync.GetPermissionWithHttpInfo(System.String)">
            <summary>
            Get Permission
            </summary>
            <remarks>
            Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as &#x60;/auth/permissions&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="permissionId"></param>
            <returns>ApiResponse of Permission</returns>
        </member>
        <member name="T:VRChat.API.Api.IPermissionsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IPermissionsApiAsync.GetAssignedPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Assigned Permissions
            </summary>
            <remarks>
            Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Permission&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IPermissionsApiAsync.GetAssignedPermissionsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get Assigned Permissions
            </summary>
            <remarks>
            Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Permission&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IPermissionsApiAsync.GetPermissionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Permission
            </summary>
            <remarks>
            Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as &#x60;/auth/permissions&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="permissionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Permission</returns>
        </member>
        <member name="M:VRChat.API.Api.IPermissionsApiAsync.GetPermissionWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Permission
            </summary>
            <remarks>
            Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as &#x60;/auth/permissions&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="permissionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Permission)</returns>
        </member>
        <member name="T:VRChat.API.Api.IPermissionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.PermissionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.PermissionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.PermissionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.PermissionsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.PermissionsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.PermissionsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.PermissionsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.PermissionsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.PermissionsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetAssignedPermissions">
            <summary>
            Get Assigned Permissions Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;Permission&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetAssignedPermissionsWithHttpInfo">
            <summary>
            Get Assigned Permissions Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;Permission&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetAssignedPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Assigned Permissions Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Permission&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetAssignedPermissionsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get Assigned Permissions Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Permission&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetPermission(System.String)">
            <summary>
            Get Permission Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as &#x60;/auth/permissions&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="permissionId"></param>
            <returns>Permission</returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetPermissionWithHttpInfo(System.String)">
            <summary>
            Get Permission Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as &#x60;/auth/permissions&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="permissionId"></param>
            <returns>ApiResponse of Permission</returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetPermissionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Permission Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as &#x60;/auth/permissions&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="permissionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Permission</returns>
        </member>
        <member name="M:VRChat.API.Api.PermissionsApi.GetPermissionWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Permission Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as &#x60;/auth/permissions&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="permissionId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Permission)</returns>
        </member>
        <member name="T:VRChat.API.Api.IPlayermoderationApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.ClearAllPlayerModerations">
            <summary>
            Clear All Player Moderations
            </summary>
            <remarks>
            ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.ClearAllPlayerModerationsWithHttpInfo">
            <summary>
            Clear All Player Moderations
            </summary>
            <remarks>
            ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.DeletePlayerModeration(System.String)">
            <summary>
            Delete Player Moderation
            </summary>
            <remarks>
            Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.DeletePlayerModerationWithHttpInfo(System.String)">
            <summary>
            Delete Player Moderation
            </summary>
            <remarks>
            Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.GetPlayerModeration(System.String)">
            <summary>
            Get Player Moderation
            </summary>
            <remarks>
            Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <returns>PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.GetPlayerModerationWithHttpInfo(System.String)">
            <summary>
            Get Player Moderation
            </summary>
            <remarks>
            Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <returns>ApiResponse of PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.GetPlayerModerations(System.String,System.String)">
            <summary>
            Search Player Moderations
            </summary>
            <remarks>
            Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
            <param name="targetUserId">Must be valid UserID. (optional)</param>
            <returns>List&lt;PlayerModeration&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.GetPlayerModerationsWithHttpInfo(System.String,System.String)">
            <summary>
            Search Player Moderations
            </summary>
            <remarks>
            Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
            <param name="targetUserId">Must be valid UserID. (optional)</param>
            <returns>ApiResponse of List&lt;PlayerModeration&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.ModerateUser(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Moderate User
            </summary>
            <remarks>
            Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag- -playermoderation) on what playerModerations are, and how they differ from staff moderations.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <returns>PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.ModerateUserWithHttpInfo(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Moderate User
            </summary>
            <remarks>
            Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag- -playermoderation) on what playerModerations are, and how they differ from staff moderations.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <returns>ApiResponse of PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.UnmoderateUser(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Unmoderate User
            </summary>
            <remarks>
            Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previously have shown their avatar, but now want to reset it to default.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiSync.UnmoderateUserWithHttpInfo(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Unmoderate User
            </summary>
            <remarks>
            Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previously have shown their avatar, but now want to reset it to default.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="T:VRChat.API.Api.IPlayermoderationApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.ClearAllPlayerModerationsAsync(System.Threading.CancellationToken)">
            <summary>
            Clear All Player Moderations
            </summary>
            <remarks>
            ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.ClearAllPlayerModerationsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Clear All Player Moderations
            </summary>
            <remarks>
            ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.DeletePlayerModerationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Player Moderation
            </summary>
            <remarks>
            Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.DeletePlayerModerationWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Player Moderation
            </summary>
            <remarks>
            Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.GetPlayerModerationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Player Moderation
            </summary>
            <remarks>
            Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.GetPlayerModerationWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Player Moderation
            </summary>
            <remarks>
            Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlayerModeration)</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.GetPlayerModerationsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search Player Moderations
            </summary>
            <remarks>
            Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
            <param name="targetUserId">Must be valid UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;PlayerModeration&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.GetPlayerModerationsWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search Player Moderations
            </summary>
            <remarks>
            Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
            <param name="targetUserId">Must be valid UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;PlayerModeration&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.ModerateUserAsync(VRChat.API.Model.ModerateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Moderate User
            </summary>
            <remarks>
            Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag- -playermoderation) on what playerModerations are, and how they differ from staff moderations.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.ModerateUserWithHttpInfoAsync(VRChat.API.Model.ModerateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Moderate User
            </summary>
            <remarks>
            Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag- -playermoderation) on what playerModerations are, and how they differ from staff moderations.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlayerModeration)</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.UnmoderateUserAsync(VRChat.API.Model.ModerateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Unmoderate User
            </summary>
            <remarks>
            Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previously have shown their avatar, but now want to reset it to default.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.IPlayermoderationApiAsync.UnmoderateUserWithHttpInfoAsync(VRChat.API.Model.ModerateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Unmoderate User
            </summary>
            <remarks>
            Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previously have shown their avatar, but now want to reset it to default.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="T:VRChat.API.Api.IPlayermoderationApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.PlayermoderationApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.PlayermoderationApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.PlayermoderationApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.PlayermoderationApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.PlayermoderationApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.PlayermoderationApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.PlayermoderationApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.PlayermoderationApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.PlayermoderationApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.ClearAllPlayerModerations">
            <summary>
            Clear All Player Moderations ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.ClearAllPlayerModerationsWithHttpInfo">
            <summary>
            Clear All Player Moderations ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.ClearAllPlayerModerationsAsync(System.Threading.CancellationToken)">
            <summary>
            Clear All Player Moderations ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.ClearAllPlayerModerationsWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Clear All Player Moderations ⚠️ **This will delete every single player moderation you&#39;ve ever made.**
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.DeletePlayerModeration(System.String)">
            <summary>
            Delete Player Moderation Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.DeletePlayerModerationWithHttpInfo(System.String)">
            <summary>
            Delete Player Moderation Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.DeletePlayerModerationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Player Moderation Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.DeletePlayerModerationWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete Player Moderation Deletes a specific player moderation based on it&#39;s &#x60;pmod_&#x60; ID. The website uses &#x60;unmoderateUser&#x60; instead. You can delete the same player moderation multiple times successfully.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetPlayerModeration(System.String)">
            <summary>
            Get Player Moderation Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <returns>PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetPlayerModerationWithHttpInfo(System.String)">
            <summary>
            Get Player Moderation Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <returns>ApiResponse of PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetPlayerModerationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Player Moderation Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetPlayerModerationWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Player Moderation Returns a single Player Moderation. This returns the exact same amount of information as the more generalised &#x60;getPlayerModerations&#x60;.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerModerationId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlayerModeration)</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetPlayerModerations(System.String,System.String)">
            <summary>
            Search Player Moderations Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
            <param name="targetUserId">Must be valid UserID. (optional)</param>
            <returns>List&lt;PlayerModeration&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetPlayerModerationsWithHttpInfo(System.String,System.String)">
            <summary>
            Search Player Moderations Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
            <param name="targetUserId">Must be valid UserID. (optional)</param>
            <returns>ApiResponse of List&lt;PlayerModeration&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetPlayerModerationsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search Player Moderations Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
            <param name="targetUserId">Must be valid UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;PlayerModeration&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.GetPlayerModerationsWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search Player Moderations Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="type">Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block. (optional)</param>
            <param name="targetUserId">Must be valid UserID. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;PlayerModeration&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.ModerateUser(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Moderate User Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag- -playermoderation) on what playerModerations are, and how they differ from staff moderations.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <returns>PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.ModerateUserWithHttpInfo(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Moderate User Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag- -playermoderation) on what playerModerations are, and how they differ from staff moderations.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <returns>ApiResponse of PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.ModerateUserAsync(VRChat.API.Model.ModerateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Moderate User Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag- -playermoderation) on what playerModerations are, and how they differ from staff moderations.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlayerModeration</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.ModerateUserWithHttpInfoAsync(VRChat.API.Model.ModerateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Moderate User Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag- -playermoderation) on what playerModerations are, and how they differ from staff moderations.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlayerModeration)</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.UnmoderateUser(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Unmoderate User Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previously have shown their avatar, but now want to reset it to default.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <returns>Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.UnmoderateUserWithHttpInfo(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Unmoderate User Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previously have shown their avatar, but now want to reset it to default.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <returns>ApiResponse of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.UnmoderateUserAsync(VRChat.API.Model.ModerateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Unmoderate User Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previously have shown their avatar, but now want to reset it to default.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Success</returns>
        </member>
        <member name="M:VRChat.API.Api.PlayermoderationApi.UnmoderateUserWithHttpInfoAsync(VRChat.API.Model.ModerateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Unmoderate User Removes a player moderation previously added through &#x60;moderateUser&#x60;. E.g if you previously have shown their avatar, but now want to reset it to default.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="moderateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Success)</returns>
        </member>
        <member name="T:VRChat.API.Api.ISystemApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetCSS(System.String,System.String)">
            <summary>
            Download CSS
            </summary>
            <remarks>
            Fetches the CSS code to the frontend React website.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <returns>string</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetCSSWithHttpInfo(System.String,System.String)">
            <summary>
            Download CSS
            </summary>
            <remarks>
            Fetches the CSS code to the frontend React website.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <returns>ApiResponse of string</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetConfig">
            <summary>
            Fetch API Config
            </summary>
            <remarks>
            API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>APIConfig</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetConfigWithHttpInfo">
            <summary>
            Fetch API Config
            </summary>
            <remarks>
            API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of APIConfig</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetCurrentOnlineUsers">
            <summary>
            Current Online Users
            </summary>
            <remarks>
            Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>int</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetCurrentOnlineUsersWithHttpInfo">
            <summary>
            Current Online Users
            </summary>
            <remarks>
            Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of int</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetHealth">
            <summary>
            Check API Health
            </summary>
            <remarks>
            ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>APIHealth</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetHealthWithHttpInfo">
            <summary>
            Check API Health
            </summary>
            <remarks>
            ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of APIHealth</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetInfoPush(System.String,System.String)">
            <summary>
            Show Information Notices
            </summary>
            <remarks>
            IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
            <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <returns>List&lt;InfoPush&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetInfoPushWithHttpInfo(System.String,System.String)">
            <summary>
            Show Information Notices
            </summary>
            <remarks>
            IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
            <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <returns>ApiResponse of List&lt;InfoPush&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetJavaScript(System.String,System.String)">
            <summary>
            Download JavaScript
            </summary>
            <remarks>
            Fetches the JavaScript code to the frontend React website.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <returns>string</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetJavaScriptWithHttpInfo(System.String,System.String)">
            <summary>
            Download JavaScript
            </summary>
            <remarks>
            Fetches the JavaScript code to the frontend React website.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <returns>ApiResponse of string</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetSystemTime">
            <summary>
            Current System Time
            </summary>
            <remarks>
            Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>DateTime</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiSync.GetSystemTimeWithHttpInfo">
            <summary>
            Current System Time
            </summary>
            <remarks>
            Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of DateTime</returns>
        </member>
        <member name="T:VRChat.API.Api.ISystemApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetCSSAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Download CSS
            </summary>
            <remarks>
            Fetches the CSS code to the frontend React website.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of string</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetCSSWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Download CSS
            </summary>
            <remarks>
            Fetches the CSS code to the frontend React website.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (string)</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetConfigAsync(System.Threading.CancellationToken)">
            <summary>
            Fetch API Config
            </summary>
            <remarks>
            API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of APIConfig</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetConfigWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Fetch API Config
            </summary>
            <remarks>
            API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (APIConfig)</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetCurrentOnlineUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Current Online Users
            </summary>
            <remarks>
            Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of int</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetCurrentOnlineUsersWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Current Online Users
            </summary>
            <remarks>
            Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (int)</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetHealthAsync(System.Threading.CancellationToken)">
            <summary>
            Check API Health
            </summary>
            <remarks>
            ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of APIHealth</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetHealthWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Check API Health
            </summary>
            <remarks>
            ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (APIHealth)</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetInfoPushAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show Information Notices
            </summary>
            <remarks>
            IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
            <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;InfoPush&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetInfoPushWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show Information Notices
            </summary>
            <remarks>
            IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
            <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;InfoPush&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetJavaScriptAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Download JavaScript
            </summary>
            <remarks>
            Fetches the JavaScript code to the frontend React website.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of string</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetJavaScriptWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Download JavaScript
            </summary>
            <remarks>
            Fetches the JavaScript code to the frontend React website.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (string)</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetSystemTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Current System Time
            </summary>
            <remarks>
            Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DateTime</returns>
        </member>
        <member name="M:VRChat.API.Api.ISystemApiAsync.GetSystemTimeWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Current System Time
            </summary>
            <remarks>
            Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DateTime)</returns>
        </member>
        <member name="T:VRChat.API.Api.ISystemApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.SystemApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.SystemApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.SystemApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.SystemApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.SystemApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.SystemApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.SystemApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.SystemApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.SystemApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetCSS(System.String,System.String)">
            <summary>
            Download CSS Fetches the CSS code to the frontend React website.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <returns>string</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetCSSWithHttpInfo(System.String,System.String)">
            <summary>
            Download CSS Fetches the CSS code to the frontend React website.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <returns>ApiResponse of string</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetCSSAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Download CSS Fetches the CSS code to the frontend React website.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of string</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetCSSWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Download CSS Fetches the CSS code to the frontend React website.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (string)</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetConfig">
            <summary>
            Fetch API Config API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>APIConfig</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetConfigWithHttpInfo">
            <summary>
            Fetch API Config API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of APIConfig</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetConfigAsync(System.Threading.CancellationToken)">
            <summary>
            Fetch API Config API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of APIConfig</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetConfigWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Fetch API Config API config contains configuration that the clients needs to work properly.  Currently the most important value here is &#x60;clientApiKey&#x60; which is used for all other API endpoints.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (APIConfig)</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetCurrentOnlineUsers">
            <summary>
            Current Online Users Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>int</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetCurrentOnlineUsersWithHttpInfo">
            <summary>
            Current Online Users Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of int</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetCurrentOnlineUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Current Online Users Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of int</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetCurrentOnlineUsersWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Current Online Users Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (int)</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetHealth">
            <summary>
            Check API Health ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>APIHealth</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetHealthWithHttpInfo">
            <summary>
            Check API Health ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of APIHealth</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetHealthAsync(System.Threading.CancellationToken)">
            <summary>
            Check API Health ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of APIHealth</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetHealthWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Check API Health ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (APIHealth)</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetInfoPush(System.String,System.String)">
            <summary>
            Show Information Notices IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
            <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <returns>List&lt;InfoPush&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetInfoPushWithHttpInfo(System.String,System.String)">
            <summary>
            Show Information Notices IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
            <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <returns>ApiResponse of List&lt;InfoPush&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetInfoPushAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show Information Notices IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
            <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;InfoPush&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetInfoPushWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show Information Notices IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  &#x60;include&#x60; is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \&quot;any of\&quot; search.  &#x60;require&#x60; is used to limit what Information Pushes should be included in the response. This is usually used in combination with &#x60;include&#x60;, and is an \&quot;all of\&quot; search.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="require">Tags to include (comma-separated). All of the tags needs to be present. (optional)</param>
            <param name="include">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;InfoPush&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetJavaScript(System.String,System.String)">
            <summary>
            Download JavaScript Fetches the JavaScript code to the frontend React website.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <returns>string</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetJavaScriptWithHttpInfo(System.String,System.String)">
            <summary>
            Download JavaScript Fetches the JavaScript code to the frontend React website.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <returns>ApiResponse of string</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetJavaScriptAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Download JavaScript Fetches the JavaScript code to the frontend React website.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of string</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetJavaScriptWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Download JavaScript Fetches the JavaScript code to the frontend React website.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="variant">Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management. (optional, default to public)</param>
            <param name="branch">Specifies which git branch the site should load frontend source code from. (optional, default to &quot;main&quot;)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (string)</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetSystemTime">
            <summary>
            Current System Time Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>DateTime</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetSystemTimeWithHttpInfo">
            <summary>
            Current System Time Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of DateTime</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetSystemTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Current System Time Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DateTime</returns>
        </member>
        <member name="M:VRChat.API.Api.SystemApi.GetSystemTimeWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Current System Time Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DateTime)</returns>
        </member>
        <member name="T:VRChat.API.Api.IUsersApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiSync.GetUser(System.String)">
            <summary>
            Get User by ID
            </summary>
            <remarks>
            Get public user information about a specific user using their ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>User</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiSync.GetUserWithHttpInfo(System.String)">
            <summary>
            Get User by ID
            </summary>
            <remarks>
            Get public user information about a specific user using their ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of User</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiSync.GetUserByName(System.String)">
            <summary>
            Get User by Username
            </summary>
            <remarks>
            Get public user information about a specific user using their name.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="username"></param>
            <returns>User</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiSync.GetUserByNameWithHttpInfo(System.String)">
            <summary>
            Get User by Username
            </summary>
            <remarks>
            Get public user information about a specific user using their name.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="username"></param>
            <returns>ApiResponse of User</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiSync.SearchUsers(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Search All Users
            </summary>
            <remarks>
            Search and list any users by text query
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="search">Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing. (optional)</param>
            <param name="developerType">Active user by developer type, none for normal users and internal for moderators (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiSync.SearchUsersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Search All Users
            </summary>
            <remarks>
            Search and list any users by text query
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="search">Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing. (optional)</param>
            <param name="developerType">Active user by developer type, none for normal users and internal for moderators (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiSync.UpdateUser(System.String,VRChat.API.Model.UpdateUserRequest)">
            <summary>
            Update User Info
            </summary>
            <remarks>
            Update a users information such as the email and birthday.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="updateUserRequest"> (optional)</param>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiSync.UpdateUserWithHttpInfo(System.String,VRChat.API.Model.UpdateUserRequest)">
            <summary>
            Update User Info
            </summary>
            <remarks>
            Update a users information such as the email and birthday.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="updateUserRequest"> (optional)</param>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="T:VRChat.API.Api.IUsersApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiAsync.GetUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get User by ID
            </summary>
            <remarks>
            Get public user information about a specific user using their ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of User</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiAsync.GetUserWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get User by ID
            </summary>
            <remarks>
            Get public user information about a specific user using their ID.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (User)</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiAsync.GetUserByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get User by Username
            </summary>
            <remarks>
            Get public user information about a specific user using their name.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="username"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of User</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiAsync.GetUserByNameWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get User by Username
            </summary>
            <remarks>
            Get public user information about a specific user using their name.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="username"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (User)</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiAsync.SearchUsersAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Search All Users
            </summary>
            <remarks>
            Search and list any users by text query
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="search">Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing. (optional)</param>
            <param name="developerType">Active user by developer type, none for normal users and internal for moderators (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiAsync.SearchUsersWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Search All Users
            </summary>
            <remarks>
            Search and list any users by text query
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="search">Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing. (optional)</param>
            <param name="developerType">Active user by developer type, none for normal users and internal for moderators (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedUser&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiAsync.UpdateUserAsync(System.String,VRChat.API.Model.UpdateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Update User Info
            </summary>
            <remarks>
            Update a users information such as the email and birthday.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="updateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.IUsersApiAsync.UpdateUserWithHttpInfoAsync(System.String,VRChat.API.Model.UpdateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Update User Info
            </summary>
            <remarks>
            Update a users information such as the email and birthday.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="updateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="T:VRChat.API.Api.IUsersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.UsersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.UsersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.UsersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.UsersApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.UsersApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.UsersApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.UsersApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.UsersApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.UsersApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetUser(System.String)">
            <summary>
            Get User by ID Get public user information about a specific user using their ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>User</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetUserWithHttpInfo(System.String)">
            <summary>
            Get User by ID Get public user information about a specific user using their ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <returns>ApiResponse of User</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get User by ID Get public user information about a specific user using their ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of User</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetUserWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get User by ID Get public user information about a specific user using their ID.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (User)</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetUserByName(System.String)">
            <summary>
            Get User by Username Get public user information about a specific user using their name.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="username"></param>
            <returns>User</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetUserByNameWithHttpInfo(System.String)">
            <summary>
            Get User by Username Get public user information about a specific user using their name.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="username"></param>
            <returns>ApiResponse of User</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetUserByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get User by Username Get public user information about a specific user using their name.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="username"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of User</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.GetUserByNameWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get User by Username Get public user information about a specific user using their name.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="username"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (User)</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.SearchUsers(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Search All Users Search and list any users by text query
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="search">Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing. (optional)</param>
            <param name="developerType">Active user by developer type, none for normal users and internal for moderators (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.SearchUsersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Search All Users Search and list any users by text query
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="search">Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing. (optional)</param>
            <param name="developerType">Active user by developer type, none for normal users and internal for moderators (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.SearchUsersAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Search All Users Search and list any users by text query
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="search">Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing. (optional)</param>
            <param name="developerType">Active user by developer type, none for normal users and internal for moderators (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedUser&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.SearchUsersWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Search All Users Search and list any users by text query
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="search">Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing. (optional)</param>
            <param name="developerType">Active user by developer type, none for normal users and internal for moderators (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedUser&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.UpdateUser(System.String,VRChat.API.Model.UpdateUserRequest)">
            <summary>
            Update User Info Update a users information such as the email and birthday.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="updateUserRequest"> (optional)</param>
            <returns>CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.UpdateUserWithHttpInfo(System.String,VRChat.API.Model.UpdateUserRequest)">
            <summary>
            Update User Info Update a users information such as the email and birthday.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="updateUserRequest"> (optional)</param>
            <returns>ApiResponse of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.UpdateUserAsync(System.String,VRChat.API.Model.UpdateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Update User Info Update a users information such as the email and birthday.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="updateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CurrentUser</returns>
        </member>
        <member name="M:VRChat.API.Api.UsersApi.UpdateUserWithHttpInfoAsync(System.String,VRChat.API.Model.UpdateUserRequest,System.Threading.CancellationToken)">
            <summary>
            Update User Info Update a users information such as the email and birthday.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userId"></param>
            <param name="updateUserRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CurrentUser)</returns>
        </member>
        <member name="T:VRChat.API.Api.IWorldsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.CreateWorld(VRChat.API.Model.CreateWorldRequest)">
            <summary>
            Create World
            </summary>
            <remarks>
            Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createWorldRequest"> (optional)</param>
            <returns>World</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.CreateWorldWithHttpInfo(VRChat.API.Model.CreateWorldRequest)">
            <summary>
            Create World
            </summary>
            <remarks>
            Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createWorldRequest"> (optional)</param>
            <returns>ApiResponse of World</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.DeleteWorld(System.String)">
            <summary>
            Delete World
            </summary>
            <remarks>
            Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.DeleteWorldWithHttpInfo(System.String)">
            <summary>
            Delete World
            </summary>
            <remarks>
            Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetActiveWorlds(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Active Worlds
            </summary>
            <remarks>
            Search and list currently Active worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetActiveWorldsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Active Worlds
            </summary>
            <remarks>
            Search and list currently Active worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetFavoritedWorlds(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Favorited Worlds
            </summary>
            <remarks>
            Search and list favorited worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetFavoritedWorldsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Favorited Worlds
            </summary>
            <remarks>
            Search and list favorited worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetRecentWorlds(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Recent Worlds
            </summary>
            <remarks>
            Search and list recently visited worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetRecentWorldsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Recent Worlds
            </summary>
            <remarks>
            Search and list recently visited worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetWorld(System.String)">
            <summary>
            Get World by ID
            </summary>
            <remarks>
            Get information about a specific World.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>World</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetWorldWithHttpInfo(System.String)">
            <summary>
            Get World by ID
            </summary>
            <remarks>
            Get information about a specific World.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of World</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetWorldInstance(System.String,System.String)">
            <summary>
            Get World Instance
            </summary>
            <remarks>
            Returns a worlds instance.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetWorldInstanceWithHttpInfo(System.String,System.String)">
            <summary>
            Get World Instance
            </summary>
            <remarks>
            Returns a worlds instance.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>ApiResponse of Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetWorldMetadata(System.String)">
            <summary>
            Get World Metadata
            </summary>
            <remarks>
            Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>WorldMetadata</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetWorldMetadataWithHttpInfo(System.String)">
            <summary>
            Get World Metadata
            </summary>
            <remarks>
            Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of WorldMetadata</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetWorldPublishStatus(System.String)">
            <summary>
            Get World Publish Status
            </summary>
            <remarks>
            Returns a worlds publish status.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>WorldPublishStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.GetWorldPublishStatusWithHttpInfo(System.String)">
            <summary>
            Get World Publish Status
            </summary>
            <remarks>
            Returns a worlds publish status.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of WorldPublishStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.PublishWorld(System.String)">
            <summary>
            Publish World
            </summary>
            <remarks>
            Publish a world. You can only publish one world per week.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.PublishWorldWithHttpInfo(System.String)">
            <summary>
            Publish World
            </summary>
            <remarks>
            Publish a world. You can only publish one world per week.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.SearchWorlds(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search All Worlds
            </summary>
            <remarks>
            Search and list any worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.SearchWorldsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search All Worlds
            </summary>
            <remarks>
            Search and list any worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.UnpublishWorld(System.String)">
            <summary>
            Unpublish World
            </summary>
            <remarks>
            Unpublish a world.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.UnpublishWorldWithHttpInfo(System.String)">
            <summary>
            Unpublish World
            </summary>
            <remarks>
            Unpublish a world.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.UpdateWorld(System.String,VRChat.API.Model.UpdateWorldRequest)">
            <summary>
            Update World
            </summary>
            <remarks>
            Update information about a specific World.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="updateWorldRequest"> (optional)</param>
            <returns>World</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiSync.UpdateWorldWithHttpInfo(System.String,VRChat.API.Model.UpdateWorldRequest)">
            <summary>
            Update World
            </summary>
            <remarks>
            Update information about a specific World.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="updateWorldRequest"> (optional)</param>
            <returns>ApiResponse of World</returns>
        </member>
        <member name="T:VRChat.API.Api.IWorldsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.CreateWorldAsync(VRChat.API.Model.CreateWorldRequest,System.Threading.CancellationToken)">
            <summary>
            Create World
            </summary>
            <remarks>
            Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createWorldRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of World</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.CreateWorldWithHttpInfoAsync(VRChat.API.Model.CreateWorldRequest,System.Threading.CancellationToken)">
            <summary>
            Create World
            </summary>
            <remarks>
            Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createWorldRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (World)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.DeleteWorldAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete World
            </summary>
            <remarks>
            Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.DeleteWorldWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete World
            </summary>
            <remarks>
            Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetActiveWorldsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Active Worlds
            </summary>
            <remarks>
            Search and list currently Active worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetActiveWorldsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Active Worlds
            </summary>
            <remarks>
            Search and list currently Active worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetFavoritedWorldsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorited Worlds
            </summary>
            <remarks>
            Search and list favorited worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetFavoritedWorldsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorited Worlds
            </summary>
            <remarks>
            Search and list favorited worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetRecentWorldsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Recent Worlds
            </summary>
            <remarks>
            Search and list recently visited worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetRecentWorldsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Recent Worlds
            </summary>
            <remarks>
            Search and list recently visited worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetWorldAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World by ID
            </summary>
            <remarks>
            Get information about a specific World.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of World</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetWorldWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World by ID
            </summary>
            <remarks>
            Get information about a specific World.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (World)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetWorldInstanceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Instance
            </summary>
            <remarks>
            Returns a worlds instance.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetWorldInstanceWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Instance
            </summary>
            <remarks>
            Returns a worlds instance.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Instance)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetWorldMetadataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Metadata
            </summary>
            <remarks>
            Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WorldMetadata</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetWorldMetadataWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Metadata
            </summary>
            <remarks>
            Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WorldMetadata)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetWorldPublishStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Publish Status
            </summary>
            <remarks>
            Returns a worlds publish status.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WorldPublishStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.GetWorldPublishStatusWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Publish Status
            </summary>
            <remarks>
            Returns a worlds publish status.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WorldPublishStatus)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.PublishWorldAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Publish World
            </summary>
            <remarks>
            Publish a world. You can only publish one world per week.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.PublishWorldWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Publish World
            </summary>
            <remarks>
            Publish a world. You can only publish one world per week.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.SearchWorldsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search All Worlds
            </summary>
            <remarks>
            Search and list any worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.SearchWorldsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search All Worlds
            </summary>
            <remarks>
            Search and list any worlds by query filters.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.UnpublishWorldAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unpublish World
            </summary>
            <remarks>
            Unpublish a world.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.UnpublishWorldWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unpublish World
            </summary>
            <remarks>
            Unpublish a world.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.UpdateWorldAsync(System.String,VRChat.API.Model.UpdateWorldRequest,System.Threading.CancellationToken)">
            <summary>
            Update World
            </summary>
            <remarks>
            Update information about a specific World.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="updateWorldRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of World</returns>
        </member>
        <member name="M:VRChat.API.Api.IWorldsApiAsync.UpdateWorldWithHttpInfoAsync(System.String,VRChat.API.Model.UpdateWorldRequest,System.Threading.CancellationToken)">
            <summary>
            Update World
            </summary>
            <remarks>
            Update information about a specific World.
            </remarks>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="updateWorldRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (World)</returns>
        </member>
        <member name="T:VRChat.API.Api.IWorldsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:VRChat.API.Api.WorldsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.WorldsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.WorldsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.#ctor(VRChat.API.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.WorldsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.#ctor(VRChat.API.Client.ISynchronousClient,VRChat.API.Client.IAsynchronousClient,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Api.WorldsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:VRChat.API.Api.WorldsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:VRChat.API.Api.WorldsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Api.WorldsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:VRChat.API.Api.WorldsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.CreateWorld(VRChat.API.Model.CreateWorldRequest)">
            <summary>
            Create World Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createWorldRequest"> (optional)</param>
            <returns>World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.CreateWorldWithHttpInfo(VRChat.API.Model.CreateWorldRequest)">
            <summary>
            Create World Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createWorldRequest"> (optional)</param>
            <returns>ApiResponse of World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.CreateWorldAsync(VRChat.API.Model.CreateWorldRequest,System.Threading.CancellationToken)">
            <summary>
            Create World Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createWorldRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.CreateWorldWithHttpInfoAsync(VRChat.API.Model.CreateWorldRequest,System.Threading.CancellationToken)">
            <summary>
            Create World Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createWorldRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (World)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.DeleteWorld(System.String)">
            <summary>
            Delete World Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.DeleteWorldWithHttpInfo(System.String)">
            <summary>
            Delete World Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.DeleteWorldAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete World Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.DeleteWorldWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete World Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetActiveWorlds(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Active Worlds Search and list currently Active worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetActiveWorldsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Active Worlds Search and list currently Active worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetActiveWorldsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Active Worlds Search and list currently Active worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetActiveWorldsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Active Worlds Search and list currently Active worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetFavoritedWorlds(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Favorited Worlds Search and list favorited worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetFavoritedWorldsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Favorited Worlds Search and list favorited worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetFavoritedWorldsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorited Worlds Search and list favorited worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetFavoritedWorldsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Favorited Worlds Search and list favorited worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetRecentWorlds(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Recent Worlds Search and list recently visited worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetRecentWorldsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            List Recent Worlds Search and list recently visited worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetRecentWorldsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Recent Worlds Search and list recently visited worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetRecentWorldsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List Recent Worlds Search and list recently visited worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="userId">Target user to see information on, admin-only. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorld(System.String)">
            <summary>
            Get World by ID Get information about a specific World.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldWithHttpInfo(System.String)">
            <summary>
            Get World by ID Get information about a specific World.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World by ID Get information about a specific World.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World by ID Get information about a specific World.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (World)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldInstance(System.String,System.String)">
            <summary>
            Get World Instance Returns a worlds instance.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldInstanceWithHttpInfo(System.String,System.String)">
            <summary>
            Get World Instance Returns a worlds instance.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <returns>ApiResponse of Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldInstanceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Instance Returns a worlds instance.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Instance</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldInstanceWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Instance Returns a worlds instance.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="instanceId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Instance)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldMetadata(System.String)">
            <summary>
            Get World Metadata Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>WorldMetadata</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldMetadataWithHttpInfo(System.String)">
            <summary>
            Get World Metadata Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of WorldMetadata</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldMetadataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Metadata Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WorldMetadata</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldMetadataWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Metadata Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WorldMetadata)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldPublishStatus(System.String)">
            <summary>
            Get World Publish Status Returns a worlds publish status.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>WorldPublishStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldPublishStatusWithHttpInfo(System.String)">
            <summary>
            Get World Publish Status Returns a worlds publish status.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of WorldPublishStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldPublishStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Publish Status Returns a worlds publish status.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WorldPublishStatus</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.GetWorldPublishStatusWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get World Publish Status Returns a worlds publish status.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WorldPublishStatus)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.PublishWorld(System.String)">
            <summary>
            Publish World Publish a world. You can only publish one world per week.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.PublishWorldWithHttpInfo(System.String)">
            <summary>
            Publish World Publish a world. You can only publish one world per week.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.PublishWorldAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Publish World Publish a world. You can only publish one world per week.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.PublishWorldWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Publish World Publish a world. You can only publish one world per week.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.SearchWorlds(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search All Worlds Search and list any worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.SearchWorldsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search All Worlds Search and list any worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <returns>ApiResponse of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.SearchWorldsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search All Worlds Search and list any worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;LimitedWorld&gt;</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.SearchWorldsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Search All Worlds Search and list any worlds by query filters.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="featured">Filters on featured results. (optional)</param>
            <param name="sort"> (optional, default to popularity)</param>
            <param name="user">Set to &#x60;me&#x60; for searching own worlds. (optional)</param>
            <param name="userId">Filter by UserID. (optional)</param>
            <param name="n">The number of objects to return. (optional, default to 60)</param>
            <param name="order"> (optional, default to descending)</param>
            <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
            <param name="search">Filters by world name. (optional)</param>
            <param name="tag">Tags to include (comma-separated). Any of the tags needs to be present. (optional)</param>
            <param name="notag">Tags to exclude (comma-separated). (optional)</param>
            <param name="releaseStatus">Filter by ReleaseStatus. (optional, default to public)</param>
            <param name="maxUnityVersion">The maximum Unity version supported by the asset. (optional)</param>
            <param name="minUnityVersion">The minimum Unity version supported by the asset. (optional)</param>
            <param name="platform">The platform the asset supports. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;LimitedWorld&gt;)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.UnpublishWorld(System.String)">
            <summary>
            Unpublish World Unpublish a world.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.UnpublishWorldWithHttpInfo(System.String)">
            <summary>
            Unpublish World Unpublish a world.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.UnpublishWorldAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unpublish World Unpublish a world.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.UnpublishWorldWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unpublish World Unpublish a world.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.UpdateWorld(System.String,VRChat.API.Model.UpdateWorldRequest)">
            <summary>
            Update World Update information about a specific World.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="updateWorldRequest"> (optional)</param>
            <returns>World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.UpdateWorldWithHttpInfo(System.String,VRChat.API.Model.UpdateWorldRequest)">
            <summary>
            Update World Update information about a specific World.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="updateWorldRequest"> (optional)</param>
            <returns>ApiResponse of World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.UpdateWorldAsync(System.String,VRChat.API.Model.UpdateWorldRequest,System.Threading.CancellationToken)">
            <summary>
            Update World Update information about a specific World.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="updateWorldRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of World</returns>
        </member>
        <member name="M:VRChat.API.Api.WorldsApi.UpdateWorldWithHttpInfoAsync(System.String,VRChat.API.Model.UpdateWorldRequest,System.Threading.CancellationToken)">
            <summary>
            Update World Update information about a specific World.
            </summary>
            <exception cref="T:VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="worldId"></param>
            <param name="updateWorldRequest"> (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (World)</returns>
        </member>
        <member name="T:VRChat.API.Client.CustomJsonCodec">
            <summary>
            Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.CustomJsonCodec.Serialize(System.Object)">
            <summary>
            Serialize the object into a JSON string.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns>A JSON string.</returns>
        </member>
        <member name="M:VRChat.API.Client.CustomJsonCodec.Deserialize(RestSharp.IRestResponse,System.Type)">
            <summary>
            Deserialize the JSON string into a proper object.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="T:VRChat.API.Client.ApiClient">
            <summary>
            Provides a default implementation of an Api client (both synchronous and asynchronous implementations),
            encapsulating general REST accessor use cases.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.ApiClient.SerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            These settings can be adjusted to accommodate custom serialization rules.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiClient" />, defaulting to the global configurations' base url.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiClient" />
            </summary>
            <param name="basePath">The target service's base path in URL format.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.Method(VRChat.API.Client.HttpMethod)">
            <summary>
            Constructs the RestSharp version of an http method
            </summary>
            <param name="method">Swagger Client Custom HttpMethod</param>
            <returns>RestSharp's HttpMethod instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.NewRequest(VRChat.API.Client.HttpMethod,System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Provides all logic for constructing a new RestSharp <see cref="T:RestSharp.RestRequest"/>.
            At this point, all information for querying the service is known. Here, it is simply
            mapped into the RestSharp request.
            </summary>
            <param name="method">The http verb.</param>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>[private] A new RestRequest instance.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.GetAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP GET request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.PostAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP POST request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.PutAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP PUT request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.DeleteAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP DELETE request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.HeadAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP HEAD request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.OptionsAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP OPTION request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.PatchAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP PATCH request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.Get``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP GET request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.Post``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP POST request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.Put``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PUT request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.Delete``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP DELETE request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.Head``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP HEAD request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.Options``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP OPTION request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:VRChat.API.Client.ApiClient.Patch``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PATCH request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="T:VRChat.API.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="P:VRChat.API.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:VRChat.API.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="P:VRChat.API.Client.ApiException.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="M:VRChat.API.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:VRChat.API.Client.ApiException.#ctor(System.Int32,System.String,System.Object,VRChat.API.Client.Multimap{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
            <param name="headers">HTTP Headers.</param>
        </member>
        <member name="T:VRChat.API.Client.IApiResponse">
            <summary>
            Provides a non-generic contract for the ApiResponse wrapper.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.IApiResponse.ResponseType">
            <summary>
            The data type of <see cref="P:VRChat.API.Client.IApiResponse.Content"/>
            </summary>
        </member>
        <member name="P:VRChat.API.Client.IApiResponse.Content">
            <summary>
            The content of this response
            </summary>
        </member>
        <member name="P:VRChat.API.Client.IApiResponse.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:VRChat.API.Client.IApiResponse.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:VRChat.API.Client.IApiResponse.ErrorText">
            <summary>
            Gets or sets any error text defined by the calling client.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.IApiResponse.Cookies">
            <summary>
            Gets or sets any cookies passed along on the response.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.IApiResponse.RawContent">
            <summary>
            The raw content of this response
            </summary>
        </member>
        <member name="T:VRChat.API.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="P:VRChat.API.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:VRChat.API.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:VRChat.API.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:VRChat.API.Client.ApiResponse`1.ErrorText">
            <summary>
            Gets or sets any error text defined by the calling client.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.ApiResponse`1.Cookies">
            <summary>
            Gets or sets any cookies passed along on the response.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.ApiResponse`1.ResponseType">
            <summary>
            The content of this response
            </summary>
        </member>
        <member name="P:VRChat.API.Client.ApiResponse`1.Content">
            <summary>
            The data type of <see cref="P:VRChat.API.Client.ApiResponse`1.Content"/>
            </summary>
        </member>
        <member name="P:VRChat.API.Client.ApiResponse`1.RawContent">
            <summary>
            The raw content
            </summary>
        </member>
        <member name="M:VRChat.API.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,VRChat.API.Client.Multimap{System.String,System.String},`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
            <param name="rawContent">Raw content.</param>
        </member>
        <member name="M:VRChat.API.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,VRChat.API.Client.Multimap{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="M:VRChat.API.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="data">Data (parsed HTTP body)</param>
            <param name="rawContent">Raw content.</param>
        </member>
        <member name="M:VRChat.API.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="T:VRChat.API.Client.ClientUtils">
            <summary>
            Utility functions providing some benefit to API client consumers.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.SanitizeFilename(System.String)">
            <summary>
            Sanitize filename by removing the path
            </summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.ParameterToMultiMap(System.String,System.String,System.Object)">
            <summary>
            Convert params to key/value pairs.
            Use collectionFormat to properly format lists and collections.
            </summary>
            <param name="collectionFormat">The swagger-supported collection format, one of: csv, tsv, ssv, pipes, multi</param>
            <param name="name">Key name.</param>
            <param name="value">Value object.</param>
            <returns>A multimap of keys with 1..n associated values.</returns>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.ParameterToString(System.Object,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <param name="configuration">An optional configuration instance, providing formatting options used in processing.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.UrlEncode(System.String)">
            <summary>
            URL encode a string
            Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
            </summary>
            <param name="input">string to be URL encoded</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.Base64Encode(System.String)">
            <summary>
            Encode string in base64 format.
            </summary>
            <param name="text">string to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.ReadAsBytes(System.IO.Stream)">
            <summary>
            Convert stream to byte array
            </summary>
            <param name="inputStream">Input stream to be converted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON type exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.SelectHeaderAccept(System.String[])">
            <summary>
            Select the Accept header's value from the given accepts array:
            if JSON exists in the given array, use it;
            otherwise use all of them (joining into a string)
            </summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="F:VRChat.API.Client.ClientUtils.JsonRegex">
            <summary>
            Provides a case-insensitive check that a provided content type is a known JSON-like content type.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.ClientUtils.IsJsonMime(System.String)">
            <summary>
            Check if the given MIME is a JSON MIME.
            JSON MIME examples:
               application/json
               application/json; charset=UTF8
               APPLICATION/JSON
               application/vnd.company+json
            </summary>
            <param name="mime">MIME</param>
            <returns>Returns True if MIME type is json.</returns>
        </member>
        <member name="T:VRChat.API.Client.Configuration">
            <summary>
            Represents a set of configuration settings
            </summary>
        </member>
        <member name="F:VRChat.API.Client.Configuration.Version">
            <summary>
            Version of the package.
            </summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:VRChat.API.Client.Configuration.ISO8601_DATETIME_FORMAT">
            <summary>
            Identifier for ISO 8601 DateTime Format
            </summary>
            <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        </member>
        <member name="F:VRChat.API.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="F:VRChat.API.Client.Configuration._basePath">
            <summary>
            Defines the base path of the target API server.
            Example: http://localhost:3000/v1/
            </summary>
        </member>
        <member name="F:VRChat.API.Client.Configuration._apiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            This is the key and value comprising the "secret" for accessing an API.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="F:VRChat.API.Client.Configuration._apiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="F:VRChat.API.Client.Configuration._servers">
            <summary>
            Gets or sets the servers defined in the OpenAPI spec.
            </summary>
            <value>The servers</value>
        </member>
        <member name="M:VRChat.API.Client.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.Configuration" /> class
            </summary>
        </member>
        <member name="M:VRChat.API.Client.Configuration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.Configuration" /> class
            </summary>
        </member>
        <member name="P:VRChat.API.Client.Configuration.BasePath">
            <summary>
            Gets or sets the base path for API access.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.Configuration.DefaultHeader">
            <summary>
            Gets or sets the default header.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.Configuration.DefaultHeaders">
            <summary>
            Gets or sets the default headers.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.Configuration.Timeout">
            <summary>
            Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.Configuration.Proxy">
            <summary>
            Gets or sets the proxy
            </summary>
            <value>Proxy.</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.UserAgent">
            <summary>
            Gets or sets the HTTP user agent.
            </summary>
            <value>Http user agent.</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.Username">
            <summary>
            Gets or sets the username (HTTP basic authentication).
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.Password">
            <summary>
            Gets or sets the password (HTTP basic authentication).
            </summary>
            <value>The password.</value>
        </member>
        <member name="M:VRChat.API.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:VRChat.API.Client.Configuration.ClientCertificates">
            <summary>
            Gets or sets certificate collection to be sent with requests.
            </summary>
            <value>X509 Certificate collection.</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.AccessToken">
             <summary>
             Gets or sets the access token for OAuth2 authentication.
            
             This helper property simplifies code generation.
             </summary>
             <value>The access token.</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.TempFolderPath">
            <summary>
            Gets or sets the temporary folder path to store the files downloaded from the server.
            </summary>
            <value>Folder path.</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.ApiKeyPrefix">
             <summary>
             Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            
             Whatever you set here will be prepended to the value defined in AddApiKey.
            
             An example invocation here might be:
             <example>
             ApiKeyPrefix["Authorization"] = "Bearer";
             </example>
             … where ApiKey["Authorization"] would then be used to set the value of your bearer token.
            
             <remarks>
             OAuth2 workflows should set tokens via AccessToken.
             </remarks>
             </summary>
             <value>The prefix of the API key.</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="P:VRChat.API.Client.Configuration.Servers">
            <summary>
            Gets or sets the servers.
            </summary>
            <value>The servers.</value>
        </member>
        <member name="M:VRChat.API.Client.Configuration.GetServerUrl(System.Int32)">
            <summary>
            Returns URL based on server settings without providing values
            for the variables
            </summary>
            <param name="index">Array index of the server settings.</param>
            <return>The server URL.</return>
        </member>
        <member name="M:VRChat.API.Client.Configuration.GetServerUrl(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns URL based on server settings.
            </summary>
            <param name="index">Array index of the server settings.</param>
            <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
            <return>The server URL.</return>
        </member>
        <member name="M:VRChat.API.Client.Configuration.ToDebugReport">
            <summary>
            Returns a string with essential information for debugging.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.Configuration.AddApiKey(System.String,System.String)">
            <summary>
            Add Api Key Header.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
            <returns></returns>
        </member>
        <member name="M:VRChat.API.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
            <summary>
            Sets the API key prefix.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
        </member>
        <member name="M:VRChat.API.Client.Configuration.MergeConfigurations(VRChat.API.Client.IReadableConfiguration,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Merge configurations.
            </summary>
            <param name="first">First configuration.</param>
            <param name="second">Second configuration.</param>
            <return>Merged configuration.</return>
        </member>
        <member name="T:VRChat.API.Client.ExceptionFactory">
            <summary>
            A delegate to ExceptionFactory method
            </summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:VRChat.API.Client.GlobalConfiguration">
            <summary>
            <see cref="T:VRChat.API.Client.GlobalConfiguration"/> provides a compile-time extension point for globally configuring
            API Clients.
            </summary>
            <remarks>
            A customized implementation via partial class may reside in another file and may
            be excluded from automatic generation via a .openapi-generator-ignore file.
            </remarks>
        </member>
        <member name="M:VRChat.API.Client.GlobalConfiguration.#ctor">
            <inheritdoc />
        </member>
        <member name="M:VRChat.API.Client.GlobalConfiguration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="P:VRChat.API.Client.GlobalConfiguration.Instance">
            <summary>
            Gets or sets the default Configuration.
            </summary>
            <value>Configuration.</value>
        </member>
        <member name="T:VRChat.API.Client.HttpMethod">
            <summary>
            Http methods supported by swagger
            </summary>
        </member>
        <member name="F:VRChat.API.Client.HttpMethod.Get">
            <summary>HTTP GET request.</summary>
        </member>
        <member name="F:VRChat.API.Client.HttpMethod.Post">
            <summary>HTTP POST request.</summary>
        </member>
        <member name="F:VRChat.API.Client.HttpMethod.Put">
            <summary>HTTP PUT request.</summary>
        </member>
        <member name="F:VRChat.API.Client.HttpMethod.Delete">
            <summary>HTTP DELETE request.</summary>
        </member>
        <member name="F:VRChat.API.Client.HttpMethod.Head">
            <summary>HTTP HEAD request.</summary>
        </member>
        <member name="F:VRChat.API.Client.HttpMethod.Options">
            <summary>HTTP OPTIONS request.</summary>
        </member>
        <member name="F:VRChat.API.Client.HttpMethod.Patch">
            <summary>HTTP PATCH request.</summary>
        </member>
        <member name="T:VRChat.API.Client.IApiAccessor">
            <summary>
            Represents configuration aspects required to interact with the API endpoints.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.IApiAccessor.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="M:VRChat.API.Client.IApiAccessor.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:VRChat.API.Client.IApiAccessor.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:VRChat.API.Client.IAsynchronousClient">
             <summary>
             Contract for Asynchronous RESTful API interactions.
            
             This interface allows consumers to provide a custom API accessor client.
             </summary>
        </member>
        <member name="M:VRChat.API.Client.IAsynchronousClient.GetAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the GET http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.IAsynchronousClient.PostAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the POST http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.IAsynchronousClient.PutAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the PUT http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.IAsynchronousClient.DeleteAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the DELETE http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.IAsynchronousClient.HeadAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the HEAD http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.IAsynchronousClient.OptionsAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the OPTIONS http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.IAsynchronousClient.PatchAsync``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the PATCH http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="T:VRChat.API.Client.IReadableConfiguration">
            <summary>
            Represents a readable-only configuration contract.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>Access token.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.ApiKey">
            <summary>
            Gets the API key.
            </summary>
            <value>API key.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.ApiKeyPrefix">
            <summary>
            Gets the API key prefix.
            </summary>
            <value>API key prefix.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>Base path.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>Date time format.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <value>Default header.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.DefaultHeaders">
            <summary>
            Gets the default headers.
            </summary>
            <value>Default headers.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.TempFolderPath">
            <summary>
            Gets the temp folder path.
            </summary>
            <value>Temp folder path.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.Timeout">
            <summary>
            Gets the HTTP connection timeout (in milliseconds)
            </summary>
            <value>HTTP connection timeout.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.Proxy">
            <summary>
            Gets the proxy.
            </summary>
            <value>Proxy.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>User agent.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
            <value>Username.</value>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="M:VRChat.API.Client.IReadableConfiguration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:VRChat.API.Client.IReadableConfiguration.ClientCertificates">
            <summary>
            Gets certificate collection to be sent with requests.
            </summary>
            <value>X509 Certificate collection.</value>
        </member>
        <member name="T:VRChat.API.Client.ISynchronousClient">
             <summary>
             Contract for Synchronous RESTful API interactions.
            
             This interface allows consumers to provide a custom API accessor client.
             </summary>
        </member>
        <member name="M:VRChat.API.Client.ISynchronousClient.Get``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the GET http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.ISynchronousClient.Post``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the POST http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.ISynchronousClient.Put``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the PUT http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.ISynchronousClient.Delete``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the DELETE http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.ISynchronousClient.Head``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the HEAD http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.ISynchronousClient.Options``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the OPTIONS http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:VRChat.API.Client.ISynchronousClient.Patch``1(System.String,VRChat.API.Client.RequestOptions,VRChat.API.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the PATCH http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:VRChat.API.Client.ApiResponse`1"/></returns>
        </member>
        <member name="T:VRChat.API.Client.Multimap`2">
            <summary>
            A dictionary in which one key has many associated values.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value associated with the key.</typeparam>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.#ctor">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor with comparer.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.GetEnumerator">
            <summary>
            To get the enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            To get the enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Add values to Multimap
            </summary>
            <param name="item">Key value pair</param>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.Add(VRChat.API.Client.Multimap{`0,`1})">
            <summary>
            Add Multimap to Multimap
            </summary>
            <param name="multimap">Multimap</param>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.Clear">
            <summary>
            Clear Multimap
            </summary>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Determines whether Multimap contains the specified item.
            </summary>
            <param name="item">Key value pair</param>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
            <returns>true if the Multimap contains the item; otherwise, false.</returns>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
             Copy items of the Multimap to an array,
                starting at a particular array index.
            </summary>
            <param name="array">The array that is the destination of the items copied
                from Multimap. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Removes the specified item from the Multimap.
            </summary>
            <param name="item">Key value pair</param>
            <returns>true if the item is successfully removed; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
        </member>
        <member name="P:VRChat.API.Client.Multimap`2.Count">
            <summary>
            Gets the number of items contained in the Multimap.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.Multimap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the Multimap is read-only.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Adds an item with the provided key and value to the Multimap.
            </summary>
            <param name="key">The object to use as the key of the item to add.</param>
            <param name="value">The object to use as the value of the item to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when couldn't add the value to Multimap.</exception>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.ContainsKey(`0)">
            <summary>
            Determines whether the Multimap contains an item with the specified key.
            </summary>
            <param name="key">The key to locate in the Multimap.</param>
            <returns>true if the Multimap contains an item with
                the key; otherwise, false.</returns>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.Remove(`0)">
            <summary>
            Removes item with the specified key from the Multimap.
            </summary>
            <param name="key">The key to locate in the Multimap.</param>
            <returns>true if the item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.</param>
            <returns> true if the object that implements Multimap contains
                an item with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:VRChat.API.Client.Multimap`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <param name="key">The key of the item to get or set.</param>
            <returns>The value of the specified key.</returns>
        </member>
        <member name="P:VRChat.API.Client.Multimap`2.Keys">
            <summary>
            Gets a System.Collections.Generic.ICollection containing the keys of the Multimap.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.Multimap`2.Values">
            <summary>
            Gets a System.Collections.Generic.ICollection containing the values of the Multimap.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.CopyTo(System.Array,System.Int32)">
            <summary>
             Copy the items of the Multimap to an System.Array,
                starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the items copied
                from Multimap. The System.Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.Add(`0,`1)">
            <summary>
            Adds an item with the provided key and value to the Multimap.
            </summary>
            <param name="key">The object to use as the key of the item to add.</param>
            <param name="value">The object to use as the value of the item to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when couldn't add value to Multimap.</exception>
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.TryRemove(`0,System.Collections.Generic.IList{`1}@)">
            Helper method to encapsulate generator differences between dictionary types.
        </member>
        <member name="M:VRChat.API.Client.Multimap`2.TryAdd(`0,System.Collections.Generic.IList{`1})">
            Helper method to encapsulate generator differences between dictionary types.
        </member>
        <member name="T:VRChat.API.Client.OpenAPIDateConverter">
            <summary>
            Formatter for 'date' openapi formats ss defined by full-date - RFC3339
            see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
            </summary>
        </member>
        <member name="M:VRChat.API.Client.OpenAPIDateConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Client.OpenAPIDateConverter" /> class.
            </summary>
        </member>
        <member name="T:VRChat.API.Client.RequestOptions">
            <summary>
            A container for generalized request inputs. This type allows consumers to extend the request functionality
            by abstracting away from the default (built-in) request framework (e.g. RestSharp).
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RequestOptions.PathParameters">
            <summary>
            Parameters to be bound to path parts of the Request's URL
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RequestOptions.QueryParameters">
            <summary>
            Query parameters to be applied to the request.
            Keys may have 1 or more values associated.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RequestOptions.HeaderParameters">
            <summary>
            Header parameters to be applied to to the request.
            Keys may have 1 or more values associated.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RequestOptions.FormParameters">
            <summary>
            Form parameters to be sent along with the request.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RequestOptions.FileParameters">
            <summary>
            File parameters to be sent along with the request.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RequestOptions.Cookies">
            <summary>
            Cookies to be sent along with the request.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RequestOptions.Data">
            <summary>
            Any data associated with a request body.
            </summary>
        </member>
        <member name="M:VRChat.API.Client.RequestOptions.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:VRChat.API.Client.RequestOptions"/>
            </summary>
        </member>
        <member name="T:VRChat.API.Client.RetryConfiguration">
            <summary>
            Configuration class to set the polly retry policies to be applied to the requests.
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RetryConfiguration.RetryPolicy">
            <summary>
            Retry policy
            </summary>
        </member>
        <member name="P:VRChat.API.Client.RetryConfiguration.AsyncRetryPolicy">
            <summary>
            Async retry policy
            </summary>
        </member>
        <member name="T:VRChat.API.Model.AbstractOpenAPISchema">
            <summary>
             Abstract base class for oneOf, anyOf schemas in the OpenAPI specification
            </summary>
        </member>
        <member name="F:VRChat.API.Model.AbstractOpenAPISchema.SerializerSettings">
            <summary>
             Custom JSON serializer
            </summary>
        </member>
        <member name="F:VRChat.API.Model.AbstractOpenAPISchema.AdditionalPropertiesSerializerSettings">
            <summary>
             Custom JSON serializer for objects with additional properties
            </summary>
        </member>
        <member name="P:VRChat.API.Model.AbstractOpenAPISchema.ActualInstance">
            <summary>
            Gets or Sets the actual instance
            </summary>
        </member>
        <member name="P:VRChat.API.Model.AbstractOpenAPISchema.IsNullable">
            <summary>
            Gets or Sets IsNullable to indicate whether the instance is nullable
            </summary>
        </member>
        <member name="P:VRChat.API.Model.AbstractOpenAPISchema.SchemaType">
            <summary>
            Gets or Sets the schema type, which can be either `oneOf` or `anyOf`
            </summary>
        </member>
        <member name="M:VRChat.API.Model.AbstractOpenAPISchema.ToJson">
            <summary>
            Converts the instance into JSON string.
            </summary>
        </member>
        <member name="T:VRChat.API.Model.AddFavoriteRequest">
            <summary>
            AddFavoriteRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.AddFavoriteRequest.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:VRChat.API.Model.AddFavoriteRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.AddFavoriteRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.AddFavoriteRequest.#ctor(VRChat.API.Model.FavoriteType,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.AddFavoriteRequest" /> class.
            </summary>
            <param name="type">type (required).</param>
            <param name="favoriteId">Must be either AvatarID, WorldID or UserID. (required).</param>
            <param name="tags">Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all. (required).</param>
        </member>
        <member name="P:VRChat.API.Model.AddFavoriteRequest.FavoriteId">
            <summary>
            Must be either AvatarID, WorldID or UserID.
            </summary>
            <value>Must be either AvatarID, WorldID or UserID.</value>
        </member>
        <member name="P:VRChat.API.Model.AddFavoriteRequest.Tags">
            <summary>
            Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all.
            </summary>
            <value>Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all.</value>
        </member>
        <member name="M:VRChat.API.Model.AddFavoriteRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.AddFavoriteRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.AddFavoriteRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.AddFavoriteRequest.Equals(VRChat.API.Model.AddFavoriteRequest)">
            <summary>
            Returns true if AddFavoriteRequest instances are equal
            </summary>
            <param name="input">Instance of AddFavoriteRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.AddFavoriteRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.AddFavoriteRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.APIConfig">
            <summary>
            APIConfig
            </summary>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DeploymentGroup">
            <summary>
            Gets or Sets DeploymentGroup
            </summary>
        </member>
        <member name="M:VRChat.API.Model.APIConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.APIConfig" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.APIConfig.#ctor(System.Boolean,System.Boolean,System.String,System.Collections.Generic.List{VRChat.API.Model.PublicAnnouncement},System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.String,VRChat.API.Model.DeploymentGroup,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,VRChat.API.Model.DownloadURLList,System.Collections.Generic.List{VRChat.API.Model.DynamicContentRow},VRChat.API.Model.APIEventConfig,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Collections.Generic.List{System.String},System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.APIConfig" /> class.
            </summary>
            <param name="voiceEnableDegradation">Unknown, probably voice optimization testing (required) (default to false).</param>
            <param name="voiceEnableReceiverLimiting">Unknown, probably voice optimization testing (required) (default to true).</param>
            <param name="address">VRChat&#39;s office address (required).</param>
            <param name="announcements">Public Announcements (required).</param>
            <param name="apiKey">apiKey to be used for all other requests (required).</param>
            <param name="appName">Game name (required) (default to &quot;VrChat&quot;).</param>
            <param name="buildVersionTag">Build tag of the API server (required).</param>
            <param name="clientApiKey">apiKey to be used for all other requests (required).</param>
            <param name="clientBPSCeiling">Unknown (required) (default to 18432).</param>
            <param name="clientDisconnectTimeout">Unknown (required) (default to 30000).</param>
            <param name="clientReservedPlayerBPS">Unknown (required) (default to 7168).</param>
            <param name="clientSentCountAllowance">Unknown (required) (default to 15).</param>
            <param name="contactEmail">VRChat&#39;s contact email (required).</param>
            <param name="copyrightEmail">VRChat&#39;s copyright-issues-related email (required).</param>
            <param name="currentTOSVersion">Current version number of the Terms of Service (required).</param>
            <param name="defaultAvatar">defaultAvatar (required).</param>
            <param name="deploymentGroup">deploymentGroup (required).</param>
            <param name="devAppVersionStandalone">Version number for game development build (required).</param>
            <param name="devDownloadLinkWindows">Developer Download link (required).</param>
            <param name="devSdkUrl">Link to download the development SDK, use downloadUrls instead (required).</param>
            <param name="devSdkVersion">Version of the development SDK (required).</param>
            <param name="devServerVersionStandalone">Version number for server development build (required).</param>
            <param name="disCountdown">Unknown, \&quot;dis\&quot; maybe for disconnect? (required).</param>
            <param name="disableAvatarCopying">Toggles if copying avatars should be disabled (required) (default to false).</param>
            <param name="disableAvatarGating">Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag (required) (default to false).</param>
            <param name="disableCommunityLabs">Toggles if the Community Labs should be disabled (required) (default to false).</param>
            <param name="disableCommunityLabsPromotion">Toggles if promotion out of Community Labs should be disabled (required) (default to false).</param>
            <param name="disableEmail">Unknown (required) (default to false).</param>
            <param name="disableEventStream">Toggles if Analytics should be disabled. (required) (default to false).</param>
            <param name="disableFeedbackGating">Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag. (required) (default to false).</param>
            <param name="disableFrontendBuilds">Unknown, probably toggles compilation of frontend web builds? So internal flag? (required) (default to false).</param>
            <param name="disableHello">Unknown (required) (default to false).</param>
            <param name="disableOculusSubs">Toggles if signing up for Subscriptions in Oculus is disabled or not. (required) (default to false).</param>
            <param name="disableRegistration">Toggles if new user account registration should be disabled. (required) (default to false).</param>
            <param name="disableSteamNetworking">Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead. (required) (default to true).</param>
            <param name="disableTwoFactorAuth">Toggles if 2FA should be disabled. (required) (default to false).</param>
            <param name="disableUdon">Toggles if Udon should be universally disabled in-game. (required) (default to false).</param>
            <param name="disableUpgradeAccount">Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled. (required) (default to false).</param>
            <param name="downloadLinkWindows">Download link for game on the Oculus Rift website. (required).</param>
            <param name="downloadUrls">downloadUrls (required).</param>
            <param name="dynamicWorldRows">Array of DynamicWorldRow objects, used by the game to display the list of world rows (required).</param>
            <param name="events">events (required).</param>
            <param name="gearDemoRoomId">Unknown (required).</param>
            <param name="homeWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="homepageRedirectTarget">Redirect target if you try to open the base API domain in your browser (required) (default to &quot;https://hello.vrchat.com&quot;).</param>
            <param name="hubWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="jobsEmail">VRChat&#39;s job application email (required).</param>
            <param name="messageOfTheDay">MOTD (required).</param>
            <param name="moderationEmail">VRChat&#39;s moderation related email (required).</param>
            <param name="moderationQueryPeriod">Unknown (required).</param>
            <param name="notAllowedToSelectAvatarInPrivateWorldMessage">Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds (required).</param>
            <param name="plugin">Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance (required).</param>
            <param name="releaseAppVersionStandalone">Version number for game release build (required).</param>
            <param name="releaseSdkUrl">Link to download the release SDK (required).</param>
            <param name="releaseSdkVersion">Version of the release SDK (required).</param>
            <param name="releaseServerVersionStandalone">Version number for server release build (required).</param>
            <param name="sdkDeveloperFaqUrl">Link to the developer FAQ (required).</param>
            <param name="sdkDiscordUrl">Link to the official VRChat Discord (required).</param>
            <param name="sdkNotAllowedToPublishMessage">Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet (required).</param>
            <param name="sdkUnityVersion">Unity version supported by the SDK (required).</param>
            <param name="serverName">Server name of the API server currently responding (required).</param>
            <param name="supportEmail">VRChat&#39;s support email (required).</param>
            <param name="timeOutWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="tutorialWorldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="updateRateMsMaximum">Unknown (required).</param>
            <param name="updateRateMsMinimum">Unknown (required).</param>
            <param name="updateRateMsNormal">Unknown (required).</param>
            <param name="updateRateMsUdonManual">Unknown (required).</param>
            <param name="uploadAnalysisPercent">Unknown (required).</param>
            <param name="urlList">List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game (required).</param>
            <param name="useReliableUdpForVoice">Unknown (required) (default to false).</param>
            <param name="userUpdatePeriod">Unknown (required).</param>
            <param name="userVerificationDelay">Unknown (required).</param>
            <param name="userVerificationRetry">Unknown (required).</param>
            <param name="userVerificationTimeout">Unknown (required).</param>
            <param name="viveWindowsUrl">Download link for game on the Steam website. (required).</param>
            <param name="whiteListedAssetUrls">List of allowed URLs that are allowed to host avatar assets (required).</param>
            <param name="worldUpdatePeriod">Unknown (required).</param>
            <param name="youtubedlHash">Currently used youtube-dl.exe hash in SHA-256-delimited format (required).</param>
            <param name="youtubedlVersion">Currently used youtube-dl.exe version (required).</param>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.VoiceEnableDegradation">
            <summary>
            Unknown, probably voice optimization testing
            </summary>
            <value>Unknown, probably voice optimization testing</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.VoiceEnableReceiverLimiting">
            <summary>
            Unknown, probably voice optimization testing
            </summary>
            <value>Unknown, probably voice optimization testing</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.Address">
            <summary>
            VRChat&#39;s office address
            </summary>
            <value>VRChat&#39;s office address</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.Announcements">
            <summary>
            Public Announcements
            </summary>
            <value>Public Announcements</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ApiKey">
            <summary>
            apiKey to be used for all other requests
            </summary>
            <value>apiKey to be used for all other requests</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.AppName">
            <summary>
            Game name
            </summary>
            <value>Game name</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.BuildVersionTag">
            <summary>
            Build tag of the API server
            </summary>
            <value>Build tag of the API server</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ClientApiKey">
            <summary>
            apiKey to be used for all other requests
            </summary>
            <value>apiKey to be used for all other requests</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ClientBPSCeiling">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ClientDisconnectTimeout">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ClientReservedPlayerBPS">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ClientSentCountAllowance">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ContactEmail">
            <summary>
            VRChat&#39;s contact email
            </summary>
            <value>VRChat&#39;s contact email</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.CopyrightEmail">
            <summary>
            VRChat&#39;s copyright-issues-related email
            </summary>
            <value>VRChat&#39;s copyright-issues-related email</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.CurrentTOSVersion">
            <summary>
            Current version number of the Terms of Service
            </summary>
            <value>Current version number of the Terms of Service</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DefaultAvatar">
            <summary>
            Gets or Sets DefaultAvatar
            </summary>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DevAppVersionStandalone">
            <summary>
            Version number for game development build
            </summary>
            <value>Version number for game development build</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DevDownloadLinkWindows">
            <summary>
            Developer Download link
            </summary>
            <value>Developer Download link</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DevSdkUrl">
            <summary>
            Link to download the development SDK, use downloadUrls instead
            </summary>
            <value>Link to download the development SDK, use downloadUrls instead</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DevSdkVersion">
            <summary>
            Version of the development SDK
            </summary>
            <value>Version of the development SDK</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DevServerVersionStandalone">
            <summary>
            Version number for server development build
            </summary>
            <value>Version number for server development build</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisCountdown">
            <summary>
            Unknown, \&quot;dis\&quot; maybe for disconnect?
            </summary>
            <value>Unknown, \&quot;dis\&quot; maybe for disconnect?</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableAvatarCopying">
            <summary>
            Toggles if copying avatars should be disabled
            </summary>
            <value>Toggles if copying avatars should be disabled</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableAvatarGating">
            <summary>
            Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag
            </summary>
            <value>Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the &#x60;system_avatar_access&#x60; Tag or &#x60;admin_avatar_access&#x60; Tag</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableCommunityLabs">
            <summary>
            Toggles if the Community Labs should be disabled
            </summary>
            <value>Toggles if the Community Labs should be disabled</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableCommunityLabsPromotion">
            <summary>
            Toggles if promotion out of Community Labs should be disabled
            </summary>
            <value>Toggles if promotion out of Community Labs should be disabled</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableEmail">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableEventStream">
            <summary>
            Toggles if Analytics should be disabled.
            </summary>
            <value>Toggles if Analytics should be disabled.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableFeedbackGating">
            <summary>
            Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag.
            </summary>
            <value>Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the &#x60;system_feedback_access&#x60; Tag.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableFrontendBuilds">
            <summary>
            Unknown, probably toggles compilation of frontend web builds? So internal flag?
            </summary>
            <value>Unknown, probably toggles compilation of frontend web builds? So internal flag?</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableHello">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableOculusSubs">
            <summary>
            Toggles if signing up for Subscriptions in Oculus is disabled or not.
            </summary>
            <value>Toggles if signing up for Subscriptions in Oculus is disabled or not.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableRegistration">
            <summary>
            Toggles if new user account registration should be disabled.
            </summary>
            <value>Toggles if new user account registration should be disabled.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableSteamNetworking">
            <summary>
            Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.
            </summary>
            <value>Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableTwoFactorAuth">
            <summary>
            Toggles if 2FA should be disabled.
            </summary>
            <value>Toggles if 2FA should be disabled.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableUdon">
            <summary>
            Toggles if Udon should be universally disabled in-game.
            </summary>
            <value>Toggles if Udon should be universally disabled in-game.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DisableUpgradeAccount">
            <summary>
            Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled.
            </summary>
            <value>Toggles if account upgrading \&quot;linking with Steam/Oculus\&quot; should be disabled.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DownloadLinkWindows">
            <summary>
            Download link for game on the Oculus Rift website.
            </summary>
            <value>Download link for game on the Oculus Rift website.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DownloadUrls">
            <summary>
            Gets or Sets DownloadUrls
            </summary>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.DynamicWorldRows">
            <summary>
            Array of DynamicWorldRow objects, used by the game to display the list of world rows
            </summary>
            <value>Array of DynamicWorldRow objects, used by the game to display the list of world rows</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.Events">
            <summary>
            Gets or Sets Events
            </summary>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.GearDemoRoomId">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.HomeWorldId">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.HomepageRedirectTarget">
            <summary>
            Redirect target if you try to open the base API domain in your browser
            </summary>
            <value>Redirect target if you try to open the base API domain in your browser</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.HubWorldId">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.JobsEmail">
            <summary>
            VRChat&#39;s job application email
            </summary>
            <value>VRChat&#39;s job application email</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.MessageOfTheDay">
            <summary>
            MOTD
            </summary>
            <value>MOTD</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ModerationEmail">
            <summary>
            VRChat&#39;s moderation related email
            </summary>
            <value>VRChat&#39;s moderation related email</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ModerationQueryPeriod">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.NotAllowedToSelectAvatarInPrivateWorldMessage">
            <summary>
            Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds
            </summary>
            <value>Used in-game to notify a user they aren&#39;t allowed to select avatars in private worlds</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.Plugin">
            <summary>
            Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance
            </summary>
            <value>Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ReleaseAppVersionStandalone">
            <summary>
            Version number for game release build
            </summary>
            <value>Version number for game release build</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ReleaseSdkUrl">
            <summary>
            Link to download the release SDK
            </summary>
            <value>Link to download the release SDK</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ReleaseSdkVersion">
            <summary>
            Version of the release SDK
            </summary>
            <value>Version of the release SDK</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ReleaseServerVersionStandalone">
            <summary>
            Version number for server release build
            </summary>
            <value>Version number for server release build</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.SdkDeveloperFaqUrl">
            <summary>
            Link to the developer FAQ
            </summary>
            <value>Link to the developer FAQ</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.SdkDiscordUrl">
            <summary>
            Link to the official VRChat Discord
            </summary>
            <value>Link to the official VRChat Discord</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.SdkNotAllowedToPublishMessage">
            <summary>
            Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet
            </summary>
            <value>Used in the SDK to notify a user they aren&#39;t allowed to upload avatars/worlds yet</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.SdkUnityVersion">
            <summary>
            Unity version supported by the SDK
            </summary>
            <value>Unity version supported by the SDK</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ServerName">
            <summary>
            Server name of the API server currently responding
            </summary>
            <value>Server name of the API server currently responding</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.SupportEmail">
            <summary>
            VRChat&#39;s support email
            </summary>
            <value>VRChat&#39;s support email</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.TimeOutWorldId">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.TutorialWorldId">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UpdateRateMsMaximum">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UpdateRateMsMinimum">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UpdateRateMsNormal">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UpdateRateMsUdonManual">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UploadAnalysisPercent">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UrlList">
            <summary>
            List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game
            </summary>
            <value>List of allowed URLs that bypass the \&quot;Allow untrusted URL&#39;s\&quot; setting in-game</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UseReliableUdpForVoice">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UserUpdatePeriod">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UserVerificationDelay">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UserVerificationRetry">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.UserVerificationTimeout">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.ViveWindowsUrl">
            <summary>
            Download link for game on the Steam website.
            </summary>
            <value>Download link for game on the Steam website.</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.WhiteListedAssetUrls">
            <summary>
            List of allowed URLs that are allowed to host avatar assets
            </summary>
            <value>List of allowed URLs that are allowed to host avatar assets</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.WorldUpdatePeriod">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.YoutubedlHash">
            <summary>
            Currently used youtube-dl.exe hash in SHA-256-delimited format
            </summary>
            <value>Currently used youtube-dl.exe hash in SHA-256-delimited format</value>
        </member>
        <member name="P:VRChat.API.Model.APIConfig.YoutubedlVersion">
            <summary>
            Currently used youtube-dl.exe version
            </summary>
            <value>Currently used youtube-dl.exe version</value>
        </member>
        <member name="M:VRChat.API.Model.APIConfig.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.APIConfig.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.APIConfig.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.APIConfig.Equals(VRChat.API.Model.APIConfig)">
            <summary>
            Returns true if APIConfig instances are equal
            </summary>
            <param name="input">Instance of APIConfig to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.APIConfig.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.APIConfig.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.APIEventConfig">
            <summary>
            APIEventConfig
            </summary>
        </member>
        <member name="M:VRChat.API.Model.APIEventConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.APIEventConfig" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.APIEventConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.APIEventConfig" /> class.
            </summary>
            <param name="distanceClose">Unknown (required).</param>
            <param name="distanceFactor">Unknown (required).</param>
            <param name="distanceFar">Unknown (required).</param>
            <param name="groupDistance">Unknown (required).</param>
            <param name="maximumBunchSize">Unknown (required).</param>
            <param name="notVisibleFactor">Unknown (required).</param>
            <param name="playerOrderBucketSize">Unknown (required).</param>
            <param name="playerOrderFactor">Unknown (required).</param>
            <param name="slowUpdateFactorThreshold">Unknown (required).</param>
            <param name="viewSegmentLength">Unknown (required).</param>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.DistanceClose">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.DistanceFactor">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.DistanceFar">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.GroupDistance">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.MaximumBunchSize">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.NotVisibleFactor">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.PlayerOrderBucketSize">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.PlayerOrderFactor">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.SlowUpdateFactorThreshold">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="P:VRChat.API.Model.APIEventConfig.ViewSegmentLength">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="M:VRChat.API.Model.APIEventConfig.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.APIEventConfig.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.APIEventConfig.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.APIEventConfig.Equals(VRChat.API.Model.APIEventConfig)">
            <summary>
            Returns true if APIEventConfig instances are equal
            </summary>
            <param name="input">Instance of APIEventConfig to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.APIEventConfig.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.APIEventConfig.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.APIHealth">
            <summary>
            APIHealth
            </summary>
        </member>
        <member name="M:VRChat.API.Model.APIHealth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.APIHealth" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.APIHealth.#ctor(System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.APIHealth" /> class.
            </summary>
            <param name="ok">ok (required).</param>
            <param name="serverName">serverName (required).</param>
            <param name="buildVersionTag">buildVersionTag (required).</param>
        </member>
        <member name="P:VRChat.API.Model.APIHealth.Ok">
            <summary>
            Gets or Sets Ok
            </summary>
        </member>
        <member name="P:VRChat.API.Model.APIHealth.ServerName">
            <summary>
            Gets or Sets ServerName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.APIHealth.BuildVersionTag">
            <summary>
            Gets or Sets BuildVersionTag
            </summary>
        </member>
        <member name="M:VRChat.API.Model.APIHealth.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.APIHealth.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.APIHealth.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.APIHealth.Equals(VRChat.API.Model.APIHealth)">
            <summary>
            Returns true if APIHealth instances are equal
            </summary>
            <param name="input">Instance of APIHealth to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.APIHealth.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.APIHealth.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Avatar">
            <summary>
            Avatar
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.ReleaseStatus">
            <summary>
            Gets or Sets ReleaseStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Avatar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Avatar" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Avatar.#ctor(System.String,System.Object,System.String,System.String,System.DateTime,System.String,System.Boolean,System.String,System.String,System.String,VRChat.API.Model.ReleaseStatus,System.Collections.Generic.List{System.String},System.String,System.String,VRChat.API.Model.AvatarUnityPackageUrlObject,System.Collections.Generic.List{VRChat.API.Model.UnityPackage},System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Avatar" /> class.
            </summary>
            <param name="assetUrl">Not present from general serach &#x60;/avatars&#x60;, only on specific requests &#x60;/avatars/{avatarId}&#x60;..</param>
            <param name="assetUrlObject">Not present from general serach &#x60;/avatars&#x60;, only on specific requests &#x60;/avatars/{avatarId}&#x60;. **Deprecation:** &#x60;Object&#x60; has unknown usage/fields, and is always empty. Use normal &#x60;Url&#x60; field instead..</param>
            <param name="authorId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="authorName">authorName (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="description">description (required).</param>
            <param name="featured">featured (required) (default to false).</param>
            <param name="id">id (required).</param>
            <param name="imageUrl">imageUrl (required).</param>
            <param name="name">name (required).</param>
            <param name="releaseStatus">releaseStatus (required).</param>
            <param name="tags">tags (required).</param>
            <param name="thumbnailImageUrl">thumbnailImageUrl (required).</param>
            <param name="unityPackageUrl">unityPackageUrl (required).</param>
            <param name="unityPackageUrlObject">unityPackageUrlObject (required).</param>
            <param name="unityPackages">unityPackages (required).</param>
            <param name="updatedAt">updatedAt (required).</param>
            <param name="version">version (required) (default to 0).</param>
        </member>
        <member name="P:VRChat.API.Model.Avatar.AssetUrl">
            <summary>
            Not present from general serach &#x60;/avatars&#x60;, only on specific requests &#x60;/avatars/{avatarId}&#x60;.
            </summary>
            <value>Not present from general serach &#x60;/avatars&#x60;, only on specific requests &#x60;/avatars/{avatarId}&#x60;.</value>
        </member>
        <member name="P:VRChat.API.Model.Avatar.AssetUrlObject">
            <summary>
            Not present from general serach &#x60;/avatars&#x60;, only on specific requests &#x60;/avatars/{avatarId}&#x60;. **Deprecation:** &#x60;Object&#x60; has unknown usage/fields, and is always empty. Use normal &#x60;Url&#x60; field instead.
            </summary>
            <value>Not present from general serach &#x60;/avatars&#x60;, only on specific requests &#x60;/avatars/{avatarId}&#x60;. **Deprecation:** &#x60;Object&#x60; has unknown usage/fields, and is always empty. Use normal &#x60;Url&#x60; field instead.</value>
        </member>
        <member name="P:VRChat.API.Model.Avatar.AuthorId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.Avatar.AuthorName">
            <summary>
            Gets or Sets AuthorName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.Featured">
            <summary>
            Gets or Sets Featured
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.ThumbnailImageUrl">
            <summary>
            Gets or Sets ThumbnailImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.UnityPackageUrl">
            <summary>
            Gets or Sets UnityPackageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.UnityPackageUrlObject">
            <summary>
            Gets or Sets UnityPackageUrlObject
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.UnityPackages">
            <summary>
            Gets or Sets UnityPackages
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Avatar._Version">
            <summary>
            Gets or Sets _Version
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Avatar.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Avatar.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Avatar.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Avatar.Equals(VRChat.API.Model.Avatar)">
            <summary>
            Returns true if Avatar instances are equal
            </summary>
            <param name="input">Instance of Avatar to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Avatar.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Avatar.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.AvatarUnityPackageUrlObject">
            <summary>
            **Deprecation:** &#x60;Object&#x60; has unknown usage/fields, and is always empty. Use normal &#x60;Url&#x60; field instead.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.AvatarUnityPackageUrlObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.AvatarUnityPackageUrlObject" /> class.
            </summary>
            <param name="unityPackageUrl">unityPackageUrl.</param>
        </member>
        <member name="P:VRChat.API.Model.AvatarUnityPackageUrlObject.UnityPackageUrl">
            <summary>
            Gets or Sets UnityPackageUrl
            </summary>
        </member>
        <member name="M:VRChat.API.Model.AvatarUnityPackageUrlObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.AvatarUnityPackageUrlObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.AvatarUnityPackageUrlObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.AvatarUnityPackageUrlObject.Equals(VRChat.API.Model.AvatarUnityPackageUrlObject)">
            <summary>
            Returns true if AvatarUnityPackageUrlObject instances are equal
            </summary>
            <param name="input">Instance of AvatarUnityPackageUrlObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.AvatarUnityPackageUrlObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.AvatarUnityPackageUrlObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.CreateAvatarRequest">
            <summary>
            CreateAvatarRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest.ReleaseStatus">
            <summary>
            Gets or Sets ReleaseStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateAvatarRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CreateAvatarRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateAvatarRequest.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Nullable{VRChat.API.Model.ReleaseStatus},System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CreateAvatarRequest" /> class.
            </summary>
            <param name="assetUrl">assetUrl.</param>
            <param name="id">id.</param>
            <param name="name">name (required).</param>
            <param name="description">description.</param>
            <param name="tags">tags.</param>
            <param name="imageUrl">imageUrl (required).</param>
            <param name="releaseStatus">releaseStatus.</param>
            <param name="version">version (default to 1M).</param>
            <param name="unityPackageUrl">unityPackageUrl.</param>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest.AssetUrl">
            <summary>
            Gets or Sets AssetUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest._Version">
            <summary>
            Gets or Sets _Version
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateAvatarRequest.UnityPackageUrl">
            <summary>
            Gets or Sets UnityPackageUrl
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateAvatarRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateAvatarRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateAvatarRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateAvatarRequest.Equals(VRChat.API.Model.CreateAvatarRequest)">
            <summary>
            Returns true if CreateAvatarRequest instances are equal
            </summary>
            <param name="input">Instance of CreateAvatarRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateAvatarRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateAvatarRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.CreateFileRequest">
            <summary>
            CreateFileRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateFileRequest.MimeType">
            <summary>
            Gets or Sets MimeType
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateFileRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CreateFileRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateFileRequest.#ctor(System.String,VRChat.API.Model.MIMEType,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CreateFileRequest" /> class.
            </summary>
            <param name="name">name (required).</param>
            <param name="mimeType">mimeType (required).</param>
            <param name="extension">extension (required).</param>
            <param name="tags">tags.</param>
        </member>
        <member name="P:VRChat.API.Model.CreateFileRequest.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateFileRequest.Extension">
            <summary>
            Gets or Sets Extension
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateFileRequest.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateFileRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileRequest.Equals(VRChat.API.Model.CreateFileRequest)">
            <summary>
            Returns true if CreateFileRequest instances are equal
            </summary>
            <param name="input">Instance of CreateFileRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.CreateFileVersionRequest">
            <summary>
            CreateFileVersionRequest
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateFileVersionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CreateFileVersionRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateFileVersionRequest.#ctor(System.String,System.Decimal,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CreateFileVersionRequest" /> class.
            </summary>
            <param name="signatureMd5">signatureMd5 (required).</param>
            <param name="signatureSizeInBytes">signatureSizeInBytes (required).</param>
            <param name="fileMd5">fileMd5.</param>
            <param name="fileSizeInBytes">fileSizeInBytes.</param>
        </member>
        <member name="P:VRChat.API.Model.CreateFileVersionRequest.SignatureMd5">
            <summary>
            Gets or Sets SignatureMd5
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateFileVersionRequest.SignatureSizeInBytes">
            <summary>
            Gets or Sets SignatureSizeInBytes
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateFileVersionRequest.FileMd5">
            <summary>
            Gets or Sets FileMd5
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateFileVersionRequest.FileSizeInBytes">
            <summary>
            Gets or Sets FileSizeInBytes
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateFileVersionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileVersionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileVersionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileVersionRequest.Equals(VRChat.API.Model.CreateFileVersionRequest)">
            <summary>
            Returns true if CreateFileVersionRequest instances are equal
            </summary>
            <param name="input">Instance of CreateFileVersionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileVersionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateFileVersionRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.CreateWorldRequest">
            <summary>
            CreateWorldRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.ReleaseStatus">
            <summary>
            Gets or Sets ReleaseStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateWorldRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CreateWorldRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateWorldRequest.#ctor(System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Nullable{VRChat.API.Model.ReleaseStatus},System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CreateWorldRequest" /> class.
            </summary>
            <param name="assetUrl">assetUrl (required).</param>
            <param name="assetVersion">assetVersion.</param>
            <param name="authorId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
            <param name="authorName">authorName.</param>
            <param name="capacity">capacity.</param>
            <param name="description">description.</param>
            <param name="id">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user..</param>
            <param name="imageUrl">imageUrl (required).</param>
            <param name="name">name (required).</param>
            <param name="platform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;..</param>
            <param name="releaseStatus">releaseStatus.</param>
            <param name="tags">tags.</param>
            <param name="unityPackageUrl">unityPackageUrl.</param>
            <param name="unityVersion">unityVersion (default to &quot;5.3.4p1&quot;).</param>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.AssetUrl">
            <summary>
            Gets or Sets AssetUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.AssetVersion">
            <summary>
            Gets or Sets AssetVersion
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.AuthorId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.AuthorName">
            <summary>
            Gets or Sets AuthorName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.Capacity">
            <summary>
            Gets or Sets Capacity
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.Id">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.Platform">
            <summary>
            This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
            </summary>
            <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.UnityPackageUrl">
            <summary>
            Gets or Sets UnityPackageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CreateWorldRequest.UnityVersion">
            <summary>
            Gets or Sets UnityVersion
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CreateWorldRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateWorldRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateWorldRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateWorldRequest.Equals(VRChat.API.Model.CreateWorldRequest)">
            <summary>
            Returns true if CreateWorldRequest instances are equal
            </summary>
            <param name="input">Instance of CreateWorldRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateWorldRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.CreateWorldRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.CurrentUser">
            <summary>
            CurrentUser
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.DeveloperType">
            <summary>
            Gets or Sets DeveloperType
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.State">
            <summary>
            Gets or Sets State
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CurrentUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CurrentUser" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CurrentUser.#ctor(System.Int32,System.Nullable{System.DateTime},System.Collections.Generic.List{System.String},System.Boolean,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.DateTime,VRChat.API.Model.DeveloperType,System.String,System.Boolean,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.DateTime,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{VRChat.API.Model.PastDisplayName},System.String,VRChat.API.Model.UserState,VRChat.API.Model.UserStatus,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.Object,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.CurrentUser" /> class.
            </summary>
            <param name="acceptedTOSVersion">acceptedTOSVersion (required).</param>
            <param name="accountDeletionDate">accountDeletionDate.</param>
            <param name="activeFriends">activeFriends.</param>
            <param name="allowAvatarCopying">allowAvatarCopying (required).</param>
            <param name="bio">bio (required).</param>
            <param name="bioLinks">bioLinks (required).</param>
            <param name="currentAvatar">currentAvatar (required).</param>
            <param name="currentAvatarAssetUrl">currentAvatarAssetUrl (required).</param>
            <param name="currentAvatarImageUrl">When profilePicOverride is not empty, use it instead. (required).</param>
            <param name="currentAvatarThumbnailImageUrl">When profilePicOverride is not empty, use it instead. (required).</param>
            <param name="dateJoined">dateJoined (required).</param>
            <param name="developerType">developerType (required).</param>
            <param name="displayName">displayName (required).</param>
            <param name="emailVerified">emailVerified (required).</param>
            <param name="fallbackAvatar">fallbackAvatar.</param>
            <param name="friendGroupNames">Always empty array. (required).</param>
            <param name="friendKey">friendKey (required).</param>
            <param name="friends">friends (required).</param>
            <param name="hasBirthday">hasBirthday (required).</param>
            <param name="hasEmail">hasEmail (required).</param>
            <param name="hasLoggedInFromClient">hasLoggedInFromClient (required).</param>
            <param name="hasPendingEmail">hasPendingEmail (required).</param>
            <param name="homeLocation">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="id">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="isFriend">isFriend (required) (default to false).</param>
            <param name="lastLogin">lastLogin (required).</param>
            <param name="lastPlatform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;. (required).</param>
            <param name="obfuscatedEmail">obfuscatedEmail (required).</param>
            <param name="obfuscatedPendingEmail">obfuscatedPendingEmail (required).</param>
            <param name="oculusId">oculusId (required).</param>
            <param name="offlineFriends">offlineFriends.</param>
            <param name="onlineFriends">onlineFriends.</param>
            <param name="pastDisplayNames">pastDisplayNames (required).</param>
            <param name="profilePicOverride">profilePicOverride (required).</param>
            <param name="state">state (required).</param>
            <param name="status">status (required).</param>
            <param name="statusDescription">statusDescription (required).</param>
            <param name="statusFirstTime">statusFirstTime (required).</param>
            <param name="statusHistory">statusHistory (required).</param>
            <param name="steamDetails">steamDetails (required).</param>
            <param name="steamId">steamId (required).</param>
            <param name="tags">tags (required).</param>
            <param name="twoFactorAuthEnabled">twoFactorAuthEnabled (required).</param>
            <param name="twoFactorAuthEnabledDate">twoFactorAuthEnabledDate.</param>
            <param name="unsubscribe">unsubscribe (required).</param>
            <param name="userIcon">userIcon (required).</param>
            <param name="username">username (required).</param>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.AcceptedTOSVersion">
            <summary>
            Gets or Sets AcceptedTOSVersion
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.AccountDeletionDate">
            <summary>
            Gets or Sets AccountDeletionDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.ActiveFriends">
            <summary>
            Gets or Sets ActiveFriends
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.AllowAvatarCopying">
            <summary>
            Gets or Sets AllowAvatarCopying
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.Bio">
            <summary>
            Gets or Sets Bio
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.BioLinks">
            <summary>
            Gets or Sets BioLinks
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.CurrentAvatar">
            <summary>
            Gets or Sets CurrentAvatar
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.CurrentAvatarAssetUrl">
            <summary>
            Gets or Sets CurrentAvatarAssetUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.CurrentAvatarImageUrl">
            <summary>
            When profilePicOverride is not empty, use it instead.
            </summary>
            <value>When profilePicOverride is not empty, use it instead.</value>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.CurrentAvatarThumbnailImageUrl">
            <summary>
            When profilePicOverride is not empty, use it instead.
            </summary>
            <value>When profilePicOverride is not empty, use it instead.</value>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.DateJoined">
            <summary>
            Gets or Sets DateJoined
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.DisplayName">
            <summary>
            Gets or Sets DisplayName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.EmailVerified">
            <summary>
            Gets or Sets EmailVerified
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.FallbackAvatar">
            <summary>
            Gets or Sets FallbackAvatar
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.FriendGroupNames">
            <summary>
            Always empty array.
            </summary>
            <value>Always empty array.</value>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.FriendKey">
            <summary>
            Gets or Sets FriendKey
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.Friends">
            <summary>
            Gets or Sets Friends
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.HasBirthday">
            <summary>
            Gets or Sets HasBirthday
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.HasEmail">
            <summary>
            Gets or Sets HasEmail
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.HasLoggedInFromClient">
            <summary>
            Gets or Sets HasLoggedInFromClient
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.HasPendingEmail">
            <summary>
            Gets or Sets HasPendingEmail
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.HomeLocation">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.Id">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.IsFriend">
            <summary>
            Gets or Sets IsFriend
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.LastLogin">
            <summary>
            Gets or Sets LastLogin
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.LastPlatform">
            <summary>
            This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
            </summary>
            <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.ObfuscatedEmail">
            <summary>
            Gets or Sets ObfuscatedEmail
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.ObfuscatedPendingEmail">
            <summary>
            Gets or Sets ObfuscatedPendingEmail
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.OculusId">
            <summary>
            Gets or Sets OculusId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.OfflineFriends">
            <summary>
            Gets or Sets OfflineFriends
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.OnlineFriends">
            <summary>
            Gets or Sets OnlineFriends
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.PastDisplayNames">
            <summary>
            Gets or Sets PastDisplayNames
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.ProfilePicOverride">
            <summary>
            Gets or Sets ProfilePicOverride
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.StatusDescription">
            <summary>
            Gets or Sets StatusDescription
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.StatusFirstTime">
            <summary>
            Gets or Sets StatusFirstTime
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.StatusHistory">
            <summary>
            Gets or Sets StatusHistory
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.SteamDetails">
            <summary>
            Gets or Sets SteamDetails
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.SteamId">
            <summary>
            Gets or Sets SteamId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.TwoFactorAuthEnabled">
            <summary>
            Gets or Sets TwoFactorAuthEnabled
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.TwoFactorAuthEnabledDate">
            <summary>
            Gets or Sets TwoFactorAuthEnabledDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.Unsubscribe">
            <summary>
            Gets or Sets Unsubscribe
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.UserIcon">
            <summary>
            Gets or Sets UserIcon
            </summary>
        </member>
        <member name="P:VRChat.API.Model.CurrentUser.Username">
            <summary>
            Gets or Sets Username
            </summary>
        </member>
        <member name="M:VRChat.API.Model.CurrentUser.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CurrentUser.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.CurrentUser.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CurrentUser.Equals(VRChat.API.Model.CurrentUser)">
            <summary>
            Returns true if CurrentUser instances are equal
            </summary>
            <param name="input">Instance of CurrentUser to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.CurrentUser.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.CurrentUser.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.DeploymentGroup">
            <summary>
            Used to identify which API deployment cluster is currently responding.  &#x60;blue&#x60; and &#x60;green&#x60; are used by Production. &#x60;grape&#x60;and &#x60;cherry&#x60; are used during Development.  [Blue Green Deployment by Martin Fowler](https://martinfowler.com/bliki/BlueGreenDeployment.html)
            </summary>
            <value>Used to identify which API deployment cluster is currently responding.  &#x60;blue&#x60; and &#x60;green&#x60; are used by Production. &#x60;grape&#x60;and &#x60;cherry&#x60; are used during Development.  [Blue Green Deployment by Martin Fowler](https://martinfowler.com/bliki/BlueGreenDeployment.html)</value>
        </member>
        <member name="F:VRChat.API.Model.DeploymentGroup.Blue">
            <summary>
            Enum Blue for value: blue
            </summary>
        </member>
        <member name="F:VRChat.API.Model.DeploymentGroup.Green">
            <summary>
            Enum Green for value: green
            </summary>
        </member>
        <member name="F:VRChat.API.Model.DeploymentGroup.Grape">
            <summary>
            Enum Grape for value: grape
            </summary>
        </member>
        <member name="F:VRChat.API.Model.DeploymentGroup.Cherry">
            <summary>
            Enum Cherry for value: cherry
            </summary>
        </member>
        <member name="T:VRChat.API.Model.DeveloperType">
            <summary>
            \&quot;none\&quot; User is a normal user \&quot;trusted\&quot; Unknown \&quot;internal\&quot; Is a VRChat Developer \&quot;moderator\&quot; Is a VRChat Moderator  Staff can hide their developerType at will.
            </summary>
            <value>\&quot;none\&quot; User is a normal user \&quot;trusted\&quot; Unknown \&quot;internal\&quot; Is a VRChat Developer \&quot;moderator\&quot; Is a VRChat Moderator  Staff can hide their developerType at will.</value>
        </member>
        <member name="F:VRChat.API.Model.DeveloperType.None">
            <summary>
            Enum None for value: none
            </summary>
        </member>
        <member name="F:VRChat.API.Model.DeveloperType.Trusted">
            <summary>
            Enum Trusted for value: trusted
            </summary>
        </member>
        <member name="F:VRChat.API.Model.DeveloperType.Internal">
            <summary>
            Enum Internal for value: internal
            </summary>
        </member>
        <member name="F:VRChat.API.Model.DeveloperType.Moderator">
            <summary>
            Enum Moderator for value: moderator
            </summary>
        </member>
        <member name="T:VRChat.API.Model.DownloadURLList">
            <summary>
            Download links for various development assets.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.DownloadURLList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.DownloadURLList" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.DownloadURLList.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.DownloadURLList" /> class.
            </summary>
            <param name="sdk2">Download link for legacy SDK2 (required).</param>
            <param name="sdk3Avatars">Download link for SDK3 for Avatars (required).</param>
            <param name="sdk3Worlds">Download link for SDK3 for Worlds (required).</param>
        </member>
        <member name="P:VRChat.API.Model.DownloadURLList.Sdk2">
            <summary>
            Download link for legacy SDK2
            </summary>
            <value>Download link for legacy SDK2</value>
        </member>
        <member name="P:VRChat.API.Model.DownloadURLList.Sdk3Avatars">
            <summary>
            Download link for SDK3 for Avatars
            </summary>
            <value>Download link for SDK3 for Avatars</value>
        </member>
        <member name="P:VRChat.API.Model.DownloadURLList.Sdk3Worlds">
            <summary>
            Download link for SDK3 for Worlds
            </summary>
            <value>Download link for SDK3 for Worlds</value>
        </member>
        <member name="M:VRChat.API.Model.DownloadURLList.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.DownloadURLList.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.DownloadURLList.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.DownloadURLList.Equals(VRChat.API.Model.DownloadURLList)">
            <summary>
            Returns true if DownloadURLList instances are equal
            </summary>
            <param name="input">Instance of DownloadURLList to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.DownloadURLList.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.DownloadURLList.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.DynamicContentRow">
            <summary>
            DynamicContentRow
            </summary>
        </member>
        <member name="M:VRChat.API.Model.DynamicContentRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.DynamicContentRow" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.DynamicContentRow.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.DynamicContentRow" /> class.
            </summary>
            <param name="index">index.</param>
            <param name="name">name (required).</param>
            <param name="platform">Usually \&quot;ThisPlatformSupported\&quot;, but can also be other values such as \&quot;all\&quot; or platform specific identifiers. (required).</param>
            <param name="sortHeading">sortHeading (required).</param>
            <param name="sortOrder">sortOrder (required).</param>
            <param name="sortOwnership">sortOwnership (required).</param>
            <param name="tag">Tag to filter content for this row..</param>
            <param name="type">Type is not present if it is a world..</param>
        </member>
        <member name="P:VRChat.API.Model.DynamicContentRow.Index">
            <summary>
            Gets or Sets Index
            </summary>
        </member>
        <member name="P:VRChat.API.Model.DynamicContentRow.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.DynamicContentRow.Platform">
            <summary>
            Usually \&quot;ThisPlatformSupported\&quot;, but can also be other values such as \&quot;all\&quot; or platform specific identifiers.
            </summary>
            <value>Usually \&quot;ThisPlatformSupported\&quot;, but can also be other values such as \&quot;all\&quot; or platform specific identifiers.</value>
        </member>
        <member name="P:VRChat.API.Model.DynamicContentRow.SortHeading">
            <summary>
            Gets or Sets SortHeading
            </summary>
        </member>
        <member name="P:VRChat.API.Model.DynamicContentRow.SortOrder">
            <summary>
            Gets or Sets SortOrder
            </summary>
        </member>
        <member name="P:VRChat.API.Model.DynamicContentRow.SortOwnership">
            <summary>
            Gets or Sets SortOwnership
            </summary>
        </member>
        <member name="P:VRChat.API.Model.DynamicContentRow.Tag">
            <summary>
            Tag to filter content for this row.
            </summary>
            <value>Tag to filter content for this row.</value>
        </member>
        <member name="P:VRChat.API.Model.DynamicContentRow.Type">
            <summary>
            Type is not present if it is a world.
            </summary>
            <value>Type is not present if it is a world.</value>
        </member>
        <member name="M:VRChat.API.Model.DynamicContentRow.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.DynamicContentRow.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.DynamicContentRow.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.DynamicContentRow.Equals(VRChat.API.Model.DynamicContentRow)">
            <summary>
            Returns true if DynamicContentRow instances are equal
            </summary>
            <param name="input">Instance of DynamicContentRow to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.DynamicContentRow.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.DynamicContentRow.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Error.#ctor(VRChat.API.Model.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Error" /> class.
            </summary>
            <param name="error">error.</param>
        </member>
        <member name="P:VRChat.API.Model.Error._Error">
            <summary>
            Gets or Sets _Error
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Error.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Error.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Error.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Error.Equals(VRChat.API.Model.Error)">
            <summary>
            Returns true if Error instances are equal
            </summary>
            <param name="input">Instance of Error to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Error.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Error.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Favorite">
            <summary>
            Favorite
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Favorite.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Favorite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Favorite" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Favorite.#ctor(System.String,System.String,System.Collections.Generic.List{System.String},VRChat.API.Model.FavoriteType)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Favorite" /> class.
            </summary>
            <param name="favoriteId">MUST be either AvatarID, UserID or WorldID. (required).</param>
            <param name="id">id (required).</param>
            <param name="tags">tags (required).</param>
            <param name="type">type (required).</param>
        </member>
        <member name="P:VRChat.API.Model.Favorite.FavoriteId">
            <summary>
            MUST be either AvatarID, UserID or WorldID.
            </summary>
            <value>MUST be either AvatarID, UserID or WorldID.</value>
        </member>
        <member name="P:VRChat.API.Model.Favorite.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Favorite.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Favorite.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Favorite.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Favorite.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Favorite.Equals(VRChat.API.Model.Favorite)">
            <summary>
            Returns true if Favorite instances are equal
            </summary>
            <param name="input">Instance of Favorite to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Favorite.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Favorite.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.FavoriteGroup">
            <summary>
            FavoriteGroup
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FavoriteGroup.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FavoriteGroup.Visibility">
            <summary>
            Gets or Sets Visibility
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FavoriteGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FavoriteGroup" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FavoriteGroup.#ctor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},VRChat.API.Model.FavoriteType,VRChat.API.Model.FavoriteGroupVisibility)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FavoriteGroup" /> class.
            </summary>
            <param name="displayName">displayName (required).</param>
            <param name="id">id (required).</param>
            <param name="name">name (required).</param>
            <param name="ownerDisplayName">ownerDisplayName (required).</param>
            <param name="ownerId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="tags">tags (required).</param>
            <param name="type">type (required).</param>
            <param name="visibility">visibility (required).</param>
        </member>
        <member name="P:VRChat.API.Model.FavoriteGroup.DisplayName">
            <summary>
            Gets or Sets DisplayName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FavoriteGroup.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FavoriteGroup.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FavoriteGroup.OwnerDisplayName">
            <summary>
            Gets or Sets OwnerDisplayName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FavoriteGroup.OwnerId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.FavoriteGroup.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FavoriteGroup.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FavoriteGroup.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FavoriteGroup.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FavoriteGroup.Equals(VRChat.API.Model.FavoriteGroup)">
            <summary>
            Returns true if FavoriteGroup instances are equal
            </summary>
            <param name="input">Instance of FavoriteGroup to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FavoriteGroup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.FavoriteGroup.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.FavoriteGroupVisibility">
            <summary>
            Defines FavoriteGroupVisibility
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FavoriteGroupVisibility.Private">
            <summary>
            Enum Private for value: private
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FavoriteGroupVisibility.Friends">
            <summary>
            Enum Friends for value: friends
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FavoriteGroupVisibility.Public">
            <summary>
            Enum Public for value: public
            </summary>
        </member>
        <member name="T:VRChat.API.Model.FavoriteType">
            <summary>
            Defines FavoriteType
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FavoriteType.World">
            <summary>
            Enum World for value: world
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FavoriteType.Friend">
            <summary>
            Enum Friend for value: friend
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FavoriteType.Avatar">
            <summary>
            Enum Avatar for value: avatar
            </summary>
        </member>
        <member name="T:VRChat.API.Model.File">
            <summary>
            File
            </summary>
        </member>
        <member name="P:VRChat.API.Model.File.MimeType">
            <summary>
            Gets or Sets MimeType
            </summary>
        </member>
        <member name="M:VRChat.API.Model.File.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.File" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.File.#ctor(System.String,System.String,VRChat.API.Model.MIMEType,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{VRChat.API.Model.FileVersion})">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.File" /> class.
            </summary>
            <param name="extension">extension (required).</param>
            <param name="id">id (required).</param>
            <param name="mimeType">mimeType (required).</param>
            <param name="name">name (required).</param>
            <param name="ownerId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="tags">tags (required).</param>
            <param name="versions">versions (required).</param>
        </member>
        <member name="P:VRChat.API.Model.File.Extension">
            <summary>
            Gets or Sets Extension
            </summary>
        </member>
        <member name="P:VRChat.API.Model.File.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.File.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.File.OwnerId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.File.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.File.Versions">
            <summary>
            Gets or Sets Versions
            </summary>
        </member>
        <member name="M:VRChat.API.Model.File.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.File.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.File.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.File.Equals(VRChat.API.Model.File)">
            <summary>
            Returns true if File instances are equal
            </summary>
            <param name="input">Instance of File to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.File.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.File.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.FileData">
            <summary>
            FileData
            </summary>
        </member>
        <member name="T:VRChat.API.Model.FileData.CategoryEnum">
            <summary>
            Defines Category
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FileData.CategoryEnum.Multipart">
            <summary>
            Enum Multipart for value: multipart
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FileData.CategoryEnum.Queued">
            <summary>
            Enum Queued for value: queued
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FileData.CategoryEnum.Simple">
            <summary>
            Enum Simple for value: simple
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileData.Category">
            <summary>
            Gets or Sets Category
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileData.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FileData" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileData.#ctor(VRChat.API.Model.FileData.CategoryEnum,System.String,System.String,System.Int32,VRChat.API.Model.FileStatus,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FileData" /> class.
            </summary>
            <param name="category">category (required) (default to CategoryEnum.Queued).</param>
            <param name="fileName">fileName (required).</param>
            <param name="md5">md5 (required).</param>
            <param name="sizeInBytes">sizeInBytes (required).</param>
            <param name="status">status (required).</param>
            <param name="uploadId">uploadId (required) (default to &quot;&quot;).</param>
            <param name="url">url (required).</param>
        </member>
        <member name="P:VRChat.API.Model.FileData.FileName">
            <summary>
            Gets or Sets FileName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileData.Md5">
            <summary>
            Gets or Sets Md5
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileData.SizeInBytes">
            <summary>
            Gets or Sets SizeInBytes
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileData.UploadId">
            <summary>
            Gets or Sets UploadId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileData.Url">
            <summary>
            Gets or Sets Url
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileData.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FileData.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FileData.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FileData.Equals(VRChat.API.Model.FileData)">
            <summary>
            Returns true if FileData instances are equal
            </summary>
            <param name="input">Instance of FileData to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FileData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.FileData.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.FileStatus">
            <summary>
            Defines FileStatus
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FileStatus.Waiting">
            <summary>
            Enum Waiting for value: waiting
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FileStatus.Complete">
            <summary>
            Enum Complete for value: complete
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FileStatus.None">
            <summary>
            Enum None for value: none
            </summary>
        </member>
        <member name="F:VRChat.API.Model.FileStatus.Queued">
            <summary>
            Enum Queued for value: queued
            </summary>
        </member>
        <member name="T:VRChat.API.Model.FileUploadURL">
            <summary>
            FileUploadURL
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileUploadURL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FileUploadURL" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileUploadURL.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FileUploadURL" /> class.
            </summary>
            <param name="url">url (required).</param>
        </member>
        <member name="P:VRChat.API.Model.FileUploadURL.Url">
            <summary>
            Gets or Sets Url
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileUploadURL.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FileUploadURL.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FileUploadURL.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FileUploadURL.Equals(VRChat.API.Model.FileUploadURL)">
            <summary>
            Returns true if FileUploadURL instances are equal
            </summary>
            <param name="input">Instance of FileUploadURL to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FileUploadURL.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.FileUploadURL.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.FileVersion">
            <summary>
            FileVersion
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersion.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FileVersion" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileVersion.#ctor(System.DateTime,System.Boolean,VRChat.API.Model.FileData,VRChat.API.Model.FileData,VRChat.API.Model.FileData,VRChat.API.Model.FileStatus,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FileVersion" /> class.
            </summary>
            <param name="createdAt">createdAt (required).</param>
            <param name="deleted">Usually only present if &#x60;true&#x60; (default to true).</param>
            <param name="delta">delta.</param>
            <param name="file">file.</param>
            <param name="signature">signature.</param>
            <param name="status">status (required).</param>
            <param name="version">Incremental version counter, can only be increased. (required) (default to 0).</param>
        </member>
        <member name="P:VRChat.API.Model.FileVersion.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersion.Deleted">
            <summary>
            Usually only present if &#x60;true&#x60;
            </summary>
            <value>Usually only present if &#x60;true&#x60;</value>
        </member>
        <member name="P:VRChat.API.Model.FileVersion.Delta">
            <summary>
            Gets or Sets Delta
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersion.File">
            <summary>
            Gets or Sets File
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersion.Signature">
            <summary>
            Gets or Sets Signature
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersion._Version">
            <summary>
            Incremental version counter, can only be increased.
            </summary>
            <value>Incremental version counter, can only be increased.</value>
        </member>
        <member name="M:VRChat.API.Model.FileVersion.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersion.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersion.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersion.Equals(VRChat.API.Model.FileVersion)">
            <summary>
            Returns true if FileVersion instances are equal
            </summary>
            <param name="input">Instance of FileVersion to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersion.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersion.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.FileVersionUploadStatus">
            <summary>
            FileVersionUploadStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileVersionUploadStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FileVersionUploadStatus" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FileVersionUploadStatus.#ctor(System.String,System.String,System.Decimal,System.Decimal,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FileVersionUploadStatus" /> class.
            </summary>
            <param name="uploadId">uploadId (required).</param>
            <param name="fileName">fileName (required).</param>
            <param name="nextPartNumber">nextPartNumber (required).</param>
            <param name="maxParts">maxParts (required).</param>
            <param name="parts">parts (required).</param>
            <param name="etags">Unknown (required).</param>
        </member>
        <member name="P:VRChat.API.Model.FileVersionUploadStatus.UploadId">
            <summary>
            Gets or Sets UploadId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersionUploadStatus.FileName">
            <summary>
            Gets or Sets FileName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersionUploadStatus.NextPartNumber">
            <summary>
            Gets or Sets NextPartNumber
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersionUploadStatus.MaxParts">
            <summary>
            Gets or Sets MaxParts
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersionUploadStatus.Parts">
            <summary>
            Gets or Sets Parts
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FileVersionUploadStatus.Etags">
            <summary>
            Unknown
            </summary>
            <value>Unknown</value>
        </member>
        <member name="M:VRChat.API.Model.FileVersionUploadStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersionUploadStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersionUploadStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersionUploadStatus.Equals(VRChat.API.Model.FileVersionUploadStatus)">
            <summary>
            Returns true if FileVersionUploadStatus instances are equal
            </summary>
            <param name="input">Instance of FileVersionUploadStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersionUploadStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.FileVersionUploadStatus.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.FinishFileDataUploadRequest">
            <summary>
            FinishFileDataUploadRequest
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FinishFileDataUploadRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FinishFileDataUploadRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FinishFileDataUploadRequest.#ctor(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FinishFileDataUploadRequest" /> class.
            </summary>
            <param name="etags">Array of ETags uploaded..</param>
            <param name="nextPartNumber">Always a zero in string form, despite how many parts uploaded. (required) (default to &quot;0&quot;).</param>
            <param name="maxParts">Always a zero in string form, despite how many parts uploaded. (required) (default to &quot;0&quot;).</param>
        </member>
        <member name="P:VRChat.API.Model.FinishFileDataUploadRequest.Etags">
            <summary>
            Array of ETags uploaded.
            </summary>
            <value>Array of ETags uploaded.</value>
        </member>
        <member name="P:VRChat.API.Model.FinishFileDataUploadRequest.NextPartNumber">
            <summary>
            Always a zero in string form, despite how many parts uploaded.
            </summary>
            <value>Always a zero in string form, despite how many parts uploaded.</value>
        </member>
        <member name="P:VRChat.API.Model.FinishFileDataUploadRequest.MaxParts">
            <summary>
            Always a zero in string form, despite how many parts uploaded.
            </summary>
            <value>Always a zero in string form, despite how many parts uploaded.</value>
        </member>
        <member name="M:VRChat.API.Model.FinishFileDataUploadRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FinishFileDataUploadRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FinishFileDataUploadRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FinishFileDataUploadRequest.Equals(VRChat.API.Model.FinishFileDataUploadRequest)">
            <summary>
            Returns true if FinishFileDataUploadRequest instances are equal
            </summary>
            <param name="input">Instance of FinishFileDataUploadRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FinishFileDataUploadRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.FinishFileDataUploadRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.FriendStatus">
            <summary>
            FriendStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FriendStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FriendStatus" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FriendStatus.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.FriendStatus" /> class.
            </summary>
            <param name="incomingRequest">incomingRequest (required) (default to false).</param>
            <param name="isFriend">isFriend (required) (default to false).</param>
            <param name="outgoingRequest">outgoingRequest (required) (default to false).</param>
        </member>
        <member name="P:VRChat.API.Model.FriendStatus.IncomingRequest">
            <summary>
            Gets or Sets IncomingRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FriendStatus.IsFriend">
            <summary>
            Gets or Sets IsFriend
            </summary>
        </member>
        <member name="P:VRChat.API.Model.FriendStatus.OutgoingRequest">
            <summary>
            Gets or Sets OutgoingRequest
            </summary>
        </member>
        <member name="M:VRChat.API.Model.FriendStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FriendStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.FriendStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FriendStatus.Equals(VRChat.API.Model.FriendStatus)">
            <summary>
            Returns true if FriendStatus instances are equal
            </summary>
            <param name="input">Instance of FriendStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.FriendStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.FriendStatus.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InfoPush">
            <summary>
            InfoPush
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.ReleaseStatus">
            <summary>
            Gets or Sets ReleaseStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InfoPush" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPush.#ctor(System.String,System.Boolean,VRChat.API.Model.ReleaseStatus,System.Int32,System.Collections.Generic.List{System.String},VRChat.API.Model.InfoPushData,System.String,System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InfoPush" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="isEnabled">isEnabled (required) (default to true).</param>
            <param name="releaseStatus">releaseStatus (required).</param>
            <param name="priority">priority (required).</param>
            <param name="tags">tags (required).</param>
            <param name="data">data (required).</param>
            <param name="hash">Unknown usage, MD5 (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="updatedAt">updatedAt (required).</param>
            <param name="startDate">startDate.</param>
            <param name="endDate">endDate.</param>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.IsEnabled">
            <summary>
            Gets or Sets IsEnabled
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.Priority">
            <summary>
            Gets or Sets Priority
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.Hash">
            <summary>
            Unknown usage, MD5
            </summary>
            <value>Unknown usage, MD5</value>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.StartDate">
            <summary>
            Gets or Sets StartDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPush.EndDate">
            <summary>
            Gets or Sets EndDate
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPush.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPush.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPush.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPush.Equals(VRChat.API.Model.InfoPush)">
            <summary>
            Returns true if InfoPush instances are equal
            </summary>
            <param name="input">Instance of InfoPush to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPush.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPush.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InfoPushData">
            <summary>
            InfoPushData
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPushData.#ctor(VRChat.API.Model.DynamicContentRow,System.String,System.String,System.String,VRChat.API.Model.InfoPushDataClickable,System.String,System.String,VRChat.API.Model.InfoPushDataArticle)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InfoPushData" /> class.
            </summary>
            <param name="contentList">contentList.</param>
            <param name="description">description.</param>
            <param name="imageUrl">imageUrl.</param>
            <param name="name">name.</param>
            <param name="onPressed">onPressed.</param>
            <param name="template">template.</param>
            <param name="version">version.</param>
            <param name="article">article.</param>
        </member>
        <member name="P:VRChat.API.Model.InfoPushData.ContentList">
            <summary>
            Gets or Sets ContentList
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushData.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushData.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushData.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushData.OnPressed">
            <summary>
            Gets or Sets OnPressed
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushData.Template">
            <summary>
            Gets or Sets Template
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushData._Version">
            <summary>
            Gets or Sets _Version
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushData.Article">
            <summary>
            Gets or Sets Article
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPushData.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushData.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushData.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushData.Equals(VRChat.API.Model.InfoPushData)">
            <summary>
            Returns true if InfoPushData instances are equal
            </summary>
            <param name="input">Instance of InfoPushData to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushData.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InfoPushDataArticle">
            <summary>
            InfoPushDataArticle
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticle.#ctor(VRChat.API.Model.InfoPushDataArticleContent)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InfoPushDataArticle" /> class.
            </summary>
            <param name="content">content.</param>
        </member>
        <member name="P:VRChat.API.Model.InfoPushDataArticle.Content">
            <summary>
            Gets or Sets Content
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticle.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticle.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticle.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticle.Equals(VRChat.API.Model.InfoPushDataArticle)">
            <summary>
            Returns true if InfoPushDataArticle instances are equal
            </summary>
            <param name="input">Instance of InfoPushDataArticle to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticle.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticle.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InfoPushDataArticleContent">
            <summary>
            InfoPushDataArticleContent
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticleContent.#ctor(System.String,System.String,VRChat.API.Model.InfoPushDataClickable)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InfoPushDataArticleContent" /> class.
            </summary>
            <param name="text">text.</param>
            <param name="imageUrl">imageUrl.</param>
            <param name="onPressed">onPressed.</param>
        </member>
        <member name="P:VRChat.API.Model.InfoPushDataArticleContent.Text">
            <summary>
            Gets or Sets Text
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushDataArticleContent.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushDataArticleContent.OnPressed">
            <summary>
            Gets or Sets OnPressed
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticleContent.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticleContent.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticleContent.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticleContent.Equals(VRChat.API.Model.InfoPushDataArticleContent)">
            <summary>
            Returns true if InfoPushDataArticleContent instances are equal
            </summary>
            <param name="input">Instance of InfoPushDataArticleContent to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticleContent.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataArticleContent.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InfoPushDataClickable">
            <summary>
            InfoPushDataClickable
            </summary>
        </member>
        <member name="T:VRChat.API.Model.InfoPushDataClickable.CommandEnum">
            <summary>
            Defines Command
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InfoPushDataClickable.CommandEnum.OpenURL">
            <summary>
            Enum OpenURL for value: OpenURL
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InfoPushDataClickable.CommandEnum.OpenVRCPlusMenu">
            <summary>
            Enum OpenVRCPlusMenu for value: OpenVRCPlusMenu
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InfoPushDataClickable.CommandEnum.OpenSafetyMenu">
            <summary>
            Enum OpenSafetyMenu for value: OpenSafetyMenu
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InfoPushDataClickable.CommandEnum.CannedWorldSearch">
            <summary>
            Enum CannedWorldSearch for value: CannedWorldSearch
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InfoPushDataClickable.Command">
            <summary>
            Gets or Sets Command
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataClickable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InfoPushDataClickable" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataClickable.#ctor(VRChat.API.Model.InfoPushDataClickable.CommandEnum,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InfoPushDataClickable" /> class.
            </summary>
            <param name="command">command (required).</param>
            <param name="parameters">In case of OpenURL, this would contain the link..</param>
        </member>
        <member name="P:VRChat.API.Model.InfoPushDataClickable.Parameters">
            <summary>
            In case of OpenURL, this would contain the link.
            </summary>
            <value>In case of OpenURL, this would contain the link.</value>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataClickable.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataClickable.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataClickable.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataClickable.Equals(VRChat.API.Model.InfoPushDataClickable)">
            <summary>
            Returns true if InfoPushDataClickable instances are equal
            </summary>
            <param name="input">Instance of InfoPushDataClickable to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataClickable.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InfoPushDataClickable.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Instance">
            <summary>
            * &#x60;hidden&#x60; field is only present if InstanceType is &#x60;hidden&#x60; aka \&quot;Friends+\&quot;, and is instance creator. * &#x60;friends&#x60; field is only present if InstanceType is &#x60;friends&#x60; aka \&quot;Friends\&quot;, and is instance creator. * &#x60;private&#x60; field is only present if InstanceType is &#x60;private&#x60; aka \&quot;Invite\&quot; or \&quot;Invite+\&quot;, and is instance creator.
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.PhotonRegion">
            <summary>
            Gets or Sets PhotonRegion
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.Region">
            <summary>
            Gets or Sets Region
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Instance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Instance" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Instance.#ctor(System.Boolean,System.Boolean,System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Boolean,VRChat.API.Model.Region,VRChat.API.Model.InstancePlatforms,VRChat.API.Model.Region,System.String,System.Collections.Generic.List{System.String},VRChat.API.Model.InstanceType,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Instance" /> class.
            </summary>
            <param name="active">active (required) (default to true).</param>
            <param name="canRequestInvite">canRequestInvite (required) (default to true).</param>
            <param name="capacity">capacity (required).</param>
            <param name="clientNumber">Always returns \&quot;unknown\&quot;. (required).</param>
            <param name="full">full (required) (default to false).</param>
            <param name="id">InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance. (required).</param>
            <param name="instanceId">instanceId (required).</param>
            <param name="location">InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance. (required).</param>
            <param name="nUsers">nUsers (required).</param>
            <param name="name">name (required).</param>
            <param name="ownerId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
            <param name="permanent">permanent (required) (default to false).</param>
            <param name="photonRegion">photonRegion (required).</param>
            <param name="platforms">platforms (required).</param>
            <param name="region">region (required).</param>
            <param name="shortName">shortName (required).</param>
            <param name="tags">The tags array on Instances usually contain the language tags of the people in the instance.  (required).</param>
            <param name="type">type (required).</param>
            <param name="worldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="hidden">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
            <param name="friends">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
            <param name="_private">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
        </member>
        <member name="P:VRChat.API.Model.Instance.Active">
            <summary>
            Gets or Sets Active
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.CanRequestInvite">
            <summary>
            Gets or Sets CanRequestInvite
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.Capacity">
            <summary>
            Gets or Sets Capacity
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.ClientNumber">
            <summary>
            Always returns \&quot;unknown\&quot;.
            </summary>
            <value>Always returns \&quot;unknown\&quot;.</value>
        </member>
        <member name="P:VRChat.API.Model.Instance.Full">
            <summary>
            Gets or Sets Full
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.Id">
            <summary>
            InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.
            </summary>
            <value>InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.</value>
        </member>
        <member name="P:VRChat.API.Model.Instance.InstanceId">
            <summary>
            Gets or Sets InstanceId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.Location">
            <summary>
            InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.
            </summary>
            <value>InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.</value>
        </member>
        <member name="P:VRChat.API.Model.Instance.NUsers">
            <summary>
            Gets or Sets NUsers
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.OwnerId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.Instance.Permanent">
            <summary>
            Gets or Sets Permanent
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.Platforms">
            <summary>
            Gets or Sets Platforms
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.ShortName">
            <summary>
            Gets or Sets ShortName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Instance.Tags">
            <summary>
            The tags array on Instances usually contain the language tags of the people in the instance. 
            </summary>
            <value>The tags array on Instances usually contain the language tags of the people in the instance. </value>
        </member>
        <member name="P:VRChat.API.Model.Instance.WorldId">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.Instance.Hidden">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.Instance.Friends">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.Instance.Private">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="M:VRChat.API.Model.Instance.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Instance.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Instance.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Instance.Equals(VRChat.API.Model.Instance)">
            <summary>
            Returns true if Instance instances are equal
            </summary>
            <param name="input">Instance of Instance to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Instance.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Instance.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InstancePlatforms">
            <summary>
            InstancePlatforms
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InstancePlatforms.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InstancePlatforms" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InstancePlatforms.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InstancePlatforms" /> class.
            </summary>
            <param name="android">android (required).</param>
            <param name="standalonewindows">standalonewindows (required).</param>
        </member>
        <member name="P:VRChat.API.Model.InstancePlatforms.Android">
            <summary>
            Gets or Sets Android
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InstancePlatforms.Standalonewindows">
            <summary>
            Gets or Sets Standalonewindows
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InstancePlatforms.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InstancePlatforms.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InstancePlatforms.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InstancePlatforms.Equals(VRChat.API.Model.InstancePlatforms)">
            <summary>
            Returns true if InstancePlatforms instances are equal
            </summary>
            <param name="input">Instance of InstancePlatforms to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InstancePlatforms.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InstancePlatforms.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InstanceType">
            <summary>
            Defines InstanceType
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InstanceType.Public">
            <summary>
            Enum Public for value: public
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InstanceType.Hidden">
            <summary>
            Enum Hidden for value: hidden
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InstanceType.Friends">
            <summary>
            Enum Friends for value: friends
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InstanceType.Private">
            <summary>
            Enum Private for value: private
            </summary>
        </member>
        <member name="T:VRChat.API.Model.InviteMessage">
            <summary>
            InviteMessage
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InviteMessage.MessageType">
            <summary>
            Gets or Sets MessageType
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InviteMessage" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteMessage.#ctor(System.Boolean,System.String,System.String,VRChat.API.Model.InviteMessageType,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InviteMessage" /> class.
            </summary>
            <param name="canBeUpdated">canBeUpdated (required) (default to true).</param>
            <param name="id">id (required).</param>
            <param name="message">message (required).</param>
            <param name="messageType">messageType (required).</param>
            <param name="remainingCooldownMinutes">Changes to 60 when updated, although probably server-side configurable. (required) (default to 0).</param>
            <param name="slot">slot (required).</param>
            <param name="updatedAt">updatedAt (required).</param>
        </member>
        <member name="P:VRChat.API.Model.InviteMessage.CanBeUpdated">
            <summary>
            Gets or Sets CanBeUpdated
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InviteMessage.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InviteMessage.Message">
            <summary>
            Gets or Sets Message
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InviteMessage.RemainingCooldownMinutes">
            <summary>
            Changes to 60 when updated, although probably server-side configurable.
            </summary>
            <value>Changes to 60 when updated, although probably server-side configurable.</value>
        </member>
        <member name="P:VRChat.API.Model.InviteMessage.Slot">
            <summary>
            Gets or Sets Slot
            </summary>
        </member>
        <member name="P:VRChat.API.Model.InviteMessage.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteMessage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteMessage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteMessage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteMessage.Equals(VRChat.API.Model.InviteMessage)">
            <summary>
            Returns true if InviteMessage instances are equal
            </summary>
            <param name="input">Instance of InviteMessage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteMessage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteMessage.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InviteMessageType">
            <summary>
            Defines InviteMessageType
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InviteMessageType.Message">
            <summary>
            Enum Message for value: message
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InviteMessageType.Response">
            <summary>
            Enum Response for value: response
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InviteMessageType.Request">
            <summary>
            Enum Request for value: request
            </summary>
        </member>
        <member name="F:VRChat.API.Model.InviteMessageType.RequestResponse">
            <summary>
            Enum RequestResponse for value: requestResponse
            </summary>
        </member>
        <member name="T:VRChat.API.Model.InviteRequest">
            <summary>
            InviteRequest
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InviteRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteRequest.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InviteRequest" /> class.
            </summary>
            <param name="instanceId">InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance. (required).</param>
            <param name="messageSlot">messageSlot.</param>
        </member>
        <member name="P:VRChat.API.Model.InviteRequest.InstanceId">
            <summary>
            InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.
            </summary>
            <value>InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.</value>
        </member>
        <member name="P:VRChat.API.Model.InviteRequest.MessageSlot">
            <summary>
            Gets or Sets MessageSlot
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteRequest.Equals(VRChat.API.Model.InviteRequest)">
            <summary>
            Returns true if InviteRequest instances are equal
            </summary>
            <param name="input">Instance of InviteRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.InviteResponse">
            <summary>
            InviteResponse
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InviteResponse" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteResponse.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.InviteResponse" /> class.
            </summary>
            <param name="responseSlot">responseSlot (required).</param>
        </member>
        <member name="P:VRChat.API.Model.InviteResponse.ResponseSlot">
            <summary>
            Gets or Sets ResponseSlot
            </summary>
        </member>
        <member name="M:VRChat.API.Model.InviteResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteResponse.Equals(VRChat.API.Model.InviteResponse)">
            <summary>
            Returns true if InviteResponse instances are equal
            </summary>
            <param name="input">Instance of InviteResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.InviteResponse.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.License">
            <summary>
            License
            </summary>
        </member>
        <member name="P:VRChat.API.Model.License.ForType">
            <summary>
            Gets or Sets ForType
            </summary>
        </member>
        <member name="P:VRChat.API.Model.License.ForAction">
            <summary>
            Gets or Sets ForAction
            </summary>
        </member>
        <member name="M:VRChat.API.Model.License.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.License" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.License.#ctor(System.String,VRChat.API.Model.LicenseType,System.String,VRChat.API.Model.LicenseAction)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.License" /> class.
            </summary>
            <param name="forId">Either a AvatarID, LicenseGroupID, PermissionID or ProductID. This depends on the &#x60;forType&#x60; field. (required).</param>
            <param name="forType">forType (required).</param>
            <param name="forName">forName (required).</param>
            <param name="forAction">forAction (required).</param>
        </member>
        <member name="P:VRChat.API.Model.License.ForId">
            <summary>
            Either a AvatarID, LicenseGroupID, PermissionID or ProductID. This depends on the &#x60;forType&#x60; field.
            </summary>
            <value>Either a AvatarID, LicenseGroupID, PermissionID or ProductID. This depends on the &#x60;forType&#x60; field.</value>
        </member>
        <member name="P:VRChat.API.Model.License.ForName">
            <summary>
            Gets or Sets ForName
            </summary>
        </member>
        <member name="M:VRChat.API.Model.License.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.License.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.License.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.License.Equals(VRChat.API.Model.License)">
            <summary>
            Returns true if License instances are equal
            </summary>
            <param name="input">Instance of License to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.License.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.License.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.LicenseAction">
            <summary>
            Defines LicenseAction
            </summary>
        </member>
        <member name="F:VRChat.API.Model.LicenseAction.Wear">
            <summary>
            Enum Wear for value: wear
            </summary>
        </member>
        <member name="F:VRChat.API.Model.LicenseAction.Have">
            <summary>
            Enum Have for value: have
            </summary>
        </member>
        <member name="T:VRChat.API.Model.LicenseGroup">
            <summary>
            LicenseGroup
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LicenseGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.LicenseGroup" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LicenseGroup.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{VRChat.API.Model.License})">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.LicenseGroup" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="name">name (required).</param>
            <param name="description">description (required).</param>
            <param name="licenses">licenses (required).</param>
        </member>
        <member name="P:VRChat.API.Model.LicenseGroup.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LicenseGroup.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LicenseGroup.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LicenseGroup.Licenses">
            <summary>
            Gets or Sets Licenses
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LicenseGroup.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.LicenseGroup.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.LicenseGroup.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.LicenseGroup.Equals(VRChat.API.Model.LicenseGroup)">
            <summary>
            Returns true if LicenseGroup instances are equal
            </summary>
            <param name="input">Instance of LicenseGroup to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.LicenseGroup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.LicenseGroup.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.LicenseType">
            <summary>
            Defines LicenseType
            </summary>
        </member>
        <member name="F:VRChat.API.Model.LicenseType.Avatar">
            <summary>
            Enum Avatar for value: avatar
            </summary>
        </member>
        <member name="F:VRChat.API.Model.LicenseType.LicenseGroup">
            <summary>
            Enum LicenseGroup for value: licenseGroup
            </summary>
        </member>
        <member name="F:VRChat.API.Model.LicenseType.Permission">
            <summary>
            Enum Permission for value: permission
            </summary>
        </member>
        <member name="F:VRChat.API.Model.LicenseType.Product">
            <summary>
            Enum Product for value: product
            </summary>
        </member>
        <member name="T:VRChat.API.Model.LimitedUnityPackage">
            <summary>
            LimitedUnityPackage
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedUnityPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.LimitedUnityPackage" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedUnityPackage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.LimitedUnityPackage" /> class.
            </summary>
            <param name="platform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;. (required).</param>
            <param name="unityVersion">unityVersion (required).</param>
        </member>
        <member name="P:VRChat.API.Model.LimitedUnityPackage.Platform">
            <summary>
            This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
            </summary>
            <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        </member>
        <member name="P:VRChat.API.Model.LimitedUnityPackage.UnityVersion">
            <summary>
            Gets or Sets UnityVersion
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedUnityPackage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUnityPackage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUnityPackage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUnityPackage.Equals(VRChat.API.Model.LimitedUnityPackage)">
            <summary>
            Returns true if LimitedUnityPackage instances are equal
            </summary>
            <param name="input">Instance of LimitedUnityPackage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUnityPackage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUnityPackage.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.LimitedUser">
            <summary>
            LimitedUser
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.DeveloperType">
            <summary>
            Gets or Sets DeveloperType
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.LimitedUser" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedUser.#ctor(System.String,System.String,System.String,VRChat.API.Model.DeveloperType,System.String,System.String,System.String,System.Boolean,System.String,System.String,VRChat.API.Model.UserStatus,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.LimitedUser" /> class.
            </summary>
            <param name="bio">bio.</param>
            <param name="currentAvatarImageUrl">When profilePicOverride is not empty, use it instead. (required).</param>
            <param name="currentAvatarThumbnailImageUrl">When profilePicOverride is not empty, use it instead. (required).</param>
            <param name="developerType">developerType (required).</param>
            <param name="displayName">displayName (required).</param>
            <param name="fallbackAvatar">fallbackAvatar (required).</param>
            <param name="id">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="isFriend">isFriend (required).</param>
            <param name="lastPlatform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;. (required).</param>
            <param name="profilePicOverride">profilePicOverride (required).</param>
            <param name="status">status (required).</param>
            <param name="statusDescription">statusDescription (required).</param>
            <param name="tags">&lt;- Always empty. (required).</param>
            <param name="userIcon">userIcon (required).</param>
            <param name="username">username (required).</param>
            <param name="location">location.</param>
            <param name="friendKey">friendKey.</param>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.Bio">
            <summary>
            Gets or Sets Bio
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.CurrentAvatarImageUrl">
            <summary>
            When profilePicOverride is not empty, use it instead.
            </summary>
            <value>When profilePicOverride is not empty, use it instead.</value>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.CurrentAvatarThumbnailImageUrl">
            <summary>
            When profilePicOverride is not empty, use it instead.
            </summary>
            <value>When profilePicOverride is not empty, use it instead.</value>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.DisplayName">
            <summary>
            Gets or Sets DisplayName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.FallbackAvatar">
            <summary>
            Gets or Sets FallbackAvatar
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.Id">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.IsFriend">
            <summary>
            Gets or Sets IsFriend
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.LastPlatform">
            <summary>
            This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
            </summary>
            <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.ProfilePicOverride">
            <summary>
            Gets or Sets ProfilePicOverride
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.StatusDescription">
            <summary>
            Gets or Sets StatusDescription
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.Tags">
            <summary>
            &lt;- Always empty.
            </summary>
            <value>&lt;- Always empty.</value>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.UserIcon">
            <summary>
            Gets or Sets UserIcon
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.Username">
            <summary>
            Gets or Sets Username
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.Location">
            <summary>
            Gets or Sets Location
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedUser.FriendKey">
            <summary>
            Gets or Sets FriendKey
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedUser.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUser.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUser.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUser.Equals(VRChat.API.Model.LimitedUser)">
            <summary>
            Returns true if LimitedUser instances are equal
            </summary>
            <param name="input">Instance of LimitedUser to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUser.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedUser.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.LimitedWorld">
            <summary>
            LimitedWorld
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.ReleaseStatus">
            <summary>
            Gets or Sets ReleaseStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedWorld.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.LimitedWorld" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedWorld.#ctor(System.String,System.String,System.Int32,System.DateTime,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,VRChat.API.Model.ReleaseStatus,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{VRChat.API.Model.LimitedUnityPackage},System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.LimitedWorld" /> class.
            </summary>
            <param name="authorId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="authorName">authorName (required).</param>
            <param name="capacity">capacity (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="favorites">favorites (required) (default to 0).</param>
            <param name="heat">heat (required) (default to 0).</param>
            <param name="id">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="imageUrl">imageUrl (required).</param>
            <param name="labsPublicationDate">labsPublicationDate (required).</param>
            <param name="name">name (required).</param>
            <param name="occupants">occupants (required) (default to 0).</param>
            <param name="organization">organization (required) (default to &quot;vrchat&quot;).</param>
            <param name="popularity">popularity (required) (default to 0).</param>
            <param name="publicationDate">publicationDate (required).</param>
            <param name="releaseStatus">releaseStatus (required).</param>
            <param name="tags">tags (required).</param>
            <param name="thumbnailImageUrl">thumbnailImageUrl (required).</param>
            <param name="unityPackages">unityPackages (required).</param>
            <param name="updatedAt">updatedAt (required).</param>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.AuthorId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.AuthorName">
            <summary>
            Gets or Sets AuthorName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Capacity">
            <summary>
            Gets or Sets Capacity
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Favorites">
            <summary>
            Gets or Sets Favorites
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Heat">
            <summary>
            Gets or Sets Heat
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Id">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.LabsPublicationDate">
            <summary>
            Gets or Sets LabsPublicationDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Occupants">
            <summary>
            Gets or Sets Occupants
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Organization">
            <summary>
            Gets or Sets Organization
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Popularity">
            <summary>
            Gets or Sets Popularity
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.PublicationDate">
            <summary>
            Gets or Sets PublicationDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.ThumbnailImageUrl">
            <summary>
            Gets or Sets ThumbnailImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.UnityPackages">
            <summary>
            Gets or Sets UnityPackages
            </summary>
        </member>
        <member name="P:VRChat.API.Model.LimitedWorld.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="M:VRChat.API.Model.LimitedWorld.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedWorld.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedWorld.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedWorld.Equals(VRChat.API.Model.LimitedWorld)">
            <summary>
            Returns true if LimitedWorld instances are equal
            </summary>
            <param name="input">Instance of LimitedWorld to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedWorld.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.LimitedWorld.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.MIMEType">
            <summary>
            Defines MIMEType
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ImageJpeg">
            <summary>
            Enum ImageJpeg for value: image/jpeg
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ImageJpg">
            <summary>
            Enum ImageJpg for value: image/jpg
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ImagePng">
            <summary>
            Enum ImagePng for value: image/png
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ImageWebp">
            <summary>
            Enum ImageWebp for value: image/webp
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ImageGif">
            <summary>
            Enum ImageGif for value: image/gif
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ImageBmp">
            <summary>
            Enum ImageBmp for value: image/bmp
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ImageSvgxml">
            <summary>
            Enum ImageSvgxml for value: image/svg＋xml
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ImageTiff">
            <summary>
            Enum ImageTiff for value: image/tiff
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ApplicationXAvatar">
            <summary>
            Enum ApplicationXAvatar for value: application/x-avatar
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ApplicationXWorld">
            <summary>
            Enum ApplicationXWorld for value: application/x-world
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ApplicationGzip">
            <summary>
            Enum ApplicationGzip for value: application/gzip
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ApplicationXRsyncSignature">
            <summary>
            Enum ApplicationXRsyncSignature for value: application/x-rsync-signature
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ApplicationXRsyncDelta">
            <summary>
            Enum ApplicationXRsyncDelta for value: application/x-rsync-delta
            </summary>
        </member>
        <member name="F:VRChat.API.Model.MIMEType.ApplicationOctetStream">
            <summary>
            Enum ApplicationOctetStream for value: application/octet-stream
            </summary>
        </member>
        <member name="T:VRChat.API.Model.ModerateUserRequest">
            <summary>
            ModerateUserRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.ModerateUserRequest.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:VRChat.API.Model.ModerateUserRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.ModerateUserRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.ModerateUserRequest.#ctor(System.String,VRChat.API.Model.PlayerModerationType)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.ModerateUserRequest" /> class.
            </summary>
            <param name="moderated">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="type">type (required).</param>
        </member>
        <member name="P:VRChat.API.Model.ModerateUserRequest.Moderated">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="M:VRChat.API.Model.ModerateUserRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.ModerateUserRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.ModerateUserRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.ModerateUserRequest.Equals(VRChat.API.Model.ModerateUserRequest)">
            <summary>
            Returns true if ModerateUserRequest instances are equal
            </summary>
            <param name="input">Instance of ModerateUserRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.ModerateUserRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.ModerateUserRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Notification">
            <summary>
            Notification
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Notification.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Notification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Notification" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Notification.#ctor(System.DateTime,System.String,System.String,System.String,System.Boolean,System.String,System.String,VRChat.API.Model.NotificationType)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Notification" /> class.
            </summary>
            <param name="createdAt">createdAt (required).</param>
            <param name="details">**NOTICE:** This is not a JSON object, this is a json **encoded** object, meaning you have to json-de-encode to get the NotificationDetail object depending on the NotificationType. (required) (default to &quot;{}&quot;).</param>
            <param name="id">id (required).</param>
            <param name="message">message (required).</param>
            <param name="seen">seen (required) (default to false).</param>
            <param name="senderUserId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="senderUsername">senderUsername (required).</param>
            <param name="type">type (required).</param>
        </member>
        <member name="P:VRChat.API.Model.Notification.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Notification.Details">
            <summary>
            **NOTICE:** This is not a JSON object, this is a json **encoded** object, meaning you have to json-de-encode to get the NotificationDetail object depending on the NotificationType.
            </summary>
            <value>**NOTICE:** This is not a JSON object, this is a json **encoded** object, meaning you have to json-de-encode to get the NotificationDetail object depending on the NotificationType.</value>
        </member>
        <member name="P:VRChat.API.Model.Notification.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Notification.Message">
            <summary>
            Gets or Sets Message
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Notification.Seen">
            <summary>
            Gets or Sets Seen
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Notification.SenderUserId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.Notification.SenderUsername">
            <summary>
            Gets or Sets SenderUsername
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Notification.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Notification.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Notification.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Notification.Equals(VRChat.API.Model.Notification)">
            <summary>
            Returns true if Notification instances are equal
            </summary>
            <param name="input">Instance of Notification to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Notification.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Notification.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.NotificationType">
            <summary>
            Defines NotificationType
            </summary>
        </member>
        <member name="F:VRChat.API.Model.NotificationType.FriendRequest">
            <summary>
            Enum FriendRequest for value: friendRequest
            </summary>
        </member>
        <member name="F:VRChat.API.Model.NotificationType.Invite">
            <summary>
            Enum Invite for value: invite
            </summary>
        </member>
        <member name="F:VRChat.API.Model.NotificationType.InviteResponse">
            <summary>
            Enum InviteResponse for value: inviteResponse
            </summary>
        </member>
        <member name="F:VRChat.API.Model.NotificationType.RequestInvite">
            <summary>
            Enum RequestInvite for value: requestInvite
            </summary>
        </member>
        <member name="F:VRChat.API.Model.NotificationType.RequestInviteResponse">
            <summary>
            Enum RequestInviteResponse for value: requestInviteResponse
            </summary>
        </member>
        <member name="F:VRChat.API.Model.NotificationType.Votetokick">
            <summary>
            Enum Votetokick for value: votetokick
            </summary>
        </member>
        <member name="T:VRChat.API.Model.PastDisplayName">
            <summary>
            PastDisplayName
            </summary>
        </member>
        <member name="M:VRChat.API.Model.PastDisplayName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.PastDisplayName" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.PastDisplayName.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.PastDisplayName" /> class.
            </summary>
            <param name="displayName">displayName (required).</param>
            <param name="updatedAt">updatedAt (required).</param>
        </member>
        <member name="P:VRChat.API.Model.PastDisplayName.DisplayName">
            <summary>
            Gets or Sets DisplayName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.PastDisplayName.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="M:VRChat.API.Model.PastDisplayName.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.PastDisplayName.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.PastDisplayName.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.PastDisplayName.Equals(VRChat.API.Model.PastDisplayName)">
            <summary>
            Returns true if PastDisplayName instances are equal
            </summary>
            <param name="input">Instance of PastDisplayName to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.PastDisplayName.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.PastDisplayName.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Permission">
            <summary>
            Permission
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Permission.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Permission" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Permission.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Permission" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="name">name (required).</param>
            <param name="ownerId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="data">data.</param>
        </member>
        <member name="P:VRChat.API.Model.Permission.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Permission.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Permission.OwnerId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.Permission.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Permission.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Permission.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Permission.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Permission.Equals(VRChat.API.Model.Permission)">
            <summary>
            Returns true if Permission instances are equal
            </summary>
            <param name="input">Instance of Permission to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Permission.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Permission.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.PlayerModeration">
            <summary>
            PlayerModeration
            </summary>
        </member>
        <member name="P:VRChat.API.Model.PlayerModeration.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:VRChat.API.Model.PlayerModeration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.PlayerModeration" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.PlayerModeration.#ctor(System.DateTime,System.String,System.String,System.String,System.String,System.String,VRChat.API.Model.PlayerModerationType)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.PlayerModeration" /> class.
            </summary>
            <param name="created">created (required).</param>
            <param name="id">id (required).</param>
            <param name="sourceDisplayName">sourceDisplayName (required).</param>
            <param name="sourceUserId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="targetDisplayName">targetDisplayName (required).</param>
            <param name="targetUserId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="type">type (required).</param>
        </member>
        <member name="P:VRChat.API.Model.PlayerModeration.Created">
            <summary>
            Gets or Sets Created
            </summary>
        </member>
        <member name="P:VRChat.API.Model.PlayerModeration.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.PlayerModeration.SourceDisplayName">
            <summary>
            Gets or Sets SourceDisplayName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.PlayerModeration.SourceUserId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.PlayerModeration.TargetDisplayName">
            <summary>
            Gets or Sets TargetDisplayName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.PlayerModeration.TargetUserId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="M:VRChat.API.Model.PlayerModeration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.PlayerModeration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.PlayerModeration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.PlayerModeration.Equals(VRChat.API.Model.PlayerModeration)">
            <summary>
            Returns true if PlayerModeration instances are equal
            </summary>
            <param name="input">Instance of PlayerModeration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.PlayerModeration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.PlayerModeration.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.PlayerModerationType">
            <summary>
            Defines PlayerModerationType
            </summary>
        </member>
        <member name="F:VRChat.API.Model.PlayerModerationType.Mute">
            <summary>
            Enum Mute for value: mute
            </summary>
        </member>
        <member name="F:VRChat.API.Model.PlayerModerationType.Unmute">
            <summary>
            Enum Unmute for value: unmute
            </summary>
        </member>
        <member name="F:VRChat.API.Model.PlayerModerationType.Block">
            <summary>
            Enum Block for value: block
            </summary>
        </member>
        <member name="F:VRChat.API.Model.PlayerModerationType.Unblock">
            <summary>
            Enum Unblock for value: unblock
            </summary>
        </member>
        <member name="F:VRChat.API.Model.PlayerModerationType.HideAvatar">
            <summary>
            Enum HideAvatar for value: hideAvatar
            </summary>
        </member>
        <member name="F:VRChat.API.Model.PlayerModerationType.ShowAvatar">
            <summary>
            Enum ShowAvatar for value: showAvatar
            </summary>
        </member>
        <member name="F:VRChat.API.Model.PlayerModerationType.InteractOn">
            <summary>
            Enum InteractOn for value: interactOn
            </summary>
        </member>
        <member name="F:VRChat.API.Model.PlayerModerationType.InteractOff">
            <summary>
            Enum InteractOff for value: interactOff
            </summary>
        </member>
        <member name="T:VRChat.API.Model.PublicAnnouncement">
            <summary>
            Public Announcement
            </summary>
        </member>
        <member name="M:VRChat.API.Model.PublicAnnouncement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.PublicAnnouncement" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.PublicAnnouncement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.PublicAnnouncement" /> class.
            </summary>
            <param name="name">Announcement name (required).</param>
            <param name="text">Announcement text (required).</param>
        </member>
        <member name="P:VRChat.API.Model.PublicAnnouncement.Name">
            <summary>
            Announcement name
            </summary>
            <value>Announcement name</value>
        </member>
        <member name="P:VRChat.API.Model.PublicAnnouncement.Text">
            <summary>
            Announcement text
            </summary>
            <value>Announcement text</value>
        </member>
        <member name="M:VRChat.API.Model.PublicAnnouncement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.PublicAnnouncement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.PublicAnnouncement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.PublicAnnouncement.Equals(VRChat.API.Model.PublicAnnouncement)">
            <summary>
            Returns true if PublicAnnouncement instances are equal
            </summary>
            <param name="input">Instance of PublicAnnouncement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.PublicAnnouncement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.PublicAnnouncement.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Region">
            <summary>
            API/Photon region.
            </summary>
            <value>API/Photon region.</value>
        </member>
        <member name="F:VRChat.API.Model.Region.Us">
            <summary>
            Enum Us for value: us
            </summary>
        </member>
        <member name="F:VRChat.API.Model.Region.Use">
            <summary>
            Enum Use for value: use
            </summary>
        </member>
        <member name="F:VRChat.API.Model.Region.Usw">
            <summary>
            Enum Usw for value: usw
            </summary>
        </member>
        <member name="F:VRChat.API.Model.Region.Eu">
            <summary>
            Enum Eu for value: eu
            </summary>
        </member>
        <member name="F:VRChat.API.Model.Region.Jp">
            <summary>
            Enum Jp for value: jp
            </summary>
        </member>
        <member name="F:VRChat.API.Model.Region.Unknown">
            <summary>
            Enum Unknown for value: unknown
            </summary>
        </member>
        <member name="T:VRChat.API.Model.ReleaseStatus">
            <summary>
            Defines ReleaseStatus
            </summary>
        </member>
        <member name="F:VRChat.API.Model.ReleaseStatus.Public">
            <summary>
            Enum Public for value: public
            </summary>
        </member>
        <member name="F:VRChat.API.Model.ReleaseStatus.Private">
            <summary>
            Enum Private for value: private
            </summary>
        </member>
        <member name="F:VRChat.API.Model.ReleaseStatus.Hidden">
            <summary>
            Enum Hidden for value: hidden
            </summary>
        </member>
        <member name="T:VRChat.API.Model.RequestInviteRequest">
            <summary>
            RequestInviteRequest
            </summary>
        </member>
        <member name="M:VRChat.API.Model.RequestInviteRequest.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.RequestInviteRequest" /> class.
            </summary>
            <param name="messageSlot">messageSlot.</param>
        </member>
        <member name="P:VRChat.API.Model.RequestInviteRequest.MessageSlot">
            <summary>
            Gets or Sets MessageSlot
            </summary>
        </member>
        <member name="M:VRChat.API.Model.RequestInviteRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.RequestInviteRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.RequestInviteRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.RequestInviteRequest.Equals(VRChat.API.Model.RequestInviteRequest)">
            <summary>
            Returns true if RequestInviteRequest instances are equal
            </summary>
            <param name="input">Instance of RequestInviteRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.RequestInviteRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.RequestInviteRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Response">
            <summary>
            Response
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Response.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Response" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Response.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Response" /> class.
            </summary>
            <param name="message">message.</param>
            <param name="statusCode">statusCode (required).</param>
        </member>
        <member name="P:VRChat.API.Model.Response.Message">
            <summary>
            Gets or Sets Message
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Response.StatusCode">
            <summary>
            Gets or Sets StatusCode
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Response.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Response.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Response.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Response.Equals(VRChat.API.Model.Response)">
            <summary>
            Returns true if Response instances are equal
            </summary>
            <param name="input">Instance of Response to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Response.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Response.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Subscription">
            <summary>
            Subscription
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Subscription.Period">
            <summary>
            Gets or Sets Period
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Subscription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Subscription" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Subscription.#ctor(System.String,System.String,System.Decimal,System.String,VRChat.API.Model.SubscriptionPeriod,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Subscription" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="steamItemId">steamItemId (required).</param>
            <param name="amount">amount (required).</param>
            <param name="description">description (required).</param>
            <param name="period">period (required).</param>
            <param name="tier">tier (required).</param>
        </member>
        <member name="P:VRChat.API.Model.Subscription.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Subscription.SteamItemId">
            <summary>
            Gets or Sets SteamItemId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Subscription.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Subscription.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Subscription.Tier">
            <summary>
            Gets or Sets Tier
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Subscription.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Subscription.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Subscription.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Subscription.Equals(VRChat.API.Model.Subscription)">
            <summary>
            Returns true if Subscription instances are equal
            </summary>
            <param name="input">Instance of Subscription to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Subscription.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Subscription.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.SubscriptionPeriod">
            <summary>
            Defines SubscriptionPeriod
            </summary>
        </member>
        <member name="F:VRChat.API.Model.SubscriptionPeriod.Hour">
            <summary>
            Enum Hour for value: hour
            </summary>
        </member>
        <member name="F:VRChat.API.Model.SubscriptionPeriod.Day">
            <summary>
            Enum Day for value: day
            </summary>
        </member>
        <member name="F:VRChat.API.Model.SubscriptionPeriod.Week">
            <summary>
            Enum Week for value: week
            </summary>
        </member>
        <member name="F:VRChat.API.Model.SubscriptionPeriod.Month">
            <summary>
            Enum Month for value: month
            </summary>
        </member>
        <member name="F:VRChat.API.Model.SubscriptionPeriod.Year">
            <summary>
            Enum Year for value: year
            </summary>
        </member>
        <member name="T:VRChat.API.Model.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Success.#ctor(VRChat.API.Model.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Success" /> class.
            </summary>
            <param name="success">success.</param>
        </member>
        <member name="P:VRChat.API.Model.Success._Success">
            <summary>
            Gets or Sets _Success
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Success.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Success.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Success.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Success.Equals(VRChat.API.Model.Success)">
            <summary>
            Returns true if Success instances are equal
            </summary>
            <param name="input">Instance of Success to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Success.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Success.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Transaction">
            <summary>
            Transaction
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Transaction.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Transaction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Transaction" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Transaction.#ctor(System.String,VRChat.API.Model.TransactionStatus,VRChat.API.Model.Subscription,System.Boolean,System.DateTime,System.DateTime,VRChat.API.Model.TransactionSteamInfo,VRChat.API.Model.TransactionAgreement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Transaction" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="status">status (required).</param>
            <param name="subscription">subscription (required).</param>
            <param name="sandbox">sandbox (required) (default to false).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="updatedAt">updatedAt (required).</param>
            <param name="steam">steam.</param>
            <param name="agreement">agreement.</param>
            <param name="error">error (required).</param>
        </member>
        <member name="P:VRChat.API.Model.Transaction.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Transaction.Subscription">
            <summary>
            Gets or Sets Subscription
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Transaction.Sandbox">
            <summary>
            Gets or Sets Sandbox
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Transaction.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Transaction.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Transaction.Steam">
            <summary>
            Gets or Sets Steam
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Transaction.Agreement">
            <summary>
            Gets or Sets Agreement
            </summary>
        </member>
        <member name="P:VRChat.API.Model.Transaction.Error">
            <summary>
            Gets or Sets Error
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Transaction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Transaction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Transaction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Transaction.Equals(VRChat.API.Model.Transaction)">
            <summary>
            Returns true if Transaction instances are equal
            </summary>
            <param name="input">Instance of Transaction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Transaction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Transaction.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.TransactionAgreement">
            <summary>
            TransactionAgreement
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TransactionAgreement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.TransactionAgreement" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TransactionAgreement.#ctor(System.String,System.Decimal,System.String,System.String,System.Decimal,System.String,System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.TransactionAgreement" /> class.
            </summary>
            <param name="agreementId">agreementId (required).</param>
            <param name="itemId">itemId (required).</param>
            <param name="status">This is NOT TransactionStatus, but whatever Steam return. (required).</param>
            <param name="period">period (required).</param>
            <param name="frequency">frequency (required).</param>
            <param name="billingType">billingType (required).</param>
            <param name="startDate">startDate (required).</param>
            <param name="endDate">endDate (required).</param>
            <param name="recurringAmt">recurringAmt (required).</param>
            <param name="currency">currency (required).</param>
            <param name="timeCreated">timeCreated (required).</param>
            <param name="nextPayment">nextPayment (required).</param>
            <param name="lastPayment">lastPayment (required).</param>
            <param name="lastAmount">lastAmount (required).</param>
            <param name="lastAmountVat">lastAmountVat (required).</param>
            <param name="outstanding">outstanding (required).</param>
            <param name="failedAttempts">failedAttempts (required).</param>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.AgreementId">
            <summary>
            Gets or Sets AgreementId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.ItemId">
            <summary>
            Gets or Sets ItemId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.Status">
            <summary>
            This is NOT TransactionStatus, but whatever Steam return.
            </summary>
            <value>This is NOT TransactionStatus, but whatever Steam return.</value>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.Period">
            <summary>
            Gets or Sets Period
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.Frequency">
            <summary>
            Gets or Sets Frequency
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.BillingType">
            <summary>
            Gets or Sets BillingType
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.StartDate">
            <summary>
            Gets or Sets StartDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.EndDate">
            <summary>
            Gets or Sets EndDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.RecurringAmt">
            <summary>
            Gets or Sets RecurringAmt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.Currency">
            <summary>
            Gets or Sets Currency
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.TimeCreated">
            <summary>
            Gets or Sets TimeCreated
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.NextPayment">
            <summary>
            Gets or Sets NextPayment
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.LastPayment">
            <summary>
            Gets or Sets LastPayment
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.LastAmount">
            <summary>
            Gets or Sets LastAmount
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.LastAmountVat">
            <summary>
            Gets or Sets LastAmountVat
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.Outstanding">
            <summary>
            Gets or Sets Outstanding
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionAgreement.FailedAttempts">
            <summary>
            Gets or Sets FailedAttempts
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TransactionAgreement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionAgreement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionAgreement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionAgreement.Equals(VRChat.API.Model.TransactionAgreement)">
            <summary>
            Returns true if TransactionAgreement instances are equal
            </summary>
            <param name="input">Instance of TransactionAgreement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionAgreement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionAgreement.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.TransactionStatus">
            <summary>
            Defines TransactionStatus
            </summary>
        </member>
        <member name="F:VRChat.API.Model.TransactionStatus.Active">
            <summary>
            Enum Active for value: active
            </summary>
        </member>
        <member name="F:VRChat.API.Model.TransactionStatus.Failed">
            <summary>
            Enum Failed for value: failed
            </summary>
        </member>
        <member name="F:VRChat.API.Model.TransactionStatus.Expired">
            <summary>
            Enum Expired for value: expired
            </summary>
        </member>
        <member name="F:VRChat.API.Model.TransactionStatus.Chargeback">
            <summary>
            Enum Chargeback for value: chargeback
            </summary>
        </member>
        <member name="T:VRChat.API.Model.TransactionSteamInfo">
            <summary>
            TransactionSteamInfo
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.TransactionSteamInfo" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamInfo.#ctor(VRChat.API.Model.TransactionSteamWalletInfo,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.TransactionSteamInfo" /> class.
            </summary>
            <param name="walletInfo">walletInfo (required).</param>
            <param name="steamId">Steam User ID (required).</param>
            <param name="orderId">Steam Order ID (required).</param>
            <param name="steamUrl">Empty (required).</param>
            <param name="transId">Steam Transaction ID, NOT the same as VRChat TransactionID (required).</param>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamInfo.WalletInfo">
            <summary>
            Gets or Sets WalletInfo
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamInfo.SteamId">
            <summary>
            Steam User ID
            </summary>
            <value>Steam User ID</value>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamInfo.OrderId">
            <summary>
            Steam Order ID
            </summary>
            <value>Steam Order ID</value>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamInfo.SteamUrl">
            <summary>
            Empty
            </summary>
            <value>Empty</value>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamInfo.TransId">
            <summary>
            Steam Transaction ID, NOT the same as VRChat TransactionID
            </summary>
            <value>Steam Transaction ID, NOT the same as VRChat TransactionID</value>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamInfo.Equals(VRChat.API.Model.TransactionSteamInfo)">
            <summary>
            Returns true if TransactionSteamInfo instances are equal
            </summary>
            <param name="input">Instance of TransactionSteamInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamInfo.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.TransactionSteamWalletInfo">
            <summary>
            TransactionSteamWalletInfo
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamWalletInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.TransactionSteamWalletInfo" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamWalletInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.TransactionSteamWalletInfo" /> class.
            </summary>
            <param name="state">state (required).</param>
            <param name="country">country (required) (default to &quot;US&quot;).</param>
            <param name="currency">currency (required) (default to &quot;USD&quot;).</param>
            <param name="status">status (required).</param>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamWalletInfo.State">
            <summary>
            Gets or Sets State
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamWalletInfo.Country">
            <summary>
            Gets or Sets Country
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamWalletInfo.Currency">
            <summary>
            Gets or Sets Currency
            </summary>
        </member>
        <member name="P:VRChat.API.Model.TransactionSteamWalletInfo.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamWalletInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamWalletInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamWalletInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamWalletInfo.Equals(VRChat.API.Model.TransactionSteamWalletInfo)">
            <summary>
            Returns true if TransactionSteamWalletInfo instances are equal
            </summary>
            <param name="input">Instance of TransactionSteamWalletInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamWalletInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.TransactionSteamWalletInfo.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.TwoFactorAuthCode">
            <summary>
            TwoFactorAuthCode
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TwoFactorAuthCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.TwoFactorAuthCode" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TwoFactorAuthCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.TwoFactorAuthCode" /> class.
            </summary>
            <param name="code">code (required).</param>
        </member>
        <member name="P:VRChat.API.Model.TwoFactorAuthCode.Code">
            <summary>
            Gets or Sets Code
            </summary>
        </member>
        <member name="M:VRChat.API.Model.TwoFactorAuthCode.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.TwoFactorAuthCode.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.TwoFactorAuthCode.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.TwoFactorAuthCode.Equals(VRChat.API.Model.TwoFactorAuthCode)">
            <summary>
            Returns true if TwoFactorAuthCode instances are equal
            </summary>
            <param name="input">Instance of TwoFactorAuthCode to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.TwoFactorAuthCode.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.TwoFactorAuthCode.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.UnityPackage">
            <summary>
            UnityPackage
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UnityPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UnityPackage" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UnityPackage.#ctor(System.String,System.Object,System.Int32,System.DateTime,System.String,System.String,System.String,System.Object,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UnityPackage" /> class.
            </summary>
            <param name="assetUrl">assetUrl.</param>
            <param name="assetUrlObject">assetUrlObject.</param>
            <param name="assetVersion">assetVersion (required).</param>
            <param name="createdAt">createdAt.</param>
            <param name="id">id (required).</param>
            <param name="platform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;. (required).</param>
            <param name="pluginUrl">pluginUrl.</param>
            <param name="pluginUrlObject">pluginUrlObject.</param>
            <param name="unitySortNumber">unitySortNumber.</param>
            <param name="unityVersion">unityVersion (required) (default to &quot;5.3.4p1&quot;).</param>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.AssetUrl">
            <summary>
            Gets or Sets AssetUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.AssetUrlObject">
            <summary>
            Gets or Sets AssetUrlObject
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.AssetVersion">
            <summary>
            Gets or Sets AssetVersion
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.Platform">
            <summary>
            This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
            </summary>
            <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.PluginUrl">
            <summary>
            Gets or Sets PluginUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.PluginUrlObject">
            <summary>
            Gets or Sets PluginUrlObject
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.UnitySortNumber">
            <summary>
            Gets or Sets UnitySortNumber
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UnityPackage.UnityVersion">
            <summary>
            Gets or Sets UnityVersion
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UnityPackage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UnityPackage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UnityPackage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UnityPackage.Equals(VRChat.API.Model.UnityPackage)">
            <summary>
            Returns true if UnityPackage instances are equal
            </summary>
            <param name="input">Instance of UnityPackage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UnityPackage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.UnityPackage.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.UpdateAvatarRequest">
            <summary>
            UpdateAvatarRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest.ReleaseStatus">
            <summary>
            Gets or Sets ReleaseStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateAvatarRequest.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Nullable{VRChat.API.Model.ReleaseStatus},System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UpdateAvatarRequest" /> class.
            </summary>
            <param name="assetUrl">assetUrl.</param>
            <param name="id">id.</param>
            <param name="name">name.</param>
            <param name="description">description.</param>
            <param name="tags">tags.</param>
            <param name="imageUrl">imageUrl.</param>
            <param name="releaseStatus">releaseStatus.</param>
            <param name="version">version (default to 1M).</param>
            <param name="unityPackageUrl">unityPackageUrl.</param>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest.AssetUrl">
            <summary>
            Gets or Sets AssetUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest._Version">
            <summary>
            Gets or Sets _Version
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateAvatarRequest.UnityPackageUrl">
            <summary>
            Gets or Sets UnityPackageUrl
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateAvatarRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateAvatarRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateAvatarRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateAvatarRequest.Equals(VRChat.API.Model.UpdateAvatarRequest)">
            <summary>
            Returns true if UpdateAvatarRequest instances are equal
            </summary>
            <param name="input">Instance of UpdateAvatarRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateAvatarRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateAvatarRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.UpdateFavoriteGroupRequest">
            <summary>
            UpdateFavoriteGroupRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateFavoriteGroupRequest.Visibility">
            <summary>
            Gets or Sets Visibility
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateFavoriteGroupRequest.#ctor(System.String,System.Nullable{VRChat.API.Model.FavoriteGroupVisibility},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UpdateFavoriteGroupRequest" /> class.
            </summary>
            <param name="displayName">displayName.</param>
            <param name="visibility">visibility.</param>
            <param name="tags">Tags on FavoriteGroups are believed to do nothing..</param>
        </member>
        <member name="P:VRChat.API.Model.UpdateFavoriteGroupRequest.DisplayName">
            <summary>
            Gets or Sets DisplayName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateFavoriteGroupRequest.Tags">
            <summary>
            Tags on FavoriteGroups are believed to do nothing.
            </summary>
            <value>Tags on FavoriteGroups are believed to do nothing.</value>
        </member>
        <member name="M:VRChat.API.Model.UpdateFavoriteGroupRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateFavoriteGroupRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateFavoriteGroupRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateFavoriteGroupRequest.Equals(VRChat.API.Model.UpdateFavoriteGroupRequest)">
            <summary>
            Returns true if UpdateFavoriteGroupRequest instances are equal
            </summary>
            <param name="input">Instance of UpdateFavoriteGroupRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateFavoriteGroupRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateFavoriteGroupRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.UpdateInviteMessageRequest">
            <summary>
            UpdateInviteMessageRequest
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateInviteMessageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UpdateInviteMessageRequest" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateInviteMessageRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UpdateInviteMessageRequest" /> class.
            </summary>
            <param name="message">message (required).</param>
        </member>
        <member name="P:VRChat.API.Model.UpdateInviteMessageRequest.Message">
            <summary>
            Gets or Sets Message
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateInviteMessageRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateInviteMessageRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateInviteMessageRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateInviteMessageRequest.Equals(VRChat.API.Model.UpdateInviteMessageRequest)">
            <summary>
            Returns true if UpdateInviteMessageRequest instances are equal
            </summary>
            <param name="input">Instance of UpdateInviteMessageRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateInviteMessageRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateInviteMessageRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.UpdateUserRequest">
            <summary>
            UpdateUserRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateUserRequest.#ctor(System.String,System.DateTime,System.Decimal,System.Collections.Generic.List{System.String},System.Nullable{VRChat.API.Model.UserStatus},System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UpdateUserRequest" /> class.
            </summary>
            <param name="email">email.</param>
            <param name="birthday">birthday.</param>
            <param name="acceptedTOSVersion">acceptedTOSVersion.</param>
            <param name="tags">tags.</param>
            <param name="status">status.</param>
            <param name="statusDescription">statusDescription.</param>
            <param name="bio">bio.</param>
            <param name="bioLinks">bioLinks.</param>
            <param name="userIcon">MUST be a valid VRChat /file/ url..</param>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.Email">
            <summary>
            Gets or Sets Email
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.Birthday">
            <summary>
            Gets or Sets Birthday
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.AcceptedTOSVersion">
            <summary>
            Gets or Sets AcceptedTOSVersion
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.StatusDescription">
            <summary>
            Gets or Sets StatusDescription
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.Bio">
            <summary>
            Gets or Sets Bio
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.BioLinks">
            <summary>
            Gets or Sets BioLinks
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateUserRequest.UserIcon">
            <summary>
            MUST be a valid VRChat /file/ url.
            </summary>
            <value>MUST be a valid VRChat /file/ url.</value>
        </member>
        <member name="M:VRChat.API.Model.UpdateUserRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateUserRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateUserRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateUserRequest.Equals(VRChat.API.Model.UpdateUserRequest)">
            <summary>
            Returns true if UpdateUserRequest instances are equal
            </summary>
            <param name="input">Instance of UpdateUserRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateUserRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateUserRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.UpdateWorldRequest">
            <summary>
            UpdateWorldRequest
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.ReleaseStatus">
            <summary>
            Gets or Sets ReleaseStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateWorldRequest.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Nullable{VRChat.API.Model.ReleaseStatus},System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UpdateWorldRequest" /> class.
            </summary>
            <param name="assetUrl">assetUrl.</param>
            <param name="assetVersion">assetVersion.</param>
            <param name="authorId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed..</param>
            <param name="authorName">authorName.</param>
            <param name="capacity">capacity.</param>
            <param name="description">description.</param>
            <param name="imageUrl">imageUrl.</param>
            <param name="name">name.</param>
            <param name="platform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;..</param>
            <param name="releaseStatus">releaseStatus.</param>
            <param name="tags">tags.</param>
            <param name="unityPackageUrl">unityPackageUrl.</param>
            <param name="unityVersion">unityVersion (default to &quot;5.3.4p1&quot;).</param>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.AssetUrl">
            <summary>
            Gets or Sets AssetUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.AssetVersion">
            <summary>
            Gets or Sets AssetVersion
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.AuthorId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.AuthorName">
            <summary>
            Gets or Sets AuthorName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.Capacity">
            <summary>
            Gets or Sets Capacity
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.Platform">
            <summary>
            This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
            </summary>
            <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.UnityPackageUrl">
            <summary>
            Gets or Sets UnityPackageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UpdateWorldRequest.UnityVersion">
            <summary>
            Gets or Sets UnityVersion
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UpdateWorldRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateWorldRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateWorldRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateWorldRequest.Equals(VRChat.API.Model.UpdateWorldRequest)">
            <summary>
            Returns true if UpdateWorldRequest instances are equal
            </summary>
            <param name="input">Instance of UpdateWorldRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateWorldRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.UpdateWorldRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.User">
            <summary>
            User
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.DeveloperType">
            <summary>
            Gets or Sets DeveloperType
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.State">
            <summary>
            Gets or Sets State
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.User" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.User.#ctor(System.Boolean,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.DateTime,VRChat.API.Model.DeveloperType,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,VRChat.API.Model.UserState,VRChat.API.Model.UserStatus,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.User" /> class.
            </summary>
            <param name="allowAvatarCopying">allowAvatarCopying (required) (default to true).</param>
            <param name="bio">bio (required).</param>
            <param name="bioLinks">bioLinks (required).</param>
            <param name="currentAvatarImageUrl">When profilePicOverride is not empty, use it instead. (required).</param>
            <param name="currentAvatarThumbnailImageUrl">When profilePicOverride is not empty, use it instead. (required).</param>
            <param name="dateJoined">dateJoined (required).</param>
            <param name="developerType">developerType (required).</param>
            <param name="displayName">A users visual display name. This is what shows up in-game, and can different from their &#x60;username&#x60;. Changing display name is restricted to a cooldown period. (required).</param>
            <param name="friendKey">friendKey (required).</param>
            <param name="id">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="instanceId">InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance..</param>
            <param name="isFriend">Either their &#x60;friendKey&#x60;, or empty string if you are not friends. Unknown usage. (required).</param>
            <param name="lastLogin">Either a date-time or empty string. (required).</param>
            <param name="lastPlatform">This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;. (required).</param>
            <param name="location">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user..</param>
            <param name="profilePicOverride">profilePicOverride (required).</param>
            <param name="state">state (required).</param>
            <param name="status">status (required).</param>
            <param name="statusDescription">statusDescription (required).</param>
            <param name="tags">tags (required).</param>
            <param name="userIcon">userIcon (required).</param>
            <param name="username">A users unique name, used during login. This is different from &#x60;displayName&#x60; which is what shows up in-game. A users &#x60;username&#x60; can never be changed. (required).</param>
            <param name="worldId">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user..</param>
        </member>
        <member name="P:VRChat.API.Model.User.AllowAvatarCopying">
            <summary>
            Gets or Sets AllowAvatarCopying
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.Bio">
            <summary>
            Gets or Sets Bio
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.BioLinks">
            <summary>
            Gets or Sets BioLinks
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.CurrentAvatarImageUrl">
            <summary>
            When profilePicOverride is not empty, use it instead.
            </summary>
            <value>When profilePicOverride is not empty, use it instead.</value>
        </member>
        <member name="P:VRChat.API.Model.User.CurrentAvatarThumbnailImageUrl">
            <summary>
            When profilePicOverride is not empty, use it instead.
            </summary>
            <value>When profilePicOverride is not empty, use it instead.</value>
        </member>
        <member name="P:VRChat.API.Model.User.DateJoined">
            <summary>
            Gets or Sets DateJoined
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.DisplayName">
            <summary>
            A users visual display name. This is what shows up in-game, and can different from their &#x60;username&#x60;. Changing display name is restricted to a cooldown period.
            </summary>
            <value>A users visual display name. This is what shows up in-game, and can different from their &#x60;username&#x60;. Changing display name is restricted to a cooldown period.</value>
        </member>
        <member name="P:VRChat.API.Model.User.FriendKey">
            <summary>
            Gets or Sets FriendKey
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.Id">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.User.InstanceId">
            <summary>
            InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.
            </summary>
            <value>InstanceID can be \&quot;offline\&quot; on User profiles if you are not friends with that user and \&quot;private\&quot; if you are friends and user is in private instance.</value>
        </member>
        <member name="P:VRChat.API.Model.User.IsFriend">
            <summary>
            Either their &#x60;friendKey&#x60;, or empty string if you are not friends. Unknown usage.
            </summary>
            <value>Either their &#x60;friendKey&#x60;, or empty string if you are not friends. Unknown usage.</value>
        </member>
        <member name="P:VRChat.API.Model.User.LastLogin">
            <summary>
            Either a date-time or empty string.
            </summary>
            <value>Either a date-time or empty string.</value>
        </member>
        <member name="P:VRChat.API.Model.User.LastPlatform">
            <summary>
            This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
            </summary>
            <value>This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.</value>
        </member>
        <member name="P:VRChat.API.Model.User.Location">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.User.ProfilePicOverride">
            <summary>
            Gets or Sets ProfilePicOverride
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.StatusDescription">
            <summary>
            Gets or Sets StatusDescription
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.UserIcon">
            <summary>
            Gets or Sets UserIcon
            </summary>
        </member>
        <member name="P:VRChat.API.Model.User.Username">
            <summary>
            A users unique name, used during login. This is different from &#x60;displayName&#x60; which is what shows up in-game. A users &#x60;username&#x60; can never be changed.
            </summary>
            <value>A users unique name, used during login. This is different from &#x60;displayName&#x60; which is what shows up in-game. A users &#x60;username&#x60; can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.User.WorldId">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="M:VRChat.API.Model.User.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.User.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.User.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.User.Equals(VRChat.API.Model.User)">
            <summary>
            Returns true if User instances are equal
            </summary>
            <param name="input">Instance of User to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.User.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.User.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.UserExists">
            <summary>
            Status object representing if a queried user by username or userId exists or not. This model is primarily used by the &#x60;/auth/exists&#x60; endpoint, which in turn is used during registration. Please see the documentation on that endpoint for more information on usage.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UserExists.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UserExists" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UserExists.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UserExists" /> class.
            </summary>
            <param name="userExists">Status if a user exist with that username or userId. (required) (default to false).</param>
        </member>
        <member name="P:VRChat.API.Model.UserExists._UserExists">
            <summary>
            Status if a user exist with that username or userId.
            </summary>
            <value>Status if a user exist with that username or userId.</value>
        </member>
        <member name="M:VRChat.API.Model.UserExists.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UserExists.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UserExists.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UserExists.Equals(VRChat.API.Model.UserExists)">
            <summary>
            Returns true if UserExists instances are equal
            </summary>
            <param name="input">Instance of UserExists to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UserExists.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.UserExists.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.UserState">
            <summary>
            * \&quot;online\&quot; User is online in VRChat * \&quot;active\&quot; User is online, but not in VRChat * \&quot;offline\&quot; User is offline  Always offline when returned through &#x60;getCurrentUser&#x60; (/auth/user).
            </summary>
            <value>* \&quot;online\&quot; User is online in VRChat * \&quot;active\&quot; User is online, but not in VRChat * \&quot;offline\&quot; User is offline  Always offline when returned through &#x60;getCurrentUser&#x60; (/auth/user).</value>
        </member>
        <member name="F:VRChat.API.Model.UserState.Offline">
            <summary>
            Enum Offline for value: offline
            </summary>
        </member>
        <member name="F:VRChat.API.Model.UserState.Active">
            <summary>
            Enum Active for value: active
            </summary>
        </member>
        <member name="F:VRChat.API.Model.UserState.Online">
            <summary>
            Enum Online for value: online
            </summary>
        </member>
        <member name="T:VRChat.API.Model.UserStatus">
            <summary>
            Defines the User&#39;s current status, for example \&quot;ask me\&quot;, \&quot;join me\&quot; or \&quot;offline. This status is a combined indicator of their online activity and privacy preference.
            </summary>
            <value>Defines the User&#39;s current status, for example \&quot;ask me\&quot;, \&quot;join me\&quot; or \&quot;offline. This status is a combined indicator of their online activity and privacy preference.</value>
        </member>
        <member name="F:VRChat.API.Model.UserStatus.Active">
            <summary>
            Enum Active for value: active
            </summary>
        </member>
        <member name="F:VRChat.API.Model.UserStatus.JoinMe">
            <summary>
            Enum JoinMe for value: join me
            </summary>
        </member>
        <member name="F:VRChat.API.Model.UserStatus.AskMe">
            <summary>
            Enum AskMe for value: ask me
            </summary>
        </member>
        <member name="F:VRChat.API.Model.UserStatus.Busy">
            <summary>
            Enum Busy for value: busy
            </summary>
        </member>
        <member name="F:VRChat.API.Model.UserStatus.Offline">
            <summary>
            Enum Offline for value: offline
            </summary>
        </member>
        <member name="T:VRChat.API.Model.UserSubscription">
            <summary>
            UserSubscription
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Period">
            <summary>
            Gets or Sets Period
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UserSubscription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UserSubscription" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UserSubscription.#ctor(System.String,System.String,System.String,System.String,System.Decimal,System.String,VRChat.API.Model.SubscriptionPeriod,System.Decimal,System.Boolean,VRChat.API.Model.TransactionStatus,System.DateTime,System.DateTime,System.DateTime,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.UserSubscription" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="transactionId">transactionId (required).</param>
            <param name="store">Which \&quot;Store\&quot; it came from. Right now only Stores are \&quot;Steam\&quot; and \&quot;Admin\&quot;. (required).</param>
            <param name="steamItemId">steamItemId.</param>
            <param name="amount">amount (required).</param>
            <param name="description">description (required).</param>
            <param name="period">period (required).</param>
            <param name="tier">tier (required).</param>
            <param name="active">active (required) (default to true).</param>
            <param name="status">status (required).</param>
            <param name="expires">expires (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="updatedAt">updatedAt (required).</param>
            <param name="licenseGroups">licenseGroups (required).</param>
            <param name="isGift">isGift (required) (default to false).</param>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.TransactionId">
            <summary>
            Gets or Sets TransactionId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Store">
            <summary>
            Which \&quot;Store\&quot; it came from. Right now only Stores are \&quot;Steam\&quot; and \&quot;Admin\&quot;.
            </summary>
            <value>Which \&quot;Store\&quot; it came from. Right now only Stores are \&quot;Steam\&quot; and \&quot;Admin\&quot;.</value>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.SteamItemId">
            <summary>
            Gets or Sets SteamItemId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Tier">
            <summary>
            Gets or Sets Tier
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Active">
            <summary>
            Gets or Sets Active
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.Expires">
            <summary>
            Gets or Sets Expires
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.LicenseGroups">
            <summary>
            Gets or Sets LicenseGroups
            </summary>
        </member>
        <member name="P:VRChat.API.Model.UserSubscription.IsGift">
            <summary>
            Gets or Sets IsGift
            </summary>
        </member>
        <member name="M:VRChat.API.Model.UserSubscription.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UserSubscription.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.UserSubscription.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UserSubscription.Equals(VRChat.API.Model.UserSubscription)">
            <summary>
            Returns true if UserSubscription instances are equal
            </summary>
            <param name="input">Instance of UserSubscription to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.UserSubscription.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.UserSubscription.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.Verify2FAResult">
            <summary>
            Verify2FAResult
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Verify2FAResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Verify2FAResult" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Verify2FAResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.Verify2FAResult" /> class.
            </summary>
            <param name="verified">verified (required).</param>
        </member>
        <member name="P:VRChat.API.Model.Verify2FAResult.Verified">
            <summary>
            Gets or Sets Verified
            </summary>
        </member>
        <member name="M:VRChat.API.Model.Verify2FAResult.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Verify2FAResult.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.Verify2FAResult.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Verify2FAResult.Equals(VRChat.API.Model.Verify2FAResult)">
            <summary>
            Returns true if Verify2FAResult instances are equal
            </summary>
            <param name="input">Instance of Verify2FAResult to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.Verify2FAResult.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.Verify2FAResult.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.VerifyAuthTokenResult">
            <summary>
            VerifyAuthTokenResult
            </summary>
        </member>
        <member name="M:VRChat.API.Model.VerifyAuthTokenResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.VerifyAuthTokenResult" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.VerifyAuthTokenResult.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.VerifyAuthTokenResult" /> class.
            </summary>
            <param name="ok">ok (required).</param>
            <param name="token">token (required).</param>
        </member>
        <member name="P:VRChat.API.Model.VerifyAuthTokenResult.Ok">
            <summary>
            Gets or Sets Ok
            </summary>
        </member>
        <member name="P:VRChat.API.Model.VerifyAuthTokenResult.Token">
            <summary>
            Gets or Sets Token
            </summary>
        </member>
        <member name="M:VRChat.API.Model.VerifyAuthTokenResult.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.VerifyAuthTokenResult.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.VerifyAuthTokenResult.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.VerifyAuthTokenResult.Equals(VRChat.API.Model.VerifyAuthTokenResult)">
            <summary>
            Returns true if VerifyAuthTokenResult instances are equal
            </summary>
            <param name="input">Instance of VerifyAuthTokenResult to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.VerifyAuthTokenResult.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.VerifyAuthTokenResult.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.World">
            <summary>
            World
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.ReleaseStatus">
            <summary>
            Gets or Sets ReleaseStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.World.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.World" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.World.#ctor(System.String,System.Object,System.String,System.String,System.Int32,System.DateTime,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.String,System.String,System.Int32,System.String,System.Object,System.Int32,System.String,System.Int32,System.Int32,System.String,VRChat.API.Model.ReleaseStatus,System.Collections.Generic.List{System.String},System.String,System.Object,System.Collections.Generic.List{VRChat.API.Model.UnityPackage},System.DateTime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.World" /> class.
            </summary>
            <param name="assetUrl">Empty if unauthenticated. (required).</param>
            <param name="assetUrlObject">assetUrlObject (required).</param>
            <param name="authorId">A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed. (required).</param>
            <param name="authorName">authorName (required).</param>
            <param name="capacity">capacity (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="description">description (required).</param>
            <param name="favorites">favorites (default to 0).</param>
            <param name="featured">featured (required) (default to false).</param>
            <param name="heat">heat (required) (default to 0).</param>
            <param name="id">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="imageUrl">imageUrl (required).</param>
            <param name="instances">instances.</param>
            <param name="labsPublicationDate">labsPublicationDate (required).</param>
            <param name="name">name (required).</param>
            <param name="_namespace">_namespace (required).</param>
            <param name="occupants">occupants (default to 0).</param>
            <param name="organization">organization (required) (default to &quot;vrchat&quot;).</param>
            <param name="pluginUrlObject">pluginUrlObject (required).</param>
            <param name="popularity">popularity (required) (default to 0).</param>
            <param name="previewYoutubeId">previewYoutubeId.</param>
            <param name="privateOccupants">privateOccupants (default to 0).</param>
            <param name="publicOccupants">publicOccupants (default to 0).</param>
            <param name="publicationDate">publicationDate (required).</param>
            <param name="releaseStatus">releaseStatus (required).</param>
            <param name="tags">tags (required).</param>
            <param name="thumbnailImageUrl">thumbnailImageUrl (required).</param>
            <param name="unityPackageUrlObject">unityPackageUrlObject (required).</param>
            <param name="unityPackages">Empty if unauthenticated. (required).</param>
            <param name="updatedAt">updatedAt (required).</param>
            <param name="version">version (required) (default to 0).</param>
            <param name="visits">visits (required) (default to 0).</param>
        </member>
        <member name="P:VRChat.API.Model.World.AssetUrl">
            <summary>
            Empty if unauthenticated.
            </summary>
            <value>Empty if unauthenticated.</value>
        </member>
        <member name="P:VRChat.API.Model.World.AssetUrlObject">
            <summary>
            Gets or Sets AssetUrlObject
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.AuthorId">
            <summary>
            A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
            </summary>
            <value>A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.</value>
        </member>
        <member name="P:VRChat.API.Model.World.AuthorName">
            <summary>
            Gets or Sets AuthorName
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Capacity">
            <summary>
            Gets or Sets Capacity
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Favorites">
            <summary>
            Gets or Sets Favorites
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Featured">
            <summary>
            Gets or Sets Featured
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Heat">
            <summary>
            Gets or Sets Heat
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Id">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.World.ImageUrl">
            <summary>
            Gets or Sets ImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Instances">
            <summary>
            Gets or Sets Instances
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.LabsPublicationDate">
            <summary>
            Gets or Sets LabsPublicationDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Namespace">
            <summary>
            Gets or Sets Namespace
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Occupants">
            <summary>
            Gets or Sets Occupants
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Organization">
            <summary>
            Gets or Sets Organization
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.PluginUrlObject">
            <summary>
            Gets or Sets PluginUrlObject
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Popularity">
            <summary>
            Gets or Sets Popularity
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.PreviewYoutubeId">
            <summary>
            Gets or Sets PreviewYoutubeId
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.PrivateOccupants">
            <summary>
            Gets or Sets PrivateOccupants
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.PublicOccupants">
            <summary>
            Gets or Sets PublicOccupants
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.PublicationDate">
            <summary>
            Gets or Sets PublicationDate
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.ThumbnailImageUrl">
            <summary>
            Gets or Sets ThumbnailImageUrl
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.UnityPackageUrlObject">
            <summary>
            Gets or Sets UnityPackageUrlObject
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.UnityPackages">
            <summary>
            Empty if unauthenticated.
            </summary>
            <value>Empty if unauthenticated.</value>
        </member>
        <member name="P:VRChat.API.Model.World.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World._Version">
            <summary>
            Gets or Sets _Version
            </summary>
        </member>
        <member name="P:VRChat.API.Model.World.Visits">
            <summary>
            Gets or Sets Visits
            </summary>
        </member>
        <member name="M:VRChat.API.Model.World.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.World.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.World.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.World.Equals(VRChat.API.Model.World)">
            <summary>
            Returns true if World instances are equal
            </summary>
            <param name="input">Instance of World to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.World.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.World.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.WorldMetadata">
            <summary>
            WorldMetadata
            </summary>
        </member>
        <member name="M:VRChat.API.Model.WorldMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.WorldMetadata" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.WorldMetadata.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.WorldMetadata" /> class.
            </summary>
            <param name="id">WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user. (required).</param>
            <param name="metadata">metadata (required).</param>
        </member>
        <member name="P:VRChat.API.Model.WorldMetadata.Id">
            <summary>
            WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
            </summary>
            <value>WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.</value>
        </member>
        <member name="P:VRChat.API.Model.WorldMetadata.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="M:VRChat.API.Model.WorldMetadata.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldMetadata.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldMetadata.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldMetadata.Equals(VRChat.API.Model.WorldMetadata)">
            <summary>
            Returns true if WorldMetadata instances are equal
            </summary>
            <param name="input">Instance of WorldMetadata to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldMetadata.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldMetadata.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:VRChat.API.Model.WorldPublishStatus">
            <summary>
            WorldPublishStatus
            </summary>
        </member>
        <member name="M:VRChat.API.Model.WorldPublishStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.WorldPublishStatus" /> class.
            </summary>
        </member>
        <member name="M:VRChat.API.Model.WorldPublishStatus.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VRChat.API.Model.WorldPublishStatus" /> class.
            </summary>
            <param name="canPubilsh">canPubilsh (required) (default to true).</param>
        </member>
        <member name="P:VRChat.API.Model.WorldPublishStatus.CanPubilsh">
            <summary>
            Gets or Sets CanPubilsh
            </summary>
        </member>
        <member name="M:VRChat.API.Model.WorldPublishStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldPublishStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldPublishStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldPublishStatus.Equals(VRChat.API.Model.WorldPublishStatus)">
            <summary>
            Returns true if WorldPublishStatus instances are equal
            </summary>
            <param name="input">Instance of WorldPublishStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldPublishStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VRChat.API.Model.WorldPublishStatus.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
    </members>
</doc>
