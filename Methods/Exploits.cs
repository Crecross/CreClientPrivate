using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Harmony;
using MelonLoader;
using Photon.Pun;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using UnhollowerBaseLib;
using UnityEngine;
using VRC;
using VRC.Core;
using VRC.SDK.Internal.MeetingBunker.VRC_Presentation_Utils;
using VRC.SDK3.Components;
using VRC.SDKBase;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;
using VRC.UserCamera;
using VRCSDK2;

namespace CreClientTest.Modules
{
    class Exploits
    {
        public static void VideoClap()
        {
            string url = $"https://www.youtube.com/watch?v=3GXrDEurYbg";
            foreach (VRC_SyncVideoPlayer vrc_SyncVideoPlayer in UnityEngine.Object.FindObjectsOfType<VRC_SyncVideoPlayer>())
            {
                if (vrc_SyncVideoPlayer != null)
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_SyncVideoPlayer.gameObject);
                    vrc_SyncVideoPlayer.Stop();
                    vrc_SyncVideoPlayer.Clear();
                    vrc_SyncVideoPlayer.AddURL(url);
                    vrc_SyncVideoPlayer.Next();
                    vrc_SyncVideoPlayer.Play();
                }
            }
            foreach (VRC_SyncVideoPlayer vrc_SyncVideoPlayer2 in UnityEngine.Object.FindObjectsOfType<VRC_SyncVideoPlayer>())
            {
                if (vrc_SyncVideoPlayer2 != null)
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_SyncVideoPlayer2.gameObject);
                    vrc_SyncVideoPlayer2.Stop();
                    vrc_SyncVideoPlayer2.Clear();
                    vrc_SyncVideoPlayer2.AddURL(url);
                    vrc_SyncVideoPlayer2.Next();
                    vrc_SyncVideoPlayer2.Play();
                }
            }
        }
        public static bool KShield = false;
        public static void KnifeShield()
        {
            
            List<GameObject> Knifes = new List<GameObject>()
            {
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (0)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (1)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (2)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (3)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (4)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (5)").gameObject,
            };
            GameObject gameObject = new GameObject();
            Transform transform = gameObject.transform;
            transform.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.35f, 0f);
            gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time, 0f));
            if(KShield = true)
            foreach (var Knife in Knifes)
            {
               Networking.LocalPlayer.TakeOwnership(Knife.gameObject);
                Knife.transform.position = gameObject.transform.position + gameObject.transform.forward;
                Knife.transform.LookAt(VRCPlayer.field_Internal_Static_VRCPlayer_0.transform);
                gameObject.transform.Rotate(new Vector3(0f, (float)(360 / Knifes.Count), 0f));
            }
            UnityEngine.Object.Destroy(gameObject);
            gameObject = null;
            transform = null;
        }
    }
  
}
